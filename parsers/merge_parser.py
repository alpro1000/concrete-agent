# parsers/merge_parser.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (concrete, materials, smeta, diff)
—Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ prompts/merge_logic_prompt.json
"""

import json
import os
import logging
from typing import Dict, Any

from outputs.save_report import save_merged_report

logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å–ª–∏—è–Ω–∏—è
MERGE_RULES = {}
PROMPT_PATH = os.path.join("prompts", "merge_logic_prompt.json")

try:
    with open(PROMPT_PATH, encoding="utf-8") as f:
        MERGE_RULES = json.load(f)
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ {PROMPT_PATH}")
except FileNotFoundError:
    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {PROMPT_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞.")
    MERGE_RULES = {
        "conflict_resolution": {"strategy": "prefer_concrete_agent"},
        "output_format": {"final_report": "json"}
    }


def merge_results(
    concrete_data: Dict[str, Any] = None,
    materials_data: Dict[str, Any] = None,
    smeta_data: Dict[str, Any] = None,
    diff_data: Dict[str, Any] = None,
    output_path: str = "outputs/merged_report.json"
) -> Dict[str, Any]:
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ –µ–¥–∏–Ω—ã–π JSON-–æ—Ç—á—ë—Ç.

    :param concrete_data: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç concrete_agent
    :param materials_data: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç materials_agent
    :param smeta_data: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç smetny_inzenyr
    :param diff_data: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç version_diff_agent
    :param output_path: –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
    :return: –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    """

    logger.info("üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")

    final_report: Dict[str, Any] = {
        "concrete": concrete_data or {},
        "materials": materials_data or {},
        "smeta": smeta_data or {},
        "diff": diff_data or {},
        "metadata": {
            "merge_strategy": MERGE_RULES.get("merge_strategy", {}),
            "conflict_resolution": MERGE_RULES.get("conflict_resolution", {}),
        }
    }

    # --- –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è ---
    if concrete_data and materials_data:
        # –ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è "–±–µ—Ç–æ–Ω + –∞—Ä–º–∞—Ç—É—Ä–∞" ‚Üí –ø–æ–º–µ—á–∞–µ–º —Å–≤—è–∑–∫—É
        for mat in materials_data.get("materials_found", []):
            if "ocel" in mat.get("found_terms", []):
                final_report.setdefault("relations", []).append(
                    {"material": "steel", "linked_with": "concrete"}
                )

    if smeta_data and concrete_data:
        # –µ—Å–ª–∏ —Å–º–µ—Ç–∞ —É–ø–æ–º–∏–Ω–∞–µ—Ç –±–µ—Ç–æ–Ω–Ω—ã–µ –º–∞—Ä–∫–∏ ‚Äî —Å–≤—è–∑—ã–≤–∞–µ–º
        for grade_info in concrete_data.get("concrete_summary", []):
            mentions = grade_info.get("smeta_mentions", [])
            if mentions:
                final_report.setdefault("cross_links", []).append(
                    {"grade": grade_info["grade"], "smeta_mentions": mentions}
                )

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
    save_merged_report(final_report, output_path)

    logger.info(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å–æ–±—Ä–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_path}")
    return final_report
