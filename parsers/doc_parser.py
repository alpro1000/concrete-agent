"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—à—Å–∫–∏—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫
parsers/doc_parser.py - –ü–û–õ–ù–´–ô –ö–û–ú–ü–õ–ï–ö–¢–ù–´–ô –ö–û–î –î–õ–Ø –ó–ê–ú–ï–ù–´
"""

import os
import logging
import pdfplumber
from pathlib import Path
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class DocParser:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—à—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        # –°–ø–∏—Å–æ–∫ –∫–æ–¥–∏—Ä–æ–≤–æ–∫ –¥–ª—è —á–µ—à—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        self.czech_encodings = [
            'utf-8',       # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç
            'cp1250',      # Windows Eastern European
            'iso-8859-2',  # Latin-2 (Central European)
            'utf-16',      # Unicode 16-bit
            'cp1252',      # Windows Western European (fallback)
        ]
        
        logger.info("üìö DocParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —á–µ—à—Å–∫–∏—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫")

    def parse(self, file_path: str) -> str:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
        Raises:
            FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            ValueError: –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        """
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        file_ext = Path(file_path).suffix.lower()
        file_name = Path(file_path).name
        
        logger.info(f"üîç –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {file_name}")
        
        try:
            if file_ext == '.pdf':
                text = self._extract_text_from_pdf_enhanced(file_path)
            elif file_ext in ['.docx', '.doc']:
                text = self._extract_text_from_docx_enhanced(file_path)
            elif file_ext == '.txt':
                text = self._read_text_file_with_encoding(file_path)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_ext}")
            
            if not text.strip():
                logger.warning(f"‚ö†Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç: {file_name}")
                return ""
            
            logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ {file_name}")
            return text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")
            raise

    def _extract_text_from_pdf_enhanced(self, file_path: str) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Å —á–µ—à—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
        
        Args:
            file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            
        Returns:
            –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        text_parts = []
        
        try:
            with pdfplumber.open(file_path) as pdf:
                total_pages = len(pdf.pages)
                logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
                
                for page_num, page in enumerate(pdf.pages):
                    try:
                        # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                        page_text = page.extract_text()
                        
                        if not page_text or len(page_text.strip()) < 10:
                            # –ü—Ä–æ–±—É–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö PDF
                            page_text = page.extract_text(
                                x_tolerance=2,
                                y_tolerance=2,
                                layout=True,
                                x_density=7.25,
                                y_density=7.25
                            )
                        
                        if not page_text or len(page_text.strip()) < 10:
                            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã—Ö PDF
                            try:
                                page_text = page.extract_text(
                                    x_tolerance=1,
                                    y_tolerance=1
                                )
                            except:
                                page_text = ""
                        
                        if page_text and page_text.strip():
                            text_parts.append(f"\n=== –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} ===\n")
                            text_parts.append(page_text.strip())
                            text_parts.append("\n")
                            logger.debug(f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: {len(page_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}")
                            
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}: {e}")
                        continue
                        
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF {file_path}: {e}")
            return ""
        
        combined_text = "".join(text_parts)
        
        if combined_text:
            logger.info(f"üìÑ PDF —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(text_parts)//3} —Å—Ç—Ä–∞–Ω–∏—Ü, {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF: {file_path}")
        
        return combined_text

    def _extract_text_from_docx_enhanced(self, file_path: str) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ DOCX —Ñ–∞–π–ª–æ–≤
        
        Args:
            file_path: –ü—É—Ç—å –∫ DOCX —Ñ–∞–π–ª—É
            
        Returns:
            –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            from docx import Document
        except ImportError:
            logger.error("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: pip install python-docx")
            return ""
        
        try:
            doc = Document(file_path)
            text_parts = []
            paragraph_count = 0
            table_count = 0
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():
                    text_parts.append(paragraph.text.strip())
                    paragraph_count += 1
            
            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
            for table in doc.tables:
                table_count += 1
                table_text = []
                
                for row in table.rows:
                    row_text = []
                    for cell in row.cells:
                        if cell.text.strip():
                            row_text.append(cell.text.strip())
                    
                    if row_text:
                        table_text.append(" | ".join(row_text))
                
                if table_text:
                    text_parts.append(f"\n=== –¢–∞–±–ª–∏—Ü–∞ {table_count} ===")
                    text_parts.extend(table_text)
                    text_parts.append("")
            
            combined_text = "\n".join(text_parts)
            
            logger.info(f"üìù DOCX –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {paragraph_count} –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤, {table_count} —Ç–∞–±–ª–∏—Ü, {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return combined_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DOCX {file_path}: {e}")
            return ""

    def _read_text_file_with_encoding(self, file_path: str) -> str:
        """
        –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        """
        file_name = Path(file_path).name
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        for encoding in self.czech_encodings:
            try:
                with open(file_path, 'r', encoding=encoding) as f:
                    text = f.read()
                    
                if text.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç
                    logger.info(f"üìñ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {file_name} –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π: {encoding}")
                    return text
                    
            except (UnicodeDecodeError, UnicodeError):
                logger.debug(f"üîÑ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ {encoding} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è {file_name}")
                continue
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_name} —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º —Å –∑–∞–º–µ–Ω–æ–π –æ—à–∏–±–æ–∫
        logger.warning(f"‚ö†Ô∏è –í—Å–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–ª—è {file_name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTF-8 —Å –∑–∞–º–µ–Ω–æ–π –æ—à–∏–±–æ–∫")
        
        try:
            with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                text = f.read()
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {file_name} –ø—Ä–æ—á–∏—Ç–∞–Ω —Å –∑–∞–º–µ–Ω–æ–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
                return text
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_name}: {e}")
            return ""

    def parse_multiple(self, file_paths: List[str]) -> Dict[str, str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        
        Args:
            file_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {–∏–º—è_—Ñ–∞–π–ª–∞: –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç}
        """
        results = {}
        
        logger.info(f"üîÑ –ù–∞—á–∞–ª–æ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(file_paths)} —Ñ–∞–π–ª–æ–≤")
        
        for file_path in file_paths:
            file_name = Path(file_path).name
            
            try:
                text = self.parse(file_path)
                results[file_name] = text
                
                if text:
                    logger.info(f"‚úÖ {file_name}: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    logger.warning(f"‚ö†Ô∏è {file_name}: –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_name}: {e}")
                results[file_name] = ""
        
        successful = len([r for r in results.values() if r.strip()])
        logger.info(f"üìä –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful}/{len(file_paths)} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        
        return results

    def get_file_info(self, file_path: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
        """
        if not os.path.exists(file_path):
            return {'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        file_stat = os.stat(file_path)
        file_path_obj = Path(file_path)
        
        info = {
            'name': file_path_obj.name,
            'extension': file_path_obj.suffix.lower(),
            'size_bytes': file_stat.st_size,
            'size_mb': round(file_stat.st_size / (1024 * 1024), 2),
            'path': str(file_path_obj.absolute()),
            'supported': file_path_obj.suffix.lower() in ['.pdf', '.docx', '.doc', '.txt']
        }
        
        return info


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_doc_parser():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    parser = DocParser()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_content = """
    Testovac√≠ dokument s ƒçeskou diakritikou.
    T≈ô√≠da betonu C30/37 ‚Äì XC4, XF3.
    D≈ô√≠k opƒõrn√© zdi, z√°kladov√° ƒç√°st.
    """
    
    test_file = "test_czech.txt"
    
    try:
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
        result = parser.parse(test_file)
        
        print("üß™ TESTING DOC PARSER")
        print("=" * 30)
        print(f"Input:  {test_content.strip()}")
        print(f"Output: {result.strip()}")
        print(f"Length: {len(result)} characters")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        os.remove(test_file)
        
        return result
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        return ""


if __name__ == "__main__":
    test_doc_parser()
