"""
parsers/smeta_parser.py
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å–º–µ—Ç –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
"""

import os
import logging
from pathlib import Path
from typing import Dict, List, Any, Optional

logger = logging.getLogger(__name__)

class SmetaParser:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å–º–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    """
    
    def __init__(self):
        self.supported_formats = ['.xml', '.xlsx', '.xls', '.pdf', '.docx', '.txt']
        logger.info("üìã SmetaParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def parse(self, file_path: str) -> Dict[str, Any]:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–º–µ—Ç—ã
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–º–µ—Ç—ã
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ —Å–º–µ—Ç—ã
        """
        if not os.path.exists(file_path):
            logger.error(f"‚ùå –§–∞–π–ª —Å–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return {"items": [], "summary": {}, "error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        file_ext = Path(file_path).suffix.lower()
        file_name = Path(file_path).name
        
        logger.info(f"üìä –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–º–µ—Ç—ã: {file_name}")
        
        try:
            if file_ext == '.xml':
                items = self._parse_xml_smeta(file_path)
            elif file_ext in ['.xlsx', '.xls']:
                items = self._parse_excel_smeta(file_path)
            elif file_ext == '.pdf':
                items = self._parse_pdf_smeta(file_path)
            elif file_ext in ['.docx', '.txt']:
                items = self._parse_document_smeta(file_path)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–º–µ—Ç—ã: {file_ext}")
                return {"items": [], "summary": {}, "error": f"–§–æ—Ä–º–∞—Ç {file_ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"}
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
            summary = self._create_summary(items)
            
            logger.info(f"‚úÖ –°–º–µ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {len(items)} –ø–æ–∑–∏—Ü–∏–π")
            
            return {
                "items": items,
                "summary": summary,
                "source_file": file_name,
                "format": file_ext,
                "success": True
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–º–µ—Ç—ã {file_name}: {e}")
            return {"items": [], "summary": {}, "error": str(e)}

    def _parse_xml_smeta(self, file_path: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ XML —Å–º–µ—Ç—ã"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π XML –ø–∞—Ä—Å–µ—Ä
            from parsers.xml_smeta_parser import parse_xml_smeta
            
            xml_rows = parse_xml_smeta(file_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            items = []
            for row in xml_rows:
                items.append({
                    "row": row.get("row", 0),
                    "code": row.get("code", ""),
                    "name": row.get("name", ""),
                    "quantity": row.get("qty", 0),
                    "unit": row.get("unit", ""),
                    "price": 0,  # –¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ XML –ø–∞—Ä—Å–µ—Ä–µ
                    "total": 0,
                    "source": "XML"
                })
            
            return items
            
        except ImportError:
            logger.error("‚ùå xml_smeta_parser –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML —Å–º–µ—Ç—ã: {e}")
            return []

    def _parse_excel_smeta(self, file_path: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ Excel —Å–º–µ—Ç—ã"""
        try:
            import pandas as pd
            
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(file_path, sheet_name=0, header=0)
            
            items = []
            
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            column_mapping = self._detect_excel_columns(df.columns)
            
            for idx, row in df.iterrows():
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
                    item = {
                        "row": idx + 1,
                        "code": self._safe_get_value(row, column_mapping.get("code", "")),
                        "name": self._safe_get_value(row, column_mapping.get("name", "")),
                        "quantity": self._safe_get_numeric(row, column_mapping.get("quantity", "")),
                        "unit": self._safe_get_value(row, column_mapping.get("unit", "")),
                        "price": self._safe_get_numeric(row, column_mapping.get("price", "")),
                        "total": self._safe_get_numeric(row, column_mapping.get("total", "")),
                        "source": "Excel"
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                    if item["name"] or item["code"]:
                        items.append(item)
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")
                    continue
            
            return items
            
        except ImportError:
            logger.error("‚ùå pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pandas openpyxl")
            return []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Å–º–µ—Ç—ã: {e}")
            return []

    def _parse_pdf_smeta(self, file_path: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ PDF —Å–º–µ—Ç—ã"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π DocParser
            from parsers.doc_parser import DocParser
            
            doc_parser = DocParser()
            text = doc_parser.parse(file_path)
            
            if not text:
                return []
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–º–µ—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            return self._parse_text_smeta(text, "PDF")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF —Å–º–µ—Ç—ã: {e}")
            return []

    def _parse_document_smeta(self, file_path: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ DOCX/TXT —Å–º–µ—Ç—ã"""
        try:
            from parsers.doc_parser import DocParser
            
            doc_parser = DocParser()
            text = doc_parser.parse(file_path)
            
            if not text:
                return []
            
            format_name = "DOCX" if file_path.endswith('.docx') else "TXT"
            return self._parse_text_smeta(text, format_name)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–º–µ—Ç—ã: {e}")
            return []

    def _parse_text_smeta(self, text: str, source: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–º–µ—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        items = []
        lines = text.split('\n')
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–º–µ—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        smeta_patterns = [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–¥—ã + –æ–ø–∏—Å–∞–Ω–∏–µ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + –µ–¥–∏–Ω–∏—Ü–∞
            r'(\d{3}\.\d{3}\.\d{3})\s+(.+?)\s+(\d+(?:[,.]\d+)?)\s+(m[23]|ks|kg|t|—à—Ç|–º[23])',
            # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç: –Ω–æ–º–µ—Ä + –æ–ø–∏—Å–∞–Ω–∏–µ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            r'^(\d+)\s+(.+?)\s+(\d+(?:[,.]\d+)?)\s*(m[23]|ks|kg|t|—à—Ç|–º[23]|)',
            # –û–ø–∏—Å–∞–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ
            r'(.+?)\s+(\d+(?:[,.]\d+)?)\s+(m[23]|ks|kg|t|—à—Ç|–º[23])$',
        ]
        
        row_number = 1
        for line in lines:
            line = line.strip()
            if len(line) < 10:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
                continue
            
            for pattern in smeta_patterns:
                import re
                match = re.search(pattern, line, re.IGNORECASE)
                if match:
                    try:
                        groups = match.groups()
                        
                        if len(groups) >= 3:
                            if len(groups) == 4:  # –° –∫–æ–¥–æ–º
                                code, name, qty_str, unit = groups
                            else:  # –ë–µ–∑ –∫–æ–¥–∞
                                code = ""
                                name, qty_str, unit = groups
                            
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            quantity = float(qty_str.replace(',', '.'))
                            
                            item = {
                                "row": row_number,
                                "code": code.strip(),
                                "name": name.strip(),
                                "quantity": quantity,
                                "unit": unit.strip(),
                                "price": 0,
                                "total": 0,
                                "source": source
                            }
                            
                            items.append(item)
                            row_number += 1
                            break
                            
                    except (ValueError, IndexError) as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {line[:50]}... - {e}")
                        continue
        
        return items

    def _detect_excel_columns(self, columns) -> Dict[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ Excel —Ñ–∞–π–ª–µ"""
        column_mapping = {}
        
        # –°–ª–æ–≤–∞—Ä—å –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
        column_patterns = {
            "code": ["–∫–æ–¥", "code", "—à–∏—Ñ—Ä", "–ø–æ–∑–∏—Ü–∏—è", "‚Ññ"],
            "name": ["–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–Ω–∞–∑–≤–∞–Ω–∏–µ", "name", "–æ–ø–∏—Å–∞–Ω–∏–µ", "—Ä–∞–±–æ—Ç—ã"],
            "quantity": ["–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "qty", "–∫–æ–ª-–≤–æ", "–æ–±—ä–µ–º", "–∫–æ–ª."],
            "unit": ["–µ–¥.–∏–∑–º", "–µ–¥–∏–Ω–∏—Ü–∞", "unit", "–µ–¥.", "–∏–∑–º"],
            "price": ["—Ü–µ–Ω–∞", "price", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ç–∞—Ä–∏—Ñ"],
            "total": ["–≤—Å–µ–≥–æ", "total", "—Å—É–º–º–∞", "–∏—Ç–æ–≥–æ"]
        }
        
        for field, patterns in column_patterns.items():
            for col in columns:
                col_lower = str(col).lower()
                for pattern in patterns:
                    if pattern in col_lower:
                        column_mapping[field] = col
                        break
                if field in column_mapping:
                    break
        
        return column_mapping

    def _safe_get_value(self, row, column: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if not column or column not in row.index:
            return ""
        
        value = row[column]
        if pd.isna(value):
            return ""
        
        return str(value).strip()

    def _safe_get_numeric(self, row, column: str) -> float:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
        if not column or column not in row.index:
            return 0.0
        
        try:
            import pandas as pd
            value = row[column]
            if pd.isna(value):
                return 0.0
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
            if isinstance(value, str):
                value = value.replace(',', '.').strip()
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –º–∏–Ω—É—Å–æ–≤
                import re
                value = re.sub(r'[^\d.,-]', '', value)
                if not value:
                    return 0.0
            
            return float(value)
            
        except (ValueError, TypeError):
            return 0.0

    def _create_summary(self, items: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø–æ–∑–∏—Ü–∏—è–º —Å–º–µ—Ç—ã"""
        if not items:
            return {}
        
        total_items = len(items)
        total_quantity = sum(item.get("quantity", 0) for item in items)
        total_cost = sum(item.get("total", 0) for item in items)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –µ–¥–∏–Ω–∏—Ü–∞–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
        units_summary = {}
        for item in items:
            unit = item.get("unit", "")
            if unit:
                if unit not in units_summary:
                    units_summary[unit] = {"count": 0, "quantity": 0}
                units_summary[unit]["count"] += 1
                units_summary[unit]["quantity"] += item.get("quantity", 0)
        
        return {
            "total_items": total_items,
            "total_quantity": total_quantity,
            "total_cost": total_cost,
            "units_summary": units_summary,
            "has_prices": any(item.get("price", 0) > 0 for item in items),
            "has_codes": any(item.get("code", "") for item in items)
        }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_smeta_parser():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å–º–µ—Ç"""
    parser = SmetaParser()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    test_text = """
    801.001.001 Beton prost√Ω C12/15-X0 125,50 m3
    801.002.001 ≈Ωelezobeton C25/30-XC2 85,25 m3
    802.001.001 V√Ωztu≈æ beton√°≈ôsk√° 2500,00 kg
    """
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    items = parser._parse_text_smeta(test_text, "TEST")
    
    print("üß™ TESTING SMETA PARSER")
    print("=" * 40)
    
    for item in items:
        print(f"Code: {item['code']}")
        print(f"Name: {item['name']}")
        print(f"Quantity: {item['quantity']} {item['unit']}")
        print("-" * 30)
    
    summary = parser._create_summary(items)
    print(f"Total items: {summary['total_items']}")
    print(f"Units: {list(summary['units_summary'].keys())}")
    
    return items


if __name__ == "__main__":
    test_smeta_parser()
