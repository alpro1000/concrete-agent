"""
Smart Parser - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
–ë–ï–ó CLAUDE FALLBACK - —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã

–õ–æ–≥–∏–∫–∞:
- –§–∞–π–ª < 20MB ‚Üí –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã (pandas, pdfplumber)
- –§–∞–π–ª > 20MB ‚Üí Streaming –ø–∞—Ä—Å–µ—Ä—ã (memory-efficient)
- –ê–≤—Ç–æ–≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ (Excel, PDF, XML)
"""
import logging
from pathlib import Path
from typing import Dict, Any, Optional

from app.parsers.excel_parser import ExcelParser
from app.parsers.pdf_parser import PDFParser
from app.parsers.kros_parser import KROSParser
from app.parsers.memory_efficient import (
    MemoryEfficientExcelParser,
    MemoryEfficientPDFParser,
    MemoryEfficientXMLParser
)

logger = logging.getLogger(__name__)

# –ü–æ—Ä–æ–≥ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ streaming (20MB)
SIZE_THRESHOLD_MB = 20


class SmartParser:
    """
    –£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä - –≤—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    
    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞
    - Memory-safe –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    - –ë–µ–∑ Claude fallback = –±–µ–∑ —Ç—Ä–∞—Ç
    - –ü—Ä–æ—Å—Ç–æ–π API
    """
    
    def __init__(self):
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã (–±—ã—Å—Ç—Ä—ã–µ, —É–¥–æ–±–Ω—ã–µ)
        self.excel_parser = ExcelParser()
        self.pdf_parser = PDFParser()
        self.kros_parser = KROSParser()
        
        # Streaming –ø–∞—Ä—Å–µ—Ä—ã (—ç–∫–æ–Ω–æ–º–Ω—ã–µ –ø–æ –ø–∞–º—è—Ç–∏)
        self.streaming_excel = MemoryEfficientExcelParser()
        self.streaming_pdf = MemoryEfficientPDFParser()
        self.streaming_xml = MemoryEfficientXMLParser()
    
    def parse(self, file_path: Path, project_id: Optional[str] = None) -> Dict[str, Any]:
        """
        –£–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ - –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –º–µ—Ç–æ–¥–∞
        
        Args:
            file_path: Path to file
            
        Returns:
            Parsed data
        """
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞
        suffix = file_path.suffix.lower()
        
        if suffix in ['.xlsx', '.xls']:
            return self.parse_excel(file_path, project_id=project_id)
        elif suffix == '.pdf':
            return self.parse_pdf(file_path, project_id=project_id)
        elif suffix == '.xml':
            return self.parse_xml(file_path, project_id=project_id)
        else:
            raise ValueError(f"Unsupported file format: {suffix}")
    
    def parse_excel(self, file_path: Path, project_id: Optional[str] = None) -> Dict[str, Any]:
        """
        Parse Excel —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞
        
        Args:
            file_path: Path to Excel file
            
        Returns:
            Parsed data
        """
        size_mb = file_path.stat().st_size / (1024 * 1024)
        
        project_prefix = f"[project={project_id}] " if project_id else ""

        logger.info(
            "%süìä Excel file: %s (%.1fMB)",
            project_prefix,
            file_path.name,
            size_mb,
        )
        
        if size_mb < SIZE_THRESHOLD_MB:
            # –ù–µ–±–æ–ª—å—à–æ–π —Ñ–∞–π–ª ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            logger.info("%s‚úÖ Using standard pandas parser", project_prefix)
            try:
                return self.excel_parser.parse(file_path, project_id=project_id)
            except Exception as e:
                logger.warning("%sStandard parser failed: %s", project_prefix, e)
                logger.info("%s‚ö†Ô∏è Falling back to streaming parser", project_prefix)
                return self.streaming_excel.parse(file_path)
        else:
            # –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª ‚Üí streaming –ø–∞—Ä—Å–µ—Ä
            logger.info("%s‚úÖ Using streaming parser (large file)", project_prefix)
            return self.streaming_excel.parse(file_path)
    
    def parse_pdf(self, file_path: Path, project_id: Optional[str] = None) -> Dict[str, Any]:
        """
        Parse PDF —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞
        
        Args:
            file_path: Path to PDF file
            
        Returns:
            Parsed data
        """
        size_mb = file_path.stat().st_size / (1024 * 1024)
        
        project_prefix = f"[project={project_id}] " if project_id else ""

        logger.info(
            "%süìÑ PDF file: %s (%.1fMB)",
            project_prefix,
            file_path.name,
            size_mb,
        )
        
        if size_mb < SIZE_THRESHOLD_MB:
            # –ù–µ–±–æ–ª—å—à–æ–π —Ñ–∞–π–ª ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
            logger.info("%s‚úÖ Using standard pdfplumber parser", project_prefix)
            try:
                return self.pdf_parser.parse(file_path)
            except Exception as e:
                logger.warning("%sStandard parser failed: %s", project_prefix, e)
                logger.info("%s‚ö†Ô∏è Falling back to streaming parser", project_prefix)
                return self.streaming_pdf.parse(file_path, max_pages=100)
        else:
            # –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª ‚Üí streaming –ø–∞—Ä—Å–µ—Ä
            logger.info("%s‚úÖ Using streaming parser (large file)", project_prefix)
            return self.streaming_pdf.parse(file_path, max_pages=100)
    
    def parse_xml(self, file_path: Path, project_id: Optional[str] = None) -> Dict[str, Any]:
        """
        Parse XML —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞
        
        Args:
            file_path: Path to XML file
            
        Returns:
            Parsed data
        """
        size_mb = file_path.stat().st_size / (1024 * 1024)
        
        project_prefix = f"[project={project_id}] " if project_id else ""

        logger.info(
            "%süìù XML file: %s (%.1fMB)",
            project_prefix,
            file_path.name,
            size_mb,
        )
        
        if size_mb < SIZE_THRESHOLD_MB:
            # –ù–µ–±–æ–ª—å—à–æ–π —Ñ–∞–π–ª ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π KROS –ø–∞—Ä—Å–µ—Ä
            logger.info("%s‚úÖ Using standard KROS parser", project_prefix)
            try:
                return self.kros_parser.parse(file_path, project_id=project_id)
            except Exception as e:
                logger.warning("%sStandard parser failed: %s", project_prefix, e)
                logger.info("%s‚ö†Ô∏è Falling back to streaming parser", project_prefix)
                return self.streaming_xml.parse(file_path)
        else:
            # –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª ‚Üí streaming –ø–∞—Ä—Å–µ—Ä
            logger.info("%s‚úÖ Using streaming parser (large file)", project_prefix)
            return self.streaming_xml.parse(file_path)
    
    def get_file_info(self, file_path: Path) -> Dict[str, Any]:
        """
        Get file information without parsing
        
        Args:
            file_path: Path to file
            
        Returns:
            File info
        """
        size_bytes = file_path.stat().st_size
        size_mb = size_bytes / (1024 * 1024)
        
        will_use_streaming = size_mb >= SIZE_THRESHOLD_MB
        
        return {
            "filename": file_path.name,
            "format": file_path.suffix.lower(),
            "size_bytes": size_bytes,
            "size_mb": round(size_mb, 2),
            "will_use_streaming": will_use_streaming,
            "recommended_parser": "streaming" if will_use_streaming else "standard"
        }
