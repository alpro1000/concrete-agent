"""
Knowledge Base Loader
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–æ–∫ B1-B8
–ë–ï–ó –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–µ–Ω—è—Ç—å –∫–æ–¥ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
"""

import json
import csv
from pathlib import Path
from typing import Dict, Any, List
import pandas as pd
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class KnowledgeBaseLoader:
    """
    –£–º–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
    - –°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –ø–∞–ø–∫–∏ B1-B8
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤ (JSON, CSV, XLSX, PDF)
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç—å
    - –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    """
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    CATEGORIES = [
        "B1_kros_urs_codes",
        "B2_csn_standards",
        "B3_current_prices",
        "B4_production_benchmarks",
        "B5_tech_cards",
        "B6_research_papers",
        "B7_regulations",
        "B8_company_specific"
    ]
    
    def __init__(self, kb_dir: Path):
        """
        Args:
            kb_dir: –ü—É—Ç—å –∫ app/knowledge_base/
        """
        self.kb_dir = kb_dir
        self.data = {}
        self.metadata = {}
        self.loaded_at = None
        
    def load_all(self) -> Dict[str, Any]:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∑–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–Æ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        
        Returns:
            {
                "B1_kros_urs_codes": {...},
                "B2_csn_standards": {...},
                ...
            }
        """
        logger.info("üîÑ Loading Knowledge Base...")
        start_time = datetime.now()
        
        for category in self.CATEGORIES:
            category_path = self.kb_dir / category
            
            if not category_path.exists():
                logger.warning(f"‚ö†Ô∏è  Category not found: {category}")
                continue
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            self.data[category] = self._load_category(category_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º metadata
            metadata_path = category_path / "metadata.json"
            if metadata_path.exists():
                with open(metadata_path, 'r', encoding='utf-8') as f:
                    self.metadata[category] = json.load(f)
            
            logger.info(f"‚úÖ Loaded: {category}")
        
        self.loaded_at = datetime.now()
        elapsed = (self.loaded_at - start_time).total_seconds()
        
        logger.info(f"‚ú® Knowledge Base loaded in {elapsed:.2f}s")
        self._print_summary()
        
        return self.data
    
    def _load_category(self, path: Path) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
        - JSON
        - CSV
        - XLSX
        - PDF (—Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è)
        """
        data = {}
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        for file_path in path.rglob("*"):
            if not file_path.is_file():
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º metadata.json (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
            if file_path.name == "metadata.json":
                continue
            
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º
                file_data = self._load_file(file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –ø—É—Ç–µ–º –∫–∞–∫ –∫–ª—é—á–æ–º
                relative_path = str(file_path.relative_to(path))
                data[relative_path] = file_data
                
            except Exception as e:
                logger.error(f"‚ùå Failed to load {file_path}: {e}")
        
        return data
    
    def _load_file(self, file_path: Path) -> Any:
        """
        –£–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """
        suffix = file_path.suffix.lower()
        
        if suffix == ".json":
            return self._load_json(file_path)
        
        elif suffix == ".csv":
            return self._load_csv(file_path)
        
        elif suffix in [".xlsx", ".xls"]:
            return self._load_excel(file_path)
        
        elif suffix == ".pdf":
            return self._load_pdf(file_path)
        
        elif suffix in [".txt", ".md"]:
            return self._load_text(file_path)
        
        else:
            logger.warning(f"‚ö†Ô∏è  Unsupported format: {file_path}")
            return None
    
    def _load_json(self, path: Path) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ JSON"""
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def _load_csv(self, path: Path) -> List[Dict]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ CSV –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        
        –ü—Ä–∏–º–µ—Ä KROS —ç–∫—Å–ø–æ—Ä—Ç–∞:
        code,name,unit,base_price
        121-01-001,"Beton C20/25",m¬≥,2450
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        [
            {"code": "121-01-001", "name": "Beton C20/25", ...},
            ...
        ]
        """
        data = []
        with open(path, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏–∑ –∫–ª—é—á–µ–π
                cleaned_row = {k.strip(): v for k, v in row.items()}
                data.append(cleaned_row)
        return data
    
    def _load_excel(self, path: Path) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ Excel (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Å—Ç–æ–≤)
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        {
            "Sheet1": [...],
            "Sheet2": [...],
            ...
        }
        """
        excel_file = pd.ExcelFile(path)
        data = {}
        
        for sheet_name in excel_file.sheet_names:
            df = pd.read_excel(path, sheet_name=sheet_name)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            data[sheet_name] = df.to_dict('records')
        
        return data
    
    def _load_pdf(self, path: Path) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ PDF - –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç
        
        –î–ª—è ƒåSN —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç –∏ —Ç.–¥.
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º PyPDF2 –∏–ª–∏ pdfplumber
            import pdfplumber
            
            text = ""
            with pdfplumber.open(path) as pdf:
                for page in pdf.pages:
                    text += page.extract_text() or ""
            
            return {
                "filename": path.name,
                "pages": len(pdf.pages) if 'pdf' in locals() else 0,
                "text": text,
                "path": str(path)
            }
        
        except ImportError:
            logger.warning("‚ö†Ô∏è  pdfplumber not installed, skipping PDF")
            return {
                "filename": path.name,
                "text": None,
                "path": str(path),
                "note": "Install pdfplumber to extract text"
            }
    
    def _load_text(self, path: Path) -> str:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        with open(path, 'r', encoding='utf-8') as f:
            return f.read()
    
    def _print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π KB"""
        logger.info("\n" + "="*60)
        logger.info("üìä Knowledge Base Summary")
        logger.info("="*60)
        
        for category in self.CATEGORIES:
            if category in self.data:
                files_count = len(self.data[category])
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ metadata
                meta = self.metadata.get(category, {})
                last_updated = meta.get("last_updated", "Unknown")
                version = meta.get("version", "N/A")
                
                logger.info(
                    f"{category:30} | {files_count:3} files | "
                    f"v{version} | Updated: {last_updated}"
                )
        
        logger.info("="*60 + "\n")
    
    # === –ú–ï–¢–û–î–´ –ü–û–ò–°–ö–ê (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö) ===
    
    def get_kros_codes(self) -> List[Dict]:
        """
        –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–¥–∞–º KROS
        
        Returns:
            [
                {"code": "121-01-001", "name": "Beton C20/25", ...},
                ...
            ]
        """
        b1_data = self.data.get("B1_kros_urs_codes", {})
        
        # –ò—â–µ–º —Ñ–∞–π–ª —Å KROS –∫–æ–¥–∞–º–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å CSV –∏–ª–∏ JSON)
        for filename, data in b1_data.items():
            if "kros" in filename.lower() and isinstance(data, list):
                return data
        
        return []
    
    def get_current_prices(self, material_type: str = None) -> Dict:
        """
        –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Ü–µ–Ω–∞–º
        
        Args:
            material_type: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä (beton, armatura, ...)
        
        Returns:
            {"beton": {...}, "armatura": {...}, ...}
        """
        b3_data = self.data.get("B3_current_prices", {})
        
        # –ò—â–µ–º —Ñ–∞–π–ª —Å —Ü–µ–Ω–∞–º–∏ (–æ–±—ã—á–Ω–æ market_prices_*.json)
        for filename, data in b3_data.items():
            if "market_prices" in filename.lower():
                materials = data.get("materials", {})
                
                if material_type:
                    return materials.get(material_type, {})
                
                return materials
        
        return {}
    
    def get_productivity_rates(self, work_type: str = None) -> Dict:
        """
        –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        Args:
            work_type: concrete_work, masonry_work, etc.
        
        Returns:
            {"concrete_work": {...}, ...}
        """
        b4_data = self.data.get("B4_production_benchmarks", {})
        
        for filename, data in b4_data.items():
            if "productivity_rates" in filename.lower():
                if work_type:
                    return data.get(work_type, {})
                return data
        
        return {}
    
    def search_standards(self, query: str) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –ø–æ ƒåSN —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
        
        Args:
            query: "beton", "zdivo", "geometry", etc.
        
        Returns:
            [
                {"filename": "CSN_EN_1992.pdf", "text": "...", ...},
                ...
            ]
        """
        b2_data = self.data.get("B2_csn_standards", {})
        results = []
        
        query_lower = query.lower()
        
        for filename, data in b2_data.items():
            if isinstance(data, dict) and "text" in data:
                # –ü–æ–∏—Å–∫ –≤ —Ç–µ–∫—Å—Ç–µ PDF
                if query_lower in data.get("text", "").lower():
                    results.append({
                        "filename": filename,
                        "excerpt": self._extract_excerpt(
                            data["text"], 
                            query_lower
                        ),
                        "path": data.get("path")
                    })
        
        return results
    
    def _extract_excerpt(self, text: str, query: str, context: int = 200) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        index = text.lower().find(query.lower())
        if index == -1:
            return ""
        
        start = max(0, index - context)
        end = min(len(text), index + len(query) + context)
        
        excerpt = text[start:end]
        return f"...{excerpt}..."


# === –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† ===

_kb_instance = None

def get_knowledge_base() -> KnowledgeBaseLoader:
    """
    Singleton: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä KB
    
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    global _kb_instance
    
    if _kb_instance is None:
        from app.core.config import settings
        _kb_instance = KnowledgeBaseLoader(settings.KB_DIR)
        _kb_instance.load_all()
    
    return _kb_instance


# === –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –í –ö–û–î–ï ===

def example_usage():
    """–ü—Ä–∏–º–µ—Ä—ã –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö"""
    
    # 1. –ü–æ–ª—É—á–∏—Ç—å KB
    kb = get_knowledge_base()
    
    # 2. –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥—ã KROS
    kros_codes = kb.get_kros_codes()
    print(f"Loaded {len(kros_codes)} KROS codes")
    
    # 3. –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ –±–µ—Ç–æ–Ω
    concrete_prices = kb.get_current_prices("beton")
    print(f"Beton C20/25: {concrete_prices.get('C20/25', {}).get('price_per_m3')} Kƒç")
    
    # 4. –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    concrete_rates = kb.get_productivity_rates("concrete_work")
    print(f"Formwork rate: {concrete_rates.get('formwork', {}).get('simple', {})}")
    
    # 5. –ü–æ–∏—Å–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö
    standards = kb.search_standards("beton")
    print(f"Found {len(standards)} standards mentioning 'beton'")


if __name__ == "__main__":
    example_usage()

