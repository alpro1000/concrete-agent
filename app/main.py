# app/main.py
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import logging
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ PYTHONPATH
sys.path.append('/app')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] [%(levelname)s] %(name)s: %(message)s"
)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ Construction Analysis API —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs("uploads", exist_ok=True)
    os.makedirs("logs", exist_ok=True)
    os.makedirs("outputs", exist_ok=True)
    os.makedirs("storage", exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        import sys
        sys.path.append('/home/runner/work/concrete-agent/concrete-agent')
        from app.database import init_database
        await init_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        # Continue without database for now
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    deps = check_dependencies()
    logger.info(f"üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {deps}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    setup_routers()
    
    logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    
    yield
    
    # Shutdown
    logger.info("üõë Construction Analysis API –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è")
    try:
        import sys
        sys.path.append('/home/runner/work/concrete-agent/concrete-agent')
        from app.database import close_database
        await close_database()
        logger.info("üîå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="Construction Analysis API",
    description="–ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ç–æ–Ω–∞, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –≤–µ—Ä—Å–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ===
def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    dependencies = {
        "anthropic": False,
        "pdfplumber": False,
        "docx": False,
        "openpyxl": False,
        "sqlalchemy": False,
        "asyncpg": False
    }
    
    try:
        import anthropic
        dependencies["anthropic"] = True
    except ImportError:
        logger.warning("‚ö†Ô∏è anthropic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        import pdfplumber
        dependencies["pdfplumber"] = True
    except ImportError:
        logger.warning("‚ö†Ô∏è pdfplumber –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        from docx import Document
        dependencies["docx"] = True
    except ImportError:
        logger.warning("‚ö†Ô∏è python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        import openpyxl
        dependencies["openpyxl"] = True
    except ImportError:
        logger.warning("‚ö†Ô∏è openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    try:
        import sqlalchemy
        dependencies["sqlalchemy"] = True
    except ImportError:
        logger.warning("‚ö†Ô∏è sqlalchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    try:
        import asyncpg
        dependencies["asyncpg"] = True
    except ImportError:
        logger.warning("‚ö†Ô∏è asyncpg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    return dependencies

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤ ===
def setup_routers():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤"""
    try:
        import sys
        sys.path.append('/home/runner/work/concrete-agent/concrete-agent')
        
        # –ù–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from app.routers import (
            projects_router,
            documents_router,
            extractions_router,
            corrections_router,
            compare_router,
            upload_router,
            project_router
        )
        
        app.include_router(projects_router, prefix="/api", tags=["Projects"])
        app.include_router(documents_router, prefix="/api", tags=["Documents"])
        app.include_router(extractions_router, prefix="/api", tags=["Extractions"])
        app.include_router(corrections_router, prefix="/api", tags=["Corrections"])
        app.include_router(compare_router, prefix="/api", tags=["Compare"])
        app.include_router(upload_router, prefix="/api", tags=["Upload"])
        app.include_router(project_router, prefix="/analyze", tags=["Project Analysis"])
        
        logger.info("‚úÖ –ù–æ–≤—ã–µ —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        setup_legacy_routers()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤: {e}")
        setup_legacy_routers()

def setup_legacy_routers():
    """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    # Use /legacy prefix to avoid conflicts with new API
    router_configs = [
        ("routers.analyze_concrete", "router", "/legacy/analyze", ["Legacy Concrete"]),
        ("routers.analyze_materials", "router", "/legacy/analyze", ["Legacy Materials"]),
        ("routers.analyze_volume", "router", "/legacy/analyze", ["Legacy Volume"]),
        ("routers.analyze_tov", "router", "/legacy/analyze", ["Legacy TOV"]),
        ("routers.version_diff", "router", "/legacy/compare", ["Legacy Diff"]),
        ("routers.upload", "router", "/legacy/upload", ["Legacy Upload"]),
        ("routers.tzd_router", "router", "/legacy/tzd", ["Legacy TZD"]),
        # Specialized upload routers
        ("routers.upload_docs", "router", "/legacy/upload", ["Legacy Upload Docs"]),
        ("routers.upload_smeta", "router", "/legacy/upload", ["Legacy Upload Estimates"]),
        ("routers.upload_drawings", "router", "/legacy/upload", ["Legacy Upload Drawings"]),
    ]
    
    successful = 0
    for module_path, router_name, prefix, tags in router_configs:
        try:
            module = __import__(module_path, fromlist=[router_name])
            router = getattr(module, router_name)
            app.include_router(router, prefix=prefix, tags=tags)
            logger.info(f"‚úÖ Legacy: —Ä–æ—É—Ç–µ—Ä {module_path} –ø–æ–¥–∫–ª—é—á–µ–Ω")
            successful += 1
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Legacy: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å {module_path}: {e}")
    
    logger.info(f"üìä Legacy —Ä–æ—É—Ç–µ—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {successful}")
    return successful

# === –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ===
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–∏—Å–µ"""
    claude_status = "enabled" if os.getenv("ANTHROPIC_API_KEY") else "disabled"
    
    return {
        "service": "Construction Analysis API",
        "version": "2.0.0",
        "status": "running",
        "features": {
            "database_storage": True,
            "multi_file_upload": True,
            "zip_support": True,
            "self_learning": True,
            "backward_compatibility": True
        },
        "claude_status": claude_status,
        "environment": os.getenv("ENVIRONMENT", "development"),
        "endpoints": {
            "docs": "/docs",
            "health": "/health",
            # New API endpoints (database-driven)
            "projects": "/api/projects", 
            "upload": "/api/projects/{id}/upload",
            "compare": "/api/projects/{id}/compare",
            "project_analysis": "/analyze/project",
            # Legacy API endpoints (file-based, for backward compatibility)
            "legacy_concrete": "/legacy/analyze/concrete",
            "legacy_materials": "/legacy/analyze/materials", 
            "legacy_volume": "/legacy/analyze/volume",
            "legacy_tov": "/legacy/analyze/tov",
            "legacy_compare": "/legacy/compare/docs",
            "legacy_upload": "/legacy/upload/files"
        },
        "dependencies": check_dependencies()
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        import sys
        sys.path.append('/home/runner/work/concrete-agent/concrete-agent')
        from app.database import AsyncSessionLocal
        from sqlalchemy import text
        async with AsyncSessionLocal() as session:
            await session.execute(text("SELECT 1"))
        
        db_status = "connected"
    except Exception as e:
        db_status = f"error: {str(e)}"
    
    return {
        "status": "healthy",
        "timestamp": "2025-09-28T12:00:00Z",
        "database": db_status,
        "uptime": "running"
    }

@app.get("/status")
async def detailed_status():
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        deps = check_dependencies()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            import sys
            sys.path.append('/home/runner/work/concrete-agent/concrete-agent')
            from app.database import AsyncSessionLocal
            from sqlalchemy import text
            async with AsyncSessionLocal() as session:
                await session.execute(text("SELECT 1"))
            db_status = "operational"
        except Exception as e:
            db_status = f"error: {str(e)}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –∫–ª—é—á–µ–π
        api_config = {
            "anthropic_api_key": {
                "configured": bool(os.getenv("ANTHROPIC_API_KEY")),
                "status": "‚úÖ Ready" if os.getenv("ANTHROPIC_API_KEY") else "‚ùå Missing - Claude analysis will be unavailable"
            },
            "openai_api_key": {
                "configured": bool(os.getenv("OPENAI_API_KEY")),
                "status": "‚úÖ Ready" if os.getenv("OPENAI_API_KEY") else "‚ùå Missing - OpenAI analysis will be unavailable"
            }
        }
        
        return {
            "api_status": "operational",
            "database_status": db_status,
            "dependencies": deps,
            "api_configuration": api_config,
            "claude_available": bool(os.getenv("ANTHROPIC_API_KEY")),
            "openai_available": bool(os.getenv("OPENAI_API_KEY")),
            "directories": {
                "uploads": os.path.exists("uploads"),
                "logs": os.path.exists("logs"),
                "outputs": os.path.exists("outputs"),
                "storage": os.path.exists("storage")
            },
            "python_path": sys.path[:3],  # –ü–µ—Ä–≤—ã–µ 3 –ø—É—Ç–∏
            "environment_vars": {
                "USE_CLAUDE": os.getenv("USE_CLAUDE", "not_set"),
                "MAX_FILE_SIZE": os.getenv("MAX_FILE_SIZE", "not_set"),
                "PORT": os.getenv("PORT", "not_set"),
                "DATABASE_URL": "configured" if os.getenv("DATABASE_URL") else "default"
            },
            "setup_instructions": {
                "missing_apis": [
                    key for key, config in api_config.items() 
                    if not config["configured"]
                ],
                "message": "To enable full functionality, configure missing API keys in environment variables"
            }
        }
    except Exception as e:
        return {
            "api_status": "error",
            "error": str(e)
        }

# === –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç ===
@app.post("/test/echo")
async def test_echo(data: dict = None):
    """–ü—Ä–æ—Å—Ç–æ–π —ç—Ö–æ-—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return {
        "received": data or {},
        "message": "Echo test successful",
        "timestamp": "2025-09-28T12:00:00Z"
    }

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ ===
@app.exception_handler(500)
async def internal_server_error_handler(request, exc):
    logger.error(f"500 Internal Server Error: {exc}")
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "detail": str(exc) if os.getenv("DEBUG") == "true" else "Contact support"
        }
    )

@app.exception_handler(404)
async def not_found_handler(request, exc):
    return JSONResponse(
        status_code=404,
        content={
            "error": "Not Found",
            "message": f"–≠–Ω–¥–ø–æ–∏–Ω—Ç {request.url.path} –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "available_endpoints": [
                "/", "/docs", "/health", "/status",
                "/api/projects", "/api/projects/{id}/upload",
                "/upload/docs", "/upload/smeta", "/upload/drawings",
                "/analyze/concrete", "/analyze/materials",
                "/compare/docs", "/compare/smeta", "/upload/files"
            ]
        }
    )

if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", "8000"))
    uvicorn.run(app, host="0.0.0.0", port=port, log_level="info")
