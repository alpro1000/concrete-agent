"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—à—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏
utils/czech_preprocessor.py
"""

import re
import logging
from typing import Dict, List

logger = logging.getLogger(__name__)

class CzechTextPreprocessor:
    """–ü—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π —á–µ—à—Å–∫–æ–π –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏ –∏–∑ PDF"""
    
    def __init__(self):
        # –ö–∞—Ä—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö PDF)
        self.diacritic_map = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            'ƒì': 'ƒç', 'ƒí': 'ƒå',  # —á–∞—Å—Ç—å -> ƒç√°st
            '∆é': '≈ô', 'ƒõ': 'ƒõ',  # d≈ô√≠k -> d≈ô√≠k  
            'ƒ¢': '≈æ', '≈µ': '≈Ø',  # v√Ω≈ætu≈æ -> v√Ωztu≈æ, pr≈Ømƒõr -> pr≈Ømƒõr
            '∆Ω': '≈Ø', '≈¢': '√≠',  # pr≈Ømƒõr -> pr≈Ømƒõr, t≈ô√≠dy -> t≈ô√≠dy
            '≈ü': '√≠', '≈£': '√≠',   # t≈ô√≠dy -> t≈ô√≠dy
            
            # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤
            '∆é≈≤': '≈ô≈Ø',   # pr≈Ømƒõr
            '≈µƒ¢': '≈Ø≈æ',   # v√Ωztu≈æ  
            '∆éƒ¢': 'r≈æ',   # r≈Øzn√©
            '≈ûƒ¢': '√≠≈æ',   # r≈Øzn√©
            '∆é≈¢': '≈ô√≠',   # t≈ô√≠dy
            'p∆é': 'p≈ô',   # nap≈ô. p≈ô√≠ƒçn√Ω
            'smƒ¢': 'smƒõ',  # smƒõr
            'ƒìtƒ¢': 'ƒçt≈æ',  # –∫–æ–Ω—Å—Ç—Ä—É–∫—Üe
            '∆é≈üƒ¢': '≈ô√≠≈æ', # nap≈ô√≠ƒç
            '∆é≈¢': '≈ô√≠',   # t≈ô√≠dy
            '∆é≈≤': '≈ô≈Ø',   # pr≈Ømƒõr
            '≈¢ƒª': '√≠l',   # profil
            'ƒªƒ¢': 'l≈æ',   # dla≈æba
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
            'opƒ¢rn': 'opƒõrn',        # opƒõrn√°
            'beton√°∆ésk': 'beton√°≈ôsk',  # beton√°≈ôsk√°
            'vodotƒ¢sn': 'vodotƒõsn',    # vodotƒõsn√°
            '≈°tƒ¢rkodrt': '≈°tƒõrkodrt',  # ≈°tƒõrkodrt
            'dren√°≈æn': 'dren√°≈æn',      # dren√°≈æn√≠
            'z√°kladov': 'z√°kladov',     # z√°kladov√°
            '≈æelezobeton': '≈æelezobeton', # ≈æelezobeton
            'vyplnƒ¢n': 'vyplnƒõn',      # vyplnƒõna
            'proveden': 'proveden',     # provedena
            'ulo≈æen': 'ulo≈æen',        # ulo≈æena
            'upraven': 'upraven',      # upravena
        }
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —á–µ—à—Å–∫–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        self.construction_terms = {
            'd≈ô√≠k': 'shaft/stem of structure',
            'z√°kladov√° ƒç√°st': 'foundation part', 
            'podkladn√≠ beton': 'substrate concrete',
            '≈ô√≠ms': 'cornice/ledge',
            'opƒõrn√° zeƒè': 'retaining wall',
            'vrtan√© piloty': 'drilled piles',
            'beton√°≈ôsk√° ocel': 'reinforcing steel',
            'dilataƒçn√≠ sp√°ra': 'expansion joint',
            'dren√°≈æn√≠ z√°syp': 'drainage backfill',
            '≈°tƒõrkodrt': 'crushed stone',
            'vodotƒõsn√° izolace': 'waterproof insulation',
            'l√≠cov√° strana': 'face side',
            '≈æelezobetonov√°': 'reinforced concrete',
            'nosn√° konstrukce': 'load-bearing structure',
            'v√Ωztu≈æ': 'reinforcement',
            'dla≈æba': 'paving/tiles',
            'pil√≠≈ô': 'pier/column',
            'mostovka': 'bridge deck',
            'vozovka': 'roadway',
            'z√°klad': 'foundation',
            'stƒõna': 'wall',
            'sloup': 'column',
            'deska': 'slab',
            'vƒõnec': 'tie beam',
            'schodi≈°tƒõ': 'stairs',
            'prefabrik√°t': 'precast element',
            'monolitick√Ω': 'monolithic',
        }

        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.element_patterns = {
            r'vrtan√©\s+piloty': 'vrtan√© piloty (drilled piles)',
            r'opƒõrn√°\s+zeƒè': 'opƒõrn√° zeƒè (retaining wall)', 
            r'z√°kladov√°\s+ƒç√°st': 'z√°kladov√° ƒç√°st (foundation part)',
            r'd≈ô√≠k\s+konstrukce': 'd≈ô√≠k konstrukce (shaft of structure)',
            r'd≈ô√≠k\s+opƒõrn√©\s+zdi': 'd≈ô√≠k opƒõrn√© zdi (shaft of retaining wall)',
            r'≈æelezobetonov√°\s+≈ô√≠msa': '≈æelezobetonov√° ≈ô√≠msa (RC cornice)',
            r'spodn√≠\s+ƒç√°st': 'spodn√≠ ƒç√°st (lower part)',
            r'horn√≠\s+ƒç√°st': 'horn√≠ ƒç√°st (upper part)',
            r'nosn√°\s+konstrukce': 'nosn√° konstrukce (load-bearing structure)',
            r'podkladn√≠\s+beton': 'podkladn√≠ beton (substrate concrete)',
            r'betonov√°\s+vrstva': 'betonov√° vrstva (concrete layer)',
        }

    def fix_czech_diacritics(self, text: str) -> str:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏
        """
        if not text:
            return text
            
        fixed_text = text
        fixes_applied = 0
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º
        sorted_fixes = sorted(self.diacritic_map.items(), key=lambda x: len(x[0]), reverse=True)
        
        for broken_char, correct_char in sorted_fixes:
            if broken_char in fixed_text:
                old_count = fixed_text.count(broken_char)
                fixed_text = fixed_text.replace(broken_char, correct_char)
                fixes_applied += old_count
                
        if fixes_applied > 0:
            logger.debug(f"üá®üáø Applied {fixes_applied} diacritic fixes")
                
        return fixed_text

    def enhance_context_window(self, text: str, match_start: int, match_end: int, 
                             window_size: int = 150) -> str:
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–æ–π
        """
        context_start = max(0, match_start - window_size)
        context_end = min(len(text), match_end + window_size)
        
        context = text[context_start:context_end]
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–∫—Ä–∏—Ç–∏–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        fixed_context = self.fix_czech_diacritics(context)
        
        return fixed_context

    def identify_construction_element_enhanced(self, context: str) -> str:
        """
        –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        """
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–∫—Ä–∏—Ç–∏–∫—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        fixed_context = self.fix_czech_diacritics(context.lower())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–æ—Ç —Å–ª–æ–∂–Ω—ã—Ö –∫ –ø—Ä–æ—Å—Ç—ã–º)
        for pattern, description in self.element_patterns.items():
            if re.search(pattern, fixed_context, re.IGNORECASE):
                return description
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤
        for term, translation in self.construction_terms.items():
            if term.lower() in fixed_context:
                return f"{term} ({translation})"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω–æ–≤ (fallback)
        if 'd≈ô√≠k' in fixed_context:
            return "d≈ô√≠k konstrukce (shaft of structure)"
        elif 'z√°kladov' in fixed_context:
            return "z√°kladov√° ƒç√°st (foundation part)"
        elif '≈ô√≠ms' in fixed_context:
            return "≈ô√≠msa (cornice)"
        elif 'pilot' in fixed_context:
            return "vrtan√© piloty (drilled piles)"
        elif 'podkladn' in fixed_context:
            return "podkladn√≠ beton (substrate concrete)"
        elif 'opƒõrn' in fixed_context:
            return "opƒõrn√° zeƒè (retaining wall)"
        elif '≈æelezobeton' in fixed_context:
            return "≈æelezobetonov√° konstrukce (RC structure)"
        elif 'v√Ωztu≈æ' in fixed_context:
            return "v√Ωztu≈æ (reinforcement)"
        elif 'izolace' in fixed_context:
            return "izolace (insulation)"
        elif 'vrstva' in fixed_context:
            return "betonov√° vrstva (concrete layer)"
        
        return "neurƒçen√Ω prvek (undefined element)"

    def preprocess_document_text(self, text: str) -> Dict[str, any]:
        """
        –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        if not text:
            return {
                'original_text': text,
                'fixed_text': text,
                'changes_count': 0,
                'original_length': 0,
                'fixed_length': 0
            }
            
        original_length = len(text)
        fixed_text = self.fix_czech_diacritics(text)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        changes_made = 0
        for broken_char in self.diacritic_map.keys():
            changes_made += text.count(broken_char)
        
        if changes_made > 0:
            logger.info(f"üîß Czech preprocessor: {changes_made} diacritic fixes applied")
        
        return {
            'original_text': text,
            'fixed_text': fixed_text,
            'changes_count': changes_made,
            'original_length': original_length,
            'fixed_length': len(fixed_text)
        }

    def extract_concrete_info_enhanced(self, text: str) -> Dict[str, any]:
        """
        –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–µ—Ç–æ–Ω–µ —Å —É—á–µ—Ç–æ–º —á–µ—à—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–∫—Ä–∏—Ç–∏–∫—É
        fixed_text = self.fix_czech_diacritics(text)
        
        concrete_info = {
            'concrete_grades': [],
            'construction_elements': [],
            'technical_specifications': [],
            'preprocessing_stats': {
                'original_length': len(text),
                'fixed_length': len(fixed_text),
                'diacritic_fixes': len([c for c in self.diacritic_map.keys() if c in text])
            }
        }
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        concrete_pattern = r'(?i)beton(?:u|em|y|ov√°|ov√©)?\s+t≈ô√≠dy?\s+((?:LC)?C\d{1,3}/\d{1,3})\s*(?:[-‚Äì]\s*([XO][CDFASM]?\d*(?:\s*,\s*[XO][CDFASM]?\d*)*))?'
        
        for match in re.finditer(concrete_pattern, fixed_text):
            grade = match.group(1).upper()
            exposure_classes = match.group(2) if match.group(2) else ""
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            start = max(0, match.start() - 200)
            end = min(len(fixed_text), match.end() + 200)
            context = fixed_text[start:end]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            element = self.identify_construction_element_enhanced(context)
            
            concrete_info['concrete_grades'].append({
                'grade': grade,
                'exposure_classes': exposure_classes,
                'construction_element': element,
                'context': context.strip()[:300]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            })
        
        return concrete_info


# Singleton instance
_czech_preprocessor = None

def get_czech_preprocessor() -> CzechTextPreprocessor:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    global _czech_preprocessor
    if _czech_preprocessor is None:
        _czech_preprocessor = CzechTextPreprocessor()
        logger.info("üá®üáø Czech text preprocessor initialized")
    return _czech_preprocessor


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def test_czech_preprocessing():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    processor = get_czech_preprocessor()
    
    test_text = """
    ∆é√≠k opƒ¢rn√© zdi bude proveden z betonu t∆é√≠dy C30/37 ‚Äì XF3, XC4, z√°kladov√° ƒì√°st z betonu C30/37.
    Spodn√≠ ƒì√°st v√Ωkopu za zd√≠ bude vyplnƒ¢na betonem t∆é√≠dy C12/15 ‚Äì X0.
    """
    
    result = processor.preprocess_document_text(test_text)
    
    print("üß™ TESTING CZECH PREPROCESSOR")
    print("=" * 40)
    print(f"Original: {test_text}")
    print(f"Fixed:    {result['fixed_text']}")
    print(f"Changes:  {result['changes_count']}")
    
    return result


if __name__ == "__main__":
    test_czech_preprocessing()
