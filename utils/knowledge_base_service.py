"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
utils/knowledge_base_service.py

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—É—é —Ç–æ—á–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–Ω–∞–Ω–∏—è–º –æ:
- –ú–∞—Ä–∫–∞—Ö –±–µ—Ç–æ–Ω–∞ –∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞—Ö
- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö 
- –°—Ç–∞–Ω–¥–∞—Ä—Ç–∞—Ö –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞—Ö
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä—è—Ö
"""

import json
import logging
from pathlib import Path
from typing import Dict, List, Any, Optional, Set
from dataclasses import dataclass, asdict
from functools import lru_cache

logger = logging.getLogger(__name__)

@dataclass
class ConcreteGrade:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞"""
    grade: str
    strength_class: str
    exposure_classes: List[str]
    typical_applications: List[str]
    density_kg_m3: Optional[float] = None
    max_w_c_ratio: Optional[float] = None
    min_cement_kg_m3: Optional[float] = None

@dataclass 
class ConstructionElement:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
    name: str
    czech_names: List[str]
    english_names: List[str]
    typical_grades: List[str]
    exposure_requirements: List[str]
    keywords: List[str]

@dataclass
class ExposureClass:
    """–ö–ª–∞—Å—Å –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è —Å—Ä–µ–¥—ã"""
    code: str
    description: str
    typical_conditions: List[str]
    required_grades: List[str]

class KnowledgeBaseService:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ç–æ–Ω–∞
    """
    
    def __init__(self, knowledge_base_path: str = "knowledge_base/complete-concrete-knowledge-base.json"):
        self.knowledge_base_path = knowledge_base_path
        self._raw_data = {}
        self._concrete_grades = {}
        self._construction_elements = {}
        self._exposure_classes = {}
        self._context_keywords = set()
        
        self._load_knowledge_base()
        self._process_data()

    def _load_knowledge_base(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        try:
            kb_path = Path(self.knowledge_base_path)
            if kb_path.exists():
                with open(kb_path, "r", encoding="utf-8") as f:
                    self._raw_data = json.load(f)
                logger.info(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.knowledge_base_path}")
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.knowledge_base_path}")
                self._create_default_knowledge_base()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            self._create_default_knowledge_base()

    def _create_default_knowledge_base(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self._raw_data = {
            "concrete_grades": {
                "C12/15": {
                    "strength_class": "C12/15",
                    "exposure_classes": ["X0", "XC1"],
                    "applications": ["–ü–æ–¥–∫–ª–∞–¥–æ—á–Ω—ã–π –±–µ—Ç–æ–Ω", "–§—É–Ω–¥–∞–º–µ–Ω—Ç—ã –≤ —Å—É—Ö–æ–π —Å—Ä–µ–¥–µ"],
                    "density": 2400,
                    "max_w_c": 0.65
                },
                "C16/20": {
                    "strength_class": "C16/20", 
                    "exposure_classes": ["X0", "XC1", "XC2"],
                    "applications": ["–°—Ç—è–∂–∫–∏", "–ù–µ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"],
                    "density": 2400,
                    "max_w_c": 0.60
                },
                "C20/25": {
                    "strength_class": "C20/25",
                    "exposure_classes": ["XC1", "XC2", "XC3"],
                    "applications": ["–°—Ç–µ–Ω—ã", "–§—É–Ω–¥–∞–º–µ–Ω—Ç—ã", "–ö–æ–ª–æ–Ω–Ω—ã"],
                    "density": 2400,
                    "max_w_c": 0.55
                },
                "C25/30": {
                    "strength_class": "C25/30",
                    "exposure_classes": ["XC1", "XC2", "XC3", "XC4", "XD1"],
                    "applications": ["–ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–§—É–Ω–¥–∞–º–µ–Ω—Ç—ã"],
                    "density": 2400,
                    "max_w_c": 0.50
                },
                "C30/37": {
                    "strength_class": "C30/37",
                    "exposure_classes": ["XC3", "XC4", "XD1", "XD2", "XF1", "XF2"],
                    "applications": ["–ú–æ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–û–ø–æ—Ä—ã", "–ö–∞—Ä–Ω–∏–∑—ã"],
                    "density": 2400,
                    "max_w_c": 0.45
                },
                "C35/45": {
                    "strength_class": "C35/45",
                    "exposure_classes": ["XD2", "XD3", "XF2", "XF3", "XF4"],
                    "applications": ["–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", "–ú–æ—Ä—Å–∫–∏–µ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è"],
                    "density": 2400,
                    "max_w_c": 0.40
                },
                "LC25/28": {
                    "strength_class": "LC25/28",
                    "exposure_classes": ["XC1", "XC2", "XC3"],
                    "applications": ["–õ–µ–≥–∫–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω—ã–π –±–µ—Ç–æ–Ω"],
                    "density": 2000,
                    "max_w_c": 0.50
                }
            },
            "construction_elements": {
                "foundation": {
                    "czech": ["z√°klad", "z√°klady", "z√°kladov√°", "fundament"],
                    "english": ["foundation", "footing", "base"],
                    "typical_grades": ["C20/25", "C25/30", "C30/37"],
                    "exposure": ["X0", "XC1", "XC2", "XA1"],
                    "keywords": ["zalo≈æen√≠", "z√°kladn√≠", "spodn√≠"]
                },
                "wall": {
                    "czech": ["stƒõna", "stƒõny", "stƒõn", "zeƒè"],
                    "english": ["wall", "partition"],
                    "typical_grades": ["C16/20", "C20/25", "C25/30"],
                    "exposure": ["XC1", "XC2", "XC3"],
                    "keywords": ["obvodov√°", "nosn√°", "dƒõl√≠c√≠"]
                },
                "column": {
                    "czech": ["sloup", "sloupy", "pil√≠≈ô", "pil√≠≈ôe"],
                    "english": ["column", "pillar", "pier"],
                    "typical_grades": ["C25/30", "C30/37", "C35/45"],
                    "exposure": ["XC2", "XC3", "XC4"],
                    "keywords": ["nosn√Ω", "svisl√°", "podpora"]
                },
                "beam": {
                    "czech": ["tr√°m", "tr√°my", "nosn√≠k"],
                    "english": ["beam", "girder"],
                    "typical_grades": ["C25/30", "C30/37"],
                    "exposure": ["XC2", "XC3", "XC4"],
                    "keywords": ["vodorovn√Ω", "nosn√Ω", "p≈ôeklady"]
                },
                "slab": {
                    "czech": ["deska", "desky", "desk"],
                    "english": ["slab", "deck", "plate"],
                    "typical_grades": ["C20/25", "C25/30", "C30/37"],
                    "exposure": ["XC1", "XC2", "XC3"],
                    "keywords": ["stropn√≠", "podlahov√°", "plo≈°n√°"]
                },
                "abutment": {
                    "czech": ["opƒõra", "opƒõry", "opƒõrn√°"],
                    "english": ["abutment", "retaining wall"],
                    "typical_grades": ["C30/37", "C35/45"],
                    "exposure": ["XC4", "XD1", "XD2", "XF2"],
                    "keywords": ["mostn√≠", "podpƒõrn√°", "opƒõrn√Ω"]
                },
                "cornice": {
                    "czech": ["≈ô√≠msa", "≈ô√≠ms", "≈ô√≠mse"],
                    "english": ["cornice", "ledge"],
                    "typical_grades": ["C30/37", "C35/45"],
                    "exposure": ["XC4", "XD3", "XF4"],
                    "keywords": ["venkovn√≠", "p≈ôesah", "ochrann√°"]
                }
            },
            "exposure_classes": {
                "XC1": {"description": "–°—É—Ö–∞—è –∏–ª–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–ª–∞–∂–Ω–∞—è —Å—Ä–µ–¥–∞", "conditions": ["–∏–Ω—Ç–µ—Ä—å–µ—Ä"]},
                "XC2": {"description": "–í–ª–∞–∂–Ω–∞—è, —Ä–µ–¥–∫–æ —Å—É—Ö–∞—è", "conditions": ["–ø–æ–¥–≤–∞–ª", "—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç"]},
                "XC3": {"description": "–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å", "conditions": ["—ç–∫—Å—Ç–µ—Ä—å–µ—Ä"]},
                "XC4": {"description": "–¶–∏–∫–ª—ã –≤–ª–∞–∂–Ω–æ—Å—Ç—å-—Å—É—Ö–æ—Å—Ç—å", "conditions": ["–¥–æ–∂–¥—å", "—Å–Ω–µ–≥"]},
                "XD1": {"description": "–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å —Å —Ö–ª–æ—Ä–∏–¥–∞–º–∏", "conditions": ["–≥–∞—Ä–∞–∂"]},
                "XD2": {"description": "–í–ª–∞–∂–Ω–∞—è —Å—Ä–µ–¥–∞ —Å —Ö–ª–æ—Ä–∏–¥–∞–º–∏", "conditions": ["–±–∞—Å—Å–µ–π–Ω"]},
                "XD3": {"description": "–¶–∏–∫–ª—ã —Å —Ö–ª–æ—Ä–∏–¥–∞–º–∏", "conditions": ["–º–æ—Å—Ç", "–¥–æ—Ä–æ–≥–∞"]},
                "XF1": {"description": "–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å —Å –∑–∞–º–æ—Ä–æ–∑–∫–∞–º–∏", "conditions": ["–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏"]},
                "XF2": {"description": "–£–º–µ—Ä–µ–Ω–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å —Å –ø—Ä–æ—Ç–∏–≤–æ–≥–æ–ª–æ–ª–µ–¥–Ω—ã–º–∏ —Å–æ–ª—è–º–∏", "conditions": ["–¥–æ—Ä–æ–≥–∏"]},
                "XF3": {"description": "–í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å —Å –∑–∞–º–æ—Ä–æ–∑–∫–∞–º–∏", "conditions": ["–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏"]},
                "XF4": {"description": "–í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å —Å —Å–æ–ª—è–º–∏ –∏ –∑–∞–º–æ—Ä–æ–∑–∫–∞–º–∏", "conditions": ["–º–æ—Ä—Å–∫–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"]}
            }
        }
        logger.info("üìö –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")

    def _process_data(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã"""
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ - –Ω–æ–≤—ã–π –∏ —Å—Ç–∞—Ä—ã–π
        concrete_grades_data = self._raw_data.get("concrete_grades", {})
        if not concrete_grades_data and "concrete_knowledge_base" in self._raw_data:
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç JSON
            kb_data = self._raw_data["concrete_knowledge_base"]
            concrete_grades_data = kb_data.get("concrete_grades", {})
            construction_elements_data = kb_data.get("construction_elements", {})
            exposure_classes_data = kb_data.get("exposure_classes", {})
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            construction_elements_data = self._raw_data.get("construction_elements", {})
            exposure_classes_data = self._raw_data.get("exposure_classes", {})
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞
        for grade_name, grade_data in concrete_grades_data.items():
            self._concrete_grades[grade_name] = ConcreteGrade(
                grade=grade_name,
                strength_class=grade_data.get("strength_class", grade_name),
                exposure_classes=grade_data.get("exposure_classes", []),
                typical_applications=grade_data.get("applications", []),
                density_kg_m3=grade_data.get("density"),
                max_w_c_ratio=grade_data.get("max_w_c"),
                min_cement_kg_m3=grade_data.get("min_cement")
            )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for element_name, element_data in construction_elements_data.items():
            self._construction_elements[element_name] = ConstructionElement(
                name=element_name,
                czech_names=element_data.get("czech", []),
                english_names=element_data.get("english", []),
                typical_grades=element_data.get("typical_grades", []),
                exposure_requirements=element_data.get("exposure", []),
                keywords=element_data.get("keywords", [])
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–±—â–∏–π –Ω–∞–±–æ—Ä
            self._context_keywords.update(element_data.get("czech", []))
            self._context_keywords.update(element_data.get("keywords", []))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
        for class_code, class_data in exposure_classes_data.items():
            self._exposure_classes[class_code] = ExposureClass(
                code=class_code,
                description=class_data.get("description", ""),
                typical_conditions=class_data.get("conditions", []),
                required_grades=[]  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
            )
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–≤—è–∑–∏ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
        for grade_name, grade in self._concrete_grades.items():
            for exp_class in grade.exposure_classes:
                if exp_class in self._exposure_classes:
                    self._exposure_classes[exp_class].required_grades.append(grade_name)

        logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self._concrete_grades)} –º–∞—Ä–æ–∫, "
                   f"{len(self._construction_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, "
                   f"{len(self._exposure_classes)} –∫–ª–∞—Å—Å–æ–≤ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è")

    @lru_cache(maxsize=100)
    def get_concrete_grade(self, grade: str) -> Optional[ConcreteGrade]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ –±–µ—Ç–æ–Ω–∞"""
        return self._concrete_grades.get(grade.upper())

    @lru_cache(maxsize=100)  
    def is_valid_concrete_grade(self, grade: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω–æ–π –º–∞—Ä–∫–æ–π –±–µ—Ç–æ–Ω–∞"""
        grade_upper = grade.upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if grade_upper in self._concrete_grades:
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        import re
        pattern = r'^(?:LC)?C\d{1,3}/\d{1,3}$'
        return bool(re.match(pattern, grade_upper))

    def get_all_concrete_grades(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞"""
        return list(self._concrete_grades.keys())

    def get_construction_element(self, element_name: str) -> Optional[ConstructionElement]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ"""
        return self._construction_elements.get(element_name.lower())

    def identify_construction_element(self, text: str) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        text_lower = text.lower()
        
        # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for element_name, element in self._construction_elements.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—à—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            for czech_name in element.czech_names:
                if czech_name.lower() in text_lower:
                    return element_name
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            for keyword in element.keywords:
                if keyword.lower() in text_lower:
                    return element_name
        
        return None

    def get_compatible_grades_for_element(self, element_name: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        element = self.get_construction_element(element_name)
        if element:
            return element.typical_grades
        return []

    def get_compatible_grades_for_exposure(self, exposure_class: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∞ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è"""
        exposure = self._exposure_classes.get(exposure_class.upper())
        if exposure:
            return exposure.required_grades
        return []

    def validate_grade_element_compatibility(self, grade: str, element_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        element = self.get_construction_element(element_name)
        if not element:
            return True  # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —Å—á–∏—Ç–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º
            
        return grade.upper() in element.typical_grades

    def get_context_keywords(self) -> Set[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        return self._context_keywords.copy()

    def search_grades_by_application(self, application: str) -> List[str]:
        """–ò—â–µ—Ç –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"""
        application_lower = application.lower()
        matching_grades = []
        
        for grade_name, grade in self._concrete_grades.items():
            for app in grade.typical_applications:
                if application_lower in app.lower():
                    matching_grades.append(grade_name)
                    break
        
        return matching_grades

    def get_grade_recommendations(self, element_name: str, 
                                exposure_class: Optional[str] = None) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞—Ä–∫–µ –±–µ—Ç–æ–Ω–∞"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
        element_grades = self.get_compatible_grades_for_element(element_name)
        recommendations.extend(element_grades)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–ª–∞—Å—Å—É –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
        if exposure_class:
            exposure_grades = self.get_compatible_grades_for_exposure(exposure_class)
            # –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            if recommendations:
                recommendations = [g for g in recommendations if g in exposure_grades]
            else:
                recommendations = exposure_grades
        
        return list(set(recommendations))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    def export_knowledge_summary(self) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        return {
            "concrete_grades": {
                "total": len(self._concrete_grades),
                "grades": list(self._concrete_grades.keys())
            },
            "construction_elements": {
                "total": len(self._construction_elements),
                "elements": list(self._construction_elements.keys())
            },
            "exposure_classes": {
                "total": len(self._exposure_classes),
                "classes": list(self._exposure_classes.keys())
            },
            "context_keywords_count": len(self._context_keywords)
        }

    def validate_analysis_result(self, concrete_grade: str, element: str, 
                               exposure_class: Optional[str] = None) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ç–∏–≤ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        validation_result = {
            "valid": True,
            "warnings": [],
            "recommendations": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞
        if not self.is_valid_concrete_grade(concrete_grade):
            validation_result["valid"] = False
            validation_result["warnings"].append(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞—Ä–∫–∞ –±–µ—Ç–æ–Ω–∞: {concrete_grade}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        if not self.validate_grade_element_compatibility(concrete_grade, element):
            validation_result["warnings"].append(
                f"–ú–∞—Ä–∫–∞ {concrete_grade} –Ω–µ —Ç–∏–ø–∏—á–Ω–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ {element}"
            )
            
            # –î–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommended = self.get_compatible_grades_for_element(element)
            if recommended:
                validation_result["recommendations"].append(
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–∞—Ä–∫–∏ –¥–ª—è {element}: {', '.join(recommended)}"
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
        if exposure_class:
            compatible_grades = self.get_compatible_grades_for_exposure(exposure_class)
            if concrete_grade not in compatible_grades:
                validation_result["warnings"].append(
                    f"–ú–∞—Ä–∫–∞ {concrete_grade} –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —É—Å–ª–æ–≤–∏–π {exposure_class}"
                )
                
                validation_result["recommendations"].append(
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–∞—Ä–∫–∏ –¥–ª—è {exposure_class}: {', '.join(compatible_grades)}"
                )
        
        return validation_result

    def save_knowledge_base(self, path: Optional[str] = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ —Ñ–∞–π–ª"""
        save_path = path or self.knowledge_base_path
        
        try:
            with open(save_path, 'w', encoding='utf-8') as f:
                json.dump(self._raw_data, f, ensure_ascii=False, indent=2)
            logger.info(f"üíæ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {save_path}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")


# Singleton instance
_knowledge_service = None

def get_knowledge_service() -> KnowledgeBaseService:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    global _knowledge_service
    if _knowledge_service is None:
        _knowledge_service = KnowledgeBaseService()
        logger.info("üìö KnowledgeBaseService initialized")
    return _knowledge_service


# ==============================
# üß™ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ==============================

def test_knowledge_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    kb = get_knowledge_service()
    
    print("üß™ TESTING KNOWLEDGE BASE SERVICE")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞
    test_grades = ["C25/30", "C30/37", "LC25/28", "INVALID"]
    for grade in test_grades:
        valid = kb.is_valid_concrete_grade(grade)
        grade_info = kb.get_concrete_grade(grade)
        print(f"Grade {grade}: Valid={valid}, Info={'Found' if grade_info else 'Not found'}")
    
    # –¢–µ—Å—Ç 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    test_texts = [
        "mostn√≠ opƒõra ze ≈æelezobetonu",
        "z√°klady pod sloupem", 
        "betonov√° deska stropn√≠",
        "≈ô√≠msa venkovn√≠ ochrann√°"
    ]
    
    print(f"\nüèóÔ∏è Element identification:")
    for text in test_texts:
        element = kb.identify_construction_element(text)
        print(f"'{text}' -> {element}")
    
    # –¢–µ—Å—Ç 3: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° Recommendations:")
    recommendations = kb.get_grade_recommendations("abutment", "XD2")
    print(f"For abutment in XD2: {recommendations}")
    
    # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è
    print(f"\n‚úÖ Validation:")
    validation = kb.validate_analysis_result("C16/20", "abutment", "XD3")
    print(f"C16/20 for abutment in XD3: Valid={validation['valid']}")
    if validation['warnings']:
        print(f"Warnings: {validation['warnings']}")
    if validation['recommendations']:
        print(f"Recommendations: {validation['recommendations']}")
    
    # –¢–µ—Å—Ç 5: –°–≤–æ–¥–∫–∞
    summary = kb.export_knowledge_summary()
    print(f"\nüìä Knowledge base summary:")
    print(f"Concrete grades: {summary['concrete_grades']['total']}")
    print(f"Construction elements: {summary['construction_elements']['total']}")
    print(f"Exposure classes: {summary['exposure_classes']['total']}")

if __name__ == "__main__":
    test_knowledge_service()