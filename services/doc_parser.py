"""
Document Parser Service
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, DOCX, TXT)
services/doc_parser.py

- PDF —á–µ—Ä–µ–∑ pdfplumber
- DOCX —á–µ—Ä–µ–∑ python-docx  
- TXT –Ω–∞–ø—Ä—è–º—É—é
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
"""

import logging
import pdfplumber
from pathlib import Path
from docx import Document as DocxDocument
from typing import Optional

logger = logging.getLogger(__name__)

class DocParser:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PDF, DOCX, TXT —Ñ–∞–π–ª—ã
    """
    
    def __init__(self):
        self.czech_encodings = ['utf-8', 'cp1250', 'iso-8859-2']
        logger.info("üìÑ DocParser –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def parse(self, file_path: str) -> str:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            
        Returns:
            –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            file_path = Path(file_path)
            
            if not file_path.exists():
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return ""
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            extension = file_path.suffix.lower()
            
            if extension == '.pdf':
                return self._parse_pdf(file_path)
            elif extension == '.docx':
                return self._parse_docx(file_path)
            elif extension in ['.txt', '.md']:
                return self._parse_text(file_path)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {extension}")
                # –ü—ã—Ç–∞–µ–º—Å—è —á–∏—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç
                return self._parse_text(file_path)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {file_path}: {e}")
            return ""
    
    def _parse_pdf(self, file_path: Path) -> str:
        """–ü–∞—Ä—Å–∏–Ω–≥ PDF —Ñ–∞–π–ª–∞"""
        try:
            with pdfplumber.open(file_path) as pdf:
                text_parts = []
                for page in pdf.pages:
                    page_text = page.extract_text()
                    if page_text:
                        text_parts.append(page_text)
                
                result = '\n'.join(text_parts)
                logger.info(f"‚úÖ PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF {file_path}: {e}")
            return ""
    
    def _parse_docx(self, file_path: Path) -> str:
        """–ü–∞—Ä—Å–∏–Ω–≥ DOCX —Ñ–∞–π–ª–∞"""
        try:
            doc = DocxDocument(file_path)
            text_parts = []
            
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():
                    text_parts.append(paragraph.text)
            
            result = '\n'.join(text_parts)
            logger.info(f"‚úÖ DOCX –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ DOCX {file_path}: {e}")
            return ""
    
    def _parse_text(self, file_path: Path) -> str:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–æ–∫"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è —á–µ—à—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
        for encoding in self.czech_encodings:
            try:
                with open(file_path, 'r', encoding=encoding) as f:
                    result = f.read()
                    logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω ({encoding}): {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return result
            except UnicodeDecodeError:
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path} —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
                continue
        
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {file_path} –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
        return ""
    
    def get_supported_extensions(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        return ['.pdf', '.docx', '.txt', '.md']
