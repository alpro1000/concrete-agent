#!/usr/bin/env python3
"""
üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Concrete Agent Service
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–µ—Ä–≤–∏—Å–∞
"""

import os
import sys
import json
import time
import logging
import requests
import tempfile
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

class ServiceDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    
    def __init__(self, server_url: str = "http://localhost:8000"):
        self.server_url = server_url
        self.project_root = Path(__file__).parent.parent.resolve()
    
    def check_server_status(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(f"{self.server_url}/health", timeout=5)
            return response.status_code == 200
        except:
            return False
    
    def demo_service_info(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ"""
        logger.info("üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–†–í–ò–°–ï")
        logger.info("=" * 40)
        
        try:
            response = requests.get(f"{self.server_url}/")
            if response.status_code == 200:
                data = response.json()
                logger.info(f"üè∑Ô∏è –°–µ—Ä–≤–∏—Å: {data.get('service', 'Unknown')}")
                logger.info(f"üìä –í–µ—Ä—Å–∏—è: {data.get('version', 'Unknown')}")
                logger.info(f"üîß –°—Ç–∞—Ç—É—Å: {data.get('status', 'Unknown')}")
                
                features = data.get('features', {})
                logger.info("‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
                for feature, enabled in features.items():
                    emoji = "‚úÖ" if enabled else "‚ùå"
                    logger.info(f"   {emoji} {feature}")
                
                endpoints = data.get('endpoints', {})
                logger.info("üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
                for name, path in endpoints.items():
                    logger.info(f"   ‚Ä¢ {name}: {path}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    def demo_status_check(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        logger.info("\\nüè• –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –°–ò–°–¢–ï–ú–´")
        logger.info("=" * 40)
        
        try:
            response = requests.get(f"{self.server_url}/status")
            if response.status_code == 200:
                data = response.json()
                
                logger.info(f"üöÄ API —Å—Ç–∞—Ç—É—Å: {data.get('api_status', 'unknown')}")
                logger.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {data.get('database_status', 'unknown')}")
                
                deps = data.get('dependencies', {})
                logger.info("üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
                for dep, available in deps.items():
                    emoji = "‚úÖ" if available else "‚ùå"
                    logger.info(f"   {emoji} {dep}")
                
                api_config = data.get('api_configuration', {})
                logger.info("üîë API –∫–ª—é—á–∏:")
                for key, config in api_config.items():
                    status = config.get('status', 'unknown')
                    configured = config.get('configured', False)
                    emoji = "‚úÖ" if configured else "‚ö†Ô∏è"
                    logger.info(f"   {emoji} {key}: {status}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def demo_file_upload(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        logger.info("\\nüì§ –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í")
        logger.info("=" * 40)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_content = '''–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ

–û–±—ä–µ–∫—Ç: –ú–Ω–æ–≥–æ—ç—Ç–∞–∂–Ω—ã–π –¥–æ–º
–ê–¥—Ä–µ—Å: –≥. –ü—Ä–∞–≥–∞, —É–ª. –ë–µ—Ç–æ–Ω–Ω–∞—è, –¥. 456

–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:

1. –§—É–Ω–¥–∞–º–µ–Ω—Ç:
   - –ë–µ—Ç–æ–Ω –ú400 (–∫–ª–∞—Å—Å B30)
   - –û–±—ä–µ–º: 150 –º¬≥

2. –°—Ç–µ–Ω—ã:
   - –ë–µ—Ç–æ–Ω –ú350 (–∫–ª–∞—Å—Å B25)
   - –û–±—ä–µ–º: 300 –º¬≥

3. –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏—è:
   - –ë–µ—Ç–æ–Ω –∫–ª–∞—Å—Å–∞ B22.5
   - –û–±—ä–µ–º: 180 –º¬≥

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:
- –ê—Ä–º–∞—Ç—É—Ä–∞ A500C - 15 —Ç–æ–Ω–Ω
- –ö–∏—Ä–ø–∏—á –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π - 50 —Ç—ã—Å—è—á —à—Ç—É–∫
'''
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(test_content)
            temp_file = f.name
        
        try:
            with open(temp_file, 'rb') as f:
                files = {'files': ('demo_document.txt', f, 'text/plain')}
                response = requests.post(f"{self.server_url}/legacy/upload/files", files=files)
                
                if response.status_code == 200:
                    data = response.json()
                    logger.info("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
                    
                    uploaded = data.get('uploaded', [])
                    for file_info in uploaded:
                        logger.info(f"   üìÑ {file_info.get('filename')}")
                        logger.info(f"   üìÇ {file_info.get('path')}")
                    
                    return uploaded
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
                    logger.error(f"   {response.text}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file):
                os.unlink(temp_file)
        
        return []
    
    def demo_concrete_agent(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ç–æ–Ω–∞"""
        logger.info("\\nüß± –ê–ù–ê–õ–ò–ó –ë–ï–¢–û–ù–ê –° –ü–û–ú–û–©–¨–Æ –ê–ì–ï–ù–¢–ê")
        logger.info("=" * 40)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        test_content = '''–ü—Ä–æ–µ–∫—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞

–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–µ—Ç–æ–Ω—É:

–§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω–∞—è –ø–ª–∏—Ç–∞:
- –ú–∞—Ä–∫–∞ –±–µ—Ç–æ–Ω–∞ –ú450 (–∫–ª–∞—Å—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ B35)
- –í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å W8
- –û–±—ä–µ–º –∑–∞–ª–∏–≤–∫–∏: 85 –º¬≥

–ö–æ–ª–æ–Ω–Ω—ã –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–∂–∞:
- –ë–µ—Ç–æ–Ω –∫–ª–∞—Å—Å–∞ B40
- –û–±—ä–µ–º: 45 –º¬≥

–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏—è:
- –ú–∞—Ä–∫–∞ –ú350, –∫–ª–∞—Å—Å B25
- –û–±—â–∏–π –æ–±—ä–µ–º: 220 –º¬≥

–õ–µ—Å—Ç–Ω–∏—á–Ω—ã–µ –º–∞—Ä—à–∏:
- –ë–µ—Ç–æ–Ω –ú400
- –û–±—ä–µ–º: 30 –º¬≥
'''
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
            f.write(test_content)
            temp_file = f.name
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
            sys.path.insert(0, str(self.project_root))
            from agents.concrete_agent.agent import ConcreteGradeExtractor
            
            agent = ConcreteGradeExtractor()
            result = agent.analyze_document(temp_file)
            
            if result.get('success'):
                logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –±–µ—Ç–æ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"üîç –ê–≥–µ–Ω—Ç: {result.get('agent_name')} v{result.get('agent_version')}")
                logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–æ–∫: {result.get('total_grades_found')}")
                
                summary = result.get('summary', {})
                logger.info(f"üìà –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–æ–∫: {summary.get('unique_grades')}")
                logger.info(f"üìê –û–±—â–∏–π –æ–±—ä–µ–º: {summary.get('total_volume')} –º¬≥")
                
                logger.info("\\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                for i, grade in enumerate(result.get('concrete_grades', []), 1):
                    logger.info(f"   {i}. –ú–∞—Ä–∫–∞: {grade.get('grade')}")
                    if grade.get('strength_class'):
                        logger.info(f"      –ö–ª–∞—Å—Å: {grade.get('strength_class')}")
                    if grade.get('volume_m3'):
                        logger.info(f"      –û–±—ä–µ–º: {grade.get('volume_m3')} –º¬≥")
                    if grade.get('locations'):
                        logger.info(f"      –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: {', '.join(grade.get('locations'))}")
                    logger.info(f"      –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {grade.get('confidence')*100:.0f}%")
                    
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result.get('error')}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file):
                os.unlink(temp_file)
    
    def demo_diagnostics(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        logger.info("\\nü©∫ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
        logger.info("=" * 40)
        
        try:
            import subprocess
            result = subprocess.run([
                sys.executable, 
                str(self.project_root / "scripts" / "diagnose_service.py"),
                "--server-url", self.server_url
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                logger.info("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                lines = result.stdout.strip().split('\\n')
                summary_start = -1
                for i, line in enumerate(lines):
                    if "–°–í–û–î–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò" in line:
                        summary_start = i
                        break
                
                if summary_start >= 0:
                    logger.info("\\nüìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:")
                    for line in lines[summary_start:]:
                        if line.strip() and not line.startswith('['):
                            logger.info(f"   {line}")
            else:
                logger.warning("‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã")
                logger.info("üí° –î–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/diagnose_service.py")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    def run_full_demo(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        logger.info("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø CONCRETE AGENT SERVICE")
        logger.info("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        if not self.check_server_status():
            logger.error("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            logger.info("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python scripts/start_service.py")
            return False
        
        logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é...")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        self.demo_service_info()
        self.demo_status_check()
        self.demo_file_upload()
        self.demo_concrete_agent()
        self.demo_diagnostics()
        
        logger.info("\\n" + "=" * 60)
        logger.info("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        logger.info("=" * 60)
        logger.info("üí° –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:")
        logger.info("   ‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:     python scripts/diagnose_service.py")
        logger.info("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞:       python scripts/setup_modules.py")
        logger.info("   ‚Ä¢ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞:  python scripts/start_service.py")
        logger.info("   ‚Ä¢ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        logger.info("=" * 60)
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Concrete Agent Service"
    )
    parser.add_argument(
        "--server-url", 
        type=str, 
        default="http://localhost:8000",
        help="URL —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8000)"
    )
    
    args = parser.parse_args()
    
    demo = ServiceDemo(args.server_url)
    success = demo.run_full_demo()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()