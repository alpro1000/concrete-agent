#!/usr/bin/env python3
"""
üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Concrete Agent
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
"""

import os
import sys
import time
import logging
import subprocess
import requests
from pathlib import Path
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

class ServiceLauncher:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º"""
    
    def __init__(self, project_root: str = None, port: int = 8000, host: str = "0.0.0.0"):
        self.project_root = Path(project_root).resolve() if project_root else Path(__file__).parent.parent.resolve()
        self.port = port
        self.host = host
        self.server_url = f"http://localhost:{port}"
        self.process: Optional[subprocess.Popen] = None
    
    def check_port_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        try:
            response = requests.get(self.server_url, timeout=2)
            logger.warning(f"‚ö†Ô∏è –ü–æ—Ä—Ç {self.port} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç {response.status_code})")
            return False
        except requests.exceptions.ConnectionError:
            # –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
            return True
    
    def run_pre_launch_checks(self) -> bool:
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
        logger.info("üîç –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        critical_files = ["app/main.py", "requirements.txt"]
        for file_path in critical_files:
            full_path = self.project_root / file_path
            if not full_path.exists():
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False
            logger.info(f"‚úÖ {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        try:
            import fastapi
            import uvicorn
            logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except ImportError as e:
            logger.error(f"‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
            logger.info("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r requirements.txt")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
        if not self.check_port_available():
            logger.info("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å")
            return False
        
        return True
    
    def start_server(self, reload: bool = True, log_level: str = "info") -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.run_pre_launch_checks():
            return False
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Concrete Agent –Ω–∞ {self.host}:{self.port}")
        logger.info("=" * 50)
        
        # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞
        cmd = [
            sys.executable, "-m", "uvicorn", 
            "app.main:app",
            "--host", self.host,
            "--port", str(self.port),
            "--log-level", log_level
        ]
        
        if reload:
            cmd.append("--reload")
        
        try:
            # –ó–∞–ø—É—Å–∫ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            os.chdir(self.project_root)
            
            logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            logger.info("‚è≥ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
            
            self.process = subprocess.Popen(cmd)
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            self.wait_for_server_start()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def wait_for_server_start(self, max_wait: int = 30):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        start_time = time.time()
        while time.time() - start_time < max_wait:
            try:
                response = requests.get(f"{self.server_url}/health", timeout=2)
                if response.status_code == 200:
                    logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
                    self.print_server_info()
                    return True
            except requests.exceptions.ConnectionError:
                pass
            except Exception as e:
                logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            
            time.sleep(1)
        
        logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥")
        return False
    
    def print_server_info(self):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
        logger.info("=" * 50)
        logger.info("üéâ –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù –£–°–ü–ï–®–ù–û!")
        logger.info("=" * 50)
        logger.info(f"üåê URL —Å–µ—Ä–≤–µ—Ä–∞: {self.server_url}")
        logger.info(f"üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {self.server_url}/docs")
        logger.info(f"üìñ ReDoc –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {self.server_url}/redoc")
        logger.info(f"‚ù§Ô∏è Health check: {self.server_url}/health")
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: {self.server_url}/status")
        logger.info("=" * 50)
        logger.info("üí° –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´:")
        logger.info("   ‚Ä¢ Ctrl+C - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
        logger.info("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å: curl http://localhost:8000/health")
        logger.info("   ‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: python scripts/diagnose_service.py")
        logger.info("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        try:
            response = requests.get(f"{self.server_url}/status", timeout=5)
            if response.status_code == 200:
                status_data = response.json()
                logger.info("üìà –°–¢–ê–¢–£–° –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
                
                # API –∫–ª—é—á–∏
                api_config = status_data.get("api_configuration", {})
                claude_ready = api_config.get("anthropic_api_key", {}).get("configured", False)
                openai_ready = api_config.get("openai_api_key", {}).get("configured", False)
                
                logger.info(f"   ü§ñ Claude API: {'‚úÖ Ready' if claude_ready else '‚ùå Not configured'}")
                logger.info(f"   üß† OpenAI API: {'‚úÖ Ready' if openai_ready else '‚ùå Not configured'}")
                
                # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
                db_status = status_data.get("database_status", "unknown")
                logger.info(f"   üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ Connected' if db_status == 'operational' else '‚ùå Issues'}")
                
                if not claude_ready and not openai_ready:
                    logger.info("üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏:")
                    logger.info("   export ANTHROPIC_API_KEY='your_key_here'")
                    logger.info("   export OPENAI_API_KEY='your_key_here'")
                
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.process:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
            self.process.terminate()
            self.process.wait()
            logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ Concrete Agent"
    )
    parser.add_argument(
        "--project-root", 
        type=str, 
        help="–ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞"
    )
    parser.add_argument(
        "--port", 
        type=int, 
        default=8000,
        help="–ü–æ—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8000)"
    )
    parser.add_argument(
        "--host", 
        type=str, 
        default="0.0.0.0",
        help="–•–æ—Å—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.0.0.0)"
    )
    parser.add_argument(
        "--no-reload", 
        action="store_true",
        help="–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"
    )
    parser.add_argument(
        "--log-level", 
        type=str, 
        default="info",
        choices=["critical", "error", "warning", "info", "debug"],
        help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: info)"
    )
    parser.add_argument(
        "--check-only", 
        action="store_true",
        help="–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞, –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–µ—Ä"
    )
    
    args = parser.parse_args()
    
    launcher = ServiceLauncher(args.project_root, args.port, args.host)
    
    if args.check_only:
        logger.info("üîç –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞)")
        success = launcher.run_pre_launch_checks()
        if success:
            logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        else:
            logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        sys.exit(0 if success else 1)
    
    try:
        success = launcher.start_server(
            reload=not args.no_reload,
            log_level=args.log_level
        )
        
        if success:
            # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                launcher.process.wait()
            except KeyboardInterrupt:
                logger.info("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                launcher.stop_server()
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        launcher.stop_server()
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        launcher.stop_server()
        sys.exit(1)

if __name__ == "__main__":
    main()