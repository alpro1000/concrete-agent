#!/usr/bin/env python3
"""
ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ Concrete Agent
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
"""

import os
import sys
import json
import logging
import requests
import subprocess
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

class ServiceDiagnostics:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ Concrete Agent"""
    
    def __init__(self, project_root: str = None, server_url: str = "http://localhost:8000"):
        self.project_root = Path(project_root).resolve() if project_root else Path(__file__).parent.parent.resolve()
        self.server_url = server_url
        self.results = {
            "timestamp": datetime.now().isoformat(),
            "diagnostics": {},
            "recommendations": [],
            "critical_issues": [],
            "status": "unknown"
        }
    
    def run_full_diagnostics(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("ü©∫ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò CONCRETE AGENT SERVICE")
        logger.info("=" * 60)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self.check_file_structure()
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python
        self.check_python_dependencies()
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.check_environment_variables()
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        self.check_server_startup()
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        self.check_api_availability()
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ endpoints
        self.check_endpoints_functionality()
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        self.generate_recommendations()
        
        # 8. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        self.determine_overall_status()
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.print_summary()
        
        return self.results
    
    def check_file_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
        logger.info("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
        
        critical_files = [
            "app/main.py",
            "requirements.txt",
            "scripts/setup_modules.py"
        ]
        
        important_dirs = [
            "agents", "routers", "app", "utils", "parsers"
        ]
        
        structure_status = {
            "critical_files": {},
            "important_dirs": {},
            "missing_critical": [],
            "missing_dirs": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        for file_path in critical_files:
            full_path = self.project_root / file_path
            exists = full_path.exists()
            structure_status["critical_files"][file_path] = exists
            
            if exists:
                logger.info(f"‚úÖ {file_path}")
            else:
                logger.error(f"‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                structure_status["missing_critical"].append(file_path)
                self.results["critical_issues"].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for dir_name in important_dirs:
            dir_path = self.project_root / dir_name
            exists = dir_path.exists()
            structure_status["important_dirs"][dir_name] = exists
            
            if exists:
                logger.info(f"‚úÖ {dir_name}/")
            else:
                logger.warning(f"‚ö†Ô∏è {dir_name}/ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                structure_status["missing_dirs"].append(dir_name)
        
        self.results["diagnostics"]["file_structure"] = structure_status
    
    def check_python_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        dependencies = {
            "fastapi": "fastapi",
            "uvicorn": "uvicorn",
            "pdfplumber": "pdfplumber",
            "python-docx": "docx",
            "openpyxl": "openpyxl",
            "anthropic": "anthropic",
            "pandas": "pandas",
            "numpy": "numpy",
            "requests": "requests",
            "sqlalchemy": "sqlalchemy"
        }
        
        deps_status = {
            "installed": {},
            "missing": [],
            "versions": {}
        }
        
        for package_name, import_name in dependencies.items():
            try:
                module = __import__(import_name)
                deps_status["installed"][package_name] = True
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é
                version = getattr(module, '__version__', 'unknown')
                deps_status["versions"][package_name] = version
                
                logger.info(f"‚úÖ {package_name} ({version})")
            except ImportError:
                deps_status["installed"][package_name] = False
                deps_status["missing"].append(package_name)
                logger.error(f"‚ùå {package_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if deps_status["missing"]:
            self.results["critical_issues"].append(f"–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(deps_status['missing'])}")
        
        self.results["diagnostics"]["dependencies"] = deps_status
    
    def check_environment_variables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        env_vars = {
            "ANTHROPIC_API_KEY": {"required": False, "description": "API –∫–ª—é—á –¥–ª—è Claude"},
            "OPENAI_API_KEY": {"required": False, "description": "API –∫–ª—é—á –¥–ª—è OpenAI"},
            "DATABASE_URL": {"required": False, "description": "URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"},
            "PORT": {"required": False, "description": "–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞"},
            "DEBUG": {"required": False, "description": "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"}
        }
        
        env_status = {
            "configured": {},
            "missing_optional": [],
            "values": {}
        }
        
        for var_name, config in env_vars.items():
            value = os.getenv(var_name)
            is_set = bool(value)
            
            env_status["configured"][var_name] = is_set
            env_status["values"][var_name] = "configured" if is_set else "not_set"
            
            if is_set:
                logger.info(f"‚úÖ {var_name}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                if config["required"]:
                    logger.error(f"‚ùå {var_name}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
                    self.results["critical_issues"].append(f"–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var_name}")
                else:
                    logger.info(f"‚ÑπÔ∏è {var_name}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) - {config['description']}")
                    env_status["missing_optional"].append(var_name)
        
        self.results["diagnostics"]["environment"] = env_status
    
    def check_server_startup(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        startup_status = {
            "can_import_app": False,
            "import_error": None,
            "endpoints_count": 0
        }
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ PYTHONPATH
            sys.path.insert(0, str(self.project_root))
            
            from app.main import app
            startup_status["can_import_app"] = True
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º endpoints
            endpoints_count = len([route for route in app.routes if hasattr(route, 'path')])
            startup_status["endpoints_count"] = endpoints_count
            
            logger.info(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {endpoints_count} endpoints")
            
        except Exception as e:
            startup_status["can_import_app"] = False
            startup_status["import_error"] = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            self.results["critical_issues"].append(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è: {e}")
        
        self.results["diagnostics"]["server_startup"] = startup_status
    
    def check_api_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        logger.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
        
        api_status = {
            "server_running": False,
            "response_time": None,
            "endpoints_accessible": {},
            "health_check": {}
        }
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ endpoints –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_endpoints = [
            "/",
            "/health",
            "/status",
            "/docs"
        ]
        
        for endpoint in test_endpoints:
            url = f"{self.server_url}{endpoint}"
            try:
                start_time = time.time()
                response = requests.get(url, timeout=10)
                response_time = time.time() - start_time
                
                api_status["endpoints_accessible"][endpoint] = {
                    "status_code": response.status_code,
                    "response_time": round(response_time, 3),
                    "accessible": response.status_code == 200
                }
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ {endpoint} –¥–æ—Å—Ç—É–ø–µ–Ω ({response.status_code}, {response_time:.3f}s)")
                    api_status["server_running"] = True
                else:
                    logger.warning(f"‚ö†Ô∏è {endpoint} –≤–µ—Ä–Ω—É–ª {response.status_code}")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è /health
                if endpoint == "/health" and response.status_code == 200:
                    try:
                        health_data = response.json()
                        api_status["health_check"] = health_data
                        logger.info(f"‚úÖ Health check: {health_data.get('status', 'unknown')}")
                    except:
                        pass
                
            except requests.exceptions.ConnectionError:
                api_status["endpoints_accessible"][endpoint] = {
                    "accessible": False,
                    "error": "Connection refused"
                }
                logger.warning(f"‚ö†Ô∏è {endpoint} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω?)")
            except Exception as e:
                api_status["endpoints_accessible"][endpoint] = {
                    "accessible": False,
                    "error": str(e)
                }
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {endpoint}: {e}")
        
        self.results["diagnostics"]["api_availability"] = api_status
    
    def check_endpoints_functionality(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ endpoints"""
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ endpoints...")
        
        functionality_status = {
            "working_endpoints": [],
            "broken_endpoints": [],
            "untested_endpoints": []
        }
        
        if not self.results["diagnostics"]["api_availability"]["server_running"]:
            logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
            functionality_status["untested_endpoints"] = ["all - server not running"]
        else:
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö GET endpoints
            simple_endpoints = ["/", "/health", "/status"]
            
            for endpoint in simple_endpoints:
                url = f"{self.server_url}{endpoint}"
                try:
                    response = requests.get(url, timeout=5)
                    if response.status_code == 200:
                        functionality_status["working_endpoints"].append(endpoint)
                        logger.info(f"‚úÖ {endpoint} —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        functionality_status["broken_endpoints"].append(f"{endpoint} (status: {response.status_code})")
                        logger.warning(f"‚ö†Ô∏è {endpoint} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (status: {response.status_code})")
                except Exception as e:
                    functionality_status["broken_endpoints"].append(f"{endpoint} (error: {str(e)})")
                    logger.error(f"‚ùå {endpoint} –æ—à–∏–±–∫–∞: {e}")
        
        self.results["diagnostics"]["endpoints_functionality"] = functionality_status
    
    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º"""
        logger.info("üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
        
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –æ—à–∏–±–∫–∞–º
        if self.results["critical_issues"]:
            recommendations.append({
                "priority": "critical",
                "title": "–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫",
                "description": "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è",
                "actions": self.results["critical_issues"]
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
        missing_deps = self.results["diagnostics"].get("dependencies", {}).get("missing", [])
        if missing_deps:
            recommendations.append({
                "priority": "high",
                "title": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π",
                "description": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ Python –ø–∞–∫–µ—Ç—ã",
                "actions": [
                    f"pip install {' '.join(missing_deps)}",
                    "–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install -r requirements.txt"
                ]
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ API –∫–ª—é—á–∞–º
        env_status = self.results["diagnostics"].get("environment", {})
        missing_apis = env_status.get("missing_optional", [])
        if "ANTHROPIC_API_KEY" in missing_apis or "OPENAI_API_KEY" in missing_apis:
            recommendations.append({
                "priority": "medium",
                "title": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π",
                "description": "–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏",
                "actions": [
                    "–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –æ—Ç Anthropic: https://console.anthropic.com/",
                    "–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –æ—Ç OpenAI: https://platform.openai.com/",
                    "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ANTHROPIC_API_KEY –∏ OPENAI_API_KEY"
                ]
            })
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–µ—Ä–≤–µ—Ä—É
        if not self.results["diagnostics"].get("api_availability", {}).get("server_running", False):
            recommendations.append({
                "priority": "high",
                "title": "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞",
                "description": "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "actions": [
                    "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: uvicorn app.main:app --host 0.0.0.0 --port 8000",
                    "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python -m uvicorn app.main:app --reload",
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫"
                ]
            })
        
        self.results["recommendations"] = recommendations
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        for rec in recommendations:
            priority_emoji = {"critical": "üö®", "high": "‚ö†Ô∏è", "medium": "üí°", "low": "‚ÑπÔ∏è"}
            emoji = priority_emoji.get(rec["priority"], "‚ÑπÔ∏è")
            logger.info(f"{emoji} {rec['title']}")
            logger.info(f"   {rec['description']}")
            for action in rec["actions"]:
                logger.info(f"   ‚Ä¢ {action}")
    
    def determine_overall_status(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.results["critical_issues"]:
            status = "critical"
        elif not self.results["diagnostics"].get("api_availability", {}).get("server_running", False):
            status = "down"
        elif self.results["diagnostics"].get("dependencies", {}).get("missing", []):
            status = "degraded"
        else:
            status = "healthy"
        
        self.results["status"] = status
        
        status_messages = {
            "healthy": "‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
            "degraded": "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏",
            "down": "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "critical": "üö® –°–µ—Ä–≤–∏—Å –∏–º–µ–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
        }
        
        logger.info(f"üéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_messages[status]}")
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info("=" * 60)
        logger.info("üìä –°–í–û–î–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        logger.info("=" * 60)
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components = [
            ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", not bool(self.results["diagnostics"].get("file_structure", {}).get("missing_critical"))),
            ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python", not bool(self.results["diagnostics"].get("dependencies", {}).get("missing"))),
            ("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", self.results["diagnostics"].get("server_startup", {}).get("can_import_app", False)),
            ("API –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", self.results["diagnostics"].get("api_availability", {}).get("server_running", False))
        ]
        
        for component, status in components:
            emoji = "‚úÖ" if status else "‚ùå"
            logger.info(f"{emoji} {component}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.results["recommendations"]:
            logger.info("\nüí° –ü–ï–†–í–û–û–ß–ï–†–ï–î–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
            for rec in self.results["recommendations"][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"‚Ä¢ {rec['title']}")
        
        logger.info(f"\nüéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {self.results['status'].upper()}")
        logger.info("=" * 60)
    
    def save_report(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"diagnostics_report_{timestamp}.json"
        
        report_path = self.project_root / filename
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        return str(report_path)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ Concrete Agent"
    )
    parser.add_argument(
        "--project-root", 
        type=str, 
        help="–ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞"
    )
    parser.add_argument(
        "--server-url", 
        type=str, 
        default="http://localhost:8000",
        help="URL —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:8000)"
    )
    parser.add_argument(
        "--save-report", 
        action="store_true",
        help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"
    )
    
    args = parser.parse_args()
    
    diagnostics = ServiceDiagnostics(args.project_root, args.server_url)
    results = diagnostics.run_full_diagnostics()
    
    if args.save_report:
        diagnostics.save_report()
    
    # –í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    exit_code = 0 if results["status"] in ["healthy", "degraded"] else 1
    sys.exit(exit_code)

if __name__ == "__main__":
    main()