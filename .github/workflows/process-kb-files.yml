name: Process KB Files with Nanonets

# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ KB
on:
  push:
    paths:
      - 'app/knowledge_base/**/*.pdf'
      - 'app/knowledge_base/**/*.png'
      - 'app/knowledge_base/**/*.jpg'
      - 'app/knowledge_base/**/*.jpeg'
    branches:
      - main
  
  # –ò–ª–∏ –≤—Ä—É—á–Ω—É—é
  workflow_dispatch:
    inputs:
      category:
        description: 'Category to process (B1, B2, etc.) or "all"'
        required: false
        default: 'all'

jobs:
  process-files:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: üì¶ Install dependencies
        run: |
          pip install requests pdfplumber
      
      - name: ü§ñ Process files with Nanonets
        env:
          NANONETS_API_KEY: ${{ secrets.NANONETS_API_KEY }}
        run: |
          python - <<'EOF'
          import os
          import sys
          from pathlib import Path
          import requests
          import json
          import logging
          
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)
          
          NANONETS_API_KEY = os.environ.get("NANONETS_API_KEY")
          if not NANONETS_API_KEY:
              logger.error("‚ùå NANONETS_API_KEY not set!")
              sys.exit(1)
          
          NANONETS_API_URL = "https://extraction-api.nanonets.com/extract"
          KB_DIR = Path("app/knowledge_base")
          
          def should_process(file_path):
              """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
              # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
              if "_processed" in file_path.stem:
                  return False
              
              # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ
              if file_path.name in ["metadata.json", ".gitkeep"]:
                  return False
              
              # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              return file_path.suffix.lower() in ['.pdf', '.png', '.jpg', '.jpeg']
          
          def process_file(file_path):
              """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Nanonets"""
              logger.info(f"ü§ñ Processing: {file_path.name}")
              
              try:
                  headers = {"Authorization": f"Bearer {NANONETS_API_KEY}"}
                  
                  with open(file_path, 'rb') as f:
                      files = {"file": f}
                      data = {"output_type": "json"}
                      
                      response = requests.post(
                          NANONETS_API_URL,
                          headers=headers,
                          files=files,
                          data=data,
                          timeout=300
                      )
                  
                  if response.status_code == 200:
                      result = response.json()
                      
                      # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                      output_path = file_path.parent / f"{file_path.stem}_processed.json"
                      with open(output_path, 'w', encoding='utf-8') as f:
                          json.dump(result, f, indent=2, ensure_ascii=False)
                      
                      logger.info(f"‚úÖ Saved: {output_path.name}")
                      return output_path
                  else:
                      logger.error(f"‚ùå API error: {response.status_code}")
                      return None
              
              except Exception as e:
                  logger.error(f"‚ùå Error: {e}")
                  return None
          
          # –ù–∞–π—Ç–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
          category = "${{ github.event.inputs.category }}" or "all"
          
          if category == "all":
              files = list(KB_DIR.rglob("*"))
          else:
              files = list((KB_DIR / category).rglob("*"))
          
          files = [f for f in files if f.is_file() and should_process(f)]
          
          logger.info(f"üìä Found {len(files)} files to process")
          
          processed = 0
          for file_path in files:
              result = process_file(file_path)
              if result:
                  processed += 1
          
          logger.info(f"‚úÖ Processed {processed}/{len(files)} files")
          EOF
      
      - name: üíæ Commit processed files
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          git add app/knowledge_base/**/*_processed.json
          
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "ü§ñ Auto-process KB files with Nanonets [skip ci]"
            git push
            echo "‚úÖ Processed files committed!"
          else
            echo "‚ÑπÔ∏è  No new processed files"
          fi
      
      - name: üìä Summary
        run: |
          echo "## ü§ñ Nanonets Processing Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìÅ Processed files:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          find app/knowledge_base -name "*_processed.json" -type f -mmin -10 | while read file; do
            echo "- ‚úÖ $(basename $file)" >> $GITHUB_STEP_SUMMARY
          done
