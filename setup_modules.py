#!/usr/bin/env python3
"""
üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è Concrete-Agent
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import json
import logging
import subprocess
from pathlib import Path
from typing import Dict, List, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

class ConcreteAgentSetup:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Concrete-Agent"""
    
    def __init__(self, project_root: str = None):
        self.project_root = Path(project_root) if project_root else Path(__file__).parent
        self.results = {
            "agents": {},
            "routers": {},
            "services": {},
            "dependencies": {},
            "endpoints": []
        }
    
    def check_project_structure(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        required_dirs = [
            "agents", "routers", "app", "utils", "parsers", "prompts"
        ]
        
        missing_dirs = []
        for dir_name in required_dirs:
            dir_path = self.project_root / dir_name
            if not dir_path.exists():
                missing_dirs.append(dir_name)
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
                os.makedirs(dir_path, exist_ok=True)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
        
        return len(missing_dirs) == 0
    
    def check_agents(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–∞–±–æ—á–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤...")
        
        expected_agents = [
            ("concrete_agent/agent.py", "ConcreteGradeExtractor"),
            ("volume_agent/agent.py", "VolumeAnalysisAgent"),
            ("material_agent/agent.py", "MaterialAnalysisAgent"),
            ("tzd_reader_secure.py", "SecureAIAnalyzer"),
            ("smetny_inzenyr/agent.py", "SmetnyInzenyr"),
            ("dwg_agent/agent.py", "DwgAnalysisAgent")
        ]
        
        for agent_path, class_name in expected_agents:
            full_path = self.project_root / "agents" / agent_path
            exists = full_path.exists()
            self.results["agents"][agent_path] = exists
            
            if exists:
                logger.info(f"‚úÖ {agent_path}")
            else:
                logger.error(f"‚ùå {agent_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return self.results["agents"]
    
    def check_routers(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤"""
        logger.info("üõ£Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤...")
        
        expected_routers = [
            "analyze_concrete.py",
            "analyze_materials.py", 
            "analyze_volume.py",
            "version_diff.py",
            "upload.py",
            "tzd_router.py"
        ]
        
        for router_file in expected_routers:
            router_path = self.project_root / "routers" / router_file
            exists = router_path.exists()
            self.results["routers"][router_file] = exists
            
            if exists:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—ä–µ–∫—Ç–∞ router
                try:
                    with open(router_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        has_router = "router = APIRouter()" in content
                        if has_router:
                            logger.info(f"‚úÖ {router_file}")
                        else:
                            logger.warning(f"‚ö†Ô∏è {router_file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç router")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {router_file}: {e}")
            else:
                logger.error(f"‚ùå {router_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return self.results["routers"]
    
    def check_services(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —É—Ç–∏–ª–∏—Ç"""
        logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        expected_services = [
            "utils/knowledge_base_service.py",
            "utils/report_generator.py",
            "utils/czech_preprocessor.py",
            "parsers/doc_parser.py",
            "parsers/smeta_parser.py"
        ]
        
        for service_path in expected_services:
            full_path = self.project_root / service_path
            exists = full_path.exists()
            self.results["services"][service_path] = exists
            
            if exists:
                logger.info(f"‚úÖ {service_path}")
            else:
                logger.error(f"‚ùå {service_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return self.results["services"]
    
    def check_dependencies(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        critical_packages = [
            "fastapi", "uvicorn", "pdfplumber", "python-docx", 
            "openpyxl", "anthropic", "pandas", "numpy"
        ]
        
        for package in critical_packages:
            try:
                __import__(package.replace("-", "_"))
                self.results["dependencies"][package] = True
                logger.info(f"‚úÖ {package}")
            except ImportError:
                self.results["dependencies"][package] = False
                logger.error(f"‚ùå {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return self.results["dependencies"]
    
    def install_missing_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        missing = [pkg for pkg, status in self.results["dependencies"].items() if not status]
        
        if not missing:
            logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        
        logger.info(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {missing}")
        
        try:
            requirements_path = self.project_root / "requirements.txt"
            if requirements_path.exists():
                subprocess.run([
                    sys.executable, "-m", "pip", "install", "-r", str(requirements_path)
                ], check=True)
                logger.info("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ requirements.txt")
                return True
            else:
                logger.error("‚ùå requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False
    
    def test_server(self) -> Tuple[bool, List[str]]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            sys.path.insert(0, str(self.project_root))
            from app.main import app
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ endpoints
            endpoints = []
            for route in app.routes:
                if hasattr(route, 'path') and hasattr(route, 'methods'):
                    for method in route.methods:
                        if method != 'HEAD':  # –ò—Å–∫–ª—é—á–∞–µ–º HEAD –º–µ—Ç–æ–¥—ã
                            endpoints.append(f"{method} {route.path}")
            
            self.results["endpoints"] = endpoints
            logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ {len(endpoints)} endpoints")
            return True, endpoints
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False, []
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        report = {
            "timestamp": "2025-09-27T15:00:00Z",
            "project_root": str(self.project_root),
            "summary": {
                "agents_ok": sum(self.results["agents"].values()),
                "agents_total": len(self.results["agents"]),
                "routers_ok": sum(self.results["routers"].values()),
                "routers_total": len(self.results["routers"]),
                "services_ok": sum(self.results["services"].values()),
                "services_total": len(self.results["services"]),
                "dependencies_ok": sum(self.results["dependencies"].values()),
                "dependencies_total": len(self.results["dependencies"]),
                "endpoints_count": len(self.results["endpoints"])
            },
            "detailed_results": self.results
        }
        
        report_path = self.project_root / "setup_report.json"
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        return str(report_path)
    
    def run_full_setup(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –ù–ê–°–¢–†–û–ô–ö–ò CONCRETE-AGENT")
        logger.info("=" * 60)
        
        success = True
        
        # 1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        if not self.check_project_structure():
            logger.warning("‚ö†Ô∏è –ë—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤
        agents_status = self.check_agents()
        if not all(agents_status.values()):
            logger.error("‚ùå –ù–µ –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
            success = False
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—É—Ç–µ—Ä–æ–≤
        routers_status = self.check_routers()
        if not all(routers_status.values()):
            logger.error("‚ùå –ù–µ –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã")
            success = False
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        services_status = self.check_services()
        if not all(services_status.values()):
            logger.error("‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞–π–¥–µ–Ω—ã")
            success = False
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        deps_status = self.check_dependencies()
        if not all(deps_status.values()):
            logger.warning("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            if not self.install_missing_dependencies():
                success = False
        
        # 6. –¢–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞
        server_ok, endpoints = self.test_server()
        if not server_ok:
            logger.error("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
            success = False
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report_path = self.generate_report()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        logger.info("=" * 60)
        if success:
            logger.info("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(endpoints)} –∞–∫—Ç–∏–≤–Ω—ã—Ö endpoints")
            logger.info("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            logger.error("‚ùå –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
            logger.info("üìÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        
        logger.info(f"üìä –û—Ç—á–µ—Ç: {report_path}")
        return success


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π Concrete-Agent"
    )
    parser.add_argument(
        "--project-root", 
        type=str, 
        help="–ü—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)"
    )
    parser.add_argument(
        "--install-deps", 
        action="store_true",
        help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    )
    
    args = parser.parse_args()
    
    setup = ConcreteAgentSetup(args.project_root)
    
    if args.install_deps:
        logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        setup.install_missing_dependencies()
    
    success = setup.run_full_setup()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()