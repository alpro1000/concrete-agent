import React, { useState } from 'react';
import { 
  Row, 
  Col, 
  Typography, 
  Space, 
  message, 
  Spin,
  Card,
  Tabs,
  Divider,
  Tag,
  List
} from 'antd';
import { 
  CheckCircleOutlined,
  GlobalOutlined,
  FileTextOutlined
} from '@ant-design/icons';
import TZDUploadSimple from '../components/TZDUploadSimple';
import apiClient from '../api/client';

const { Title, Paragraph, Text } = Typography;

interface TZDAnalysisResult {
  success: boolean;
  analysis_id: string;
  timestamp: string;
  project_object: string;
  requirements: string[];
  norms: string[];
  constraints: string[];
  environment: string;
  functions: string[];
  processing_metadata: any;
  error_message?: string;
}

// Helper function to normalize diacritics
const normalizeDiacritics = (text: string): string => {
  if (!text) return text;
  return text.normalize('NFC');
};

const TZDAnalysis: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<TZDAnalysisResult | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [translations, setTranslations] = useState<{
    ru: string;
    cs: string;
    en: string;
  } | null>(null);

  const handleAnalyze = async (files: File[], engine: string) => {
    setLoading(true);
    setError(null);
    setAnalysisResult(null);
    setTranslations(null);

    try {
      const formData = new FormData();
      files.forEach(file => {
        formData.append('files', file);
      });
      formData.append('ai_engine', engine);

      const response = await apiClient.post('/api/v1/tzd/analyze', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        timeout: 300000, // 5 minutes timeout for analysis
      });

      if (response.data.success) {
        const result = response.data;
        
        // Normalize all text fields
        const normalizedResult = {
          ...result,
          project_object: normalizeDiacritics(result.project_object),
          requirements: result.requirements.map(normalizeDiacritics),
          norms: result.norms.map(normalizeDiacritics),
          constraints: result.constraints.map(normalizeDiacritics),
          environment: normalizeDiacritics(result.environment),
          functions: result.functions.map(normalizeDiacritics),
        };
        
        setAnalysisResult(normalizedResult);
        
        // Generate translations (simple mock for now)
        const projectDesc = normalizedResult.project_object || '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        setTranslations({
          ru: projectDesc, // Russian (original)
          cs: projectDesc, // Czech (would need translation API)
          en: projectDesc, // English (would need translation API)
        });
        
        message.success('–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      } else {
        throw new Error(response.data.error_message || '–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è');
      }
    } catch (err: any) {
      const errorMessage = err.response?.data?.detail || err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ';
      setError(errorMessage);
      message.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${errorMessage}`);
    } finally {
      setLoading(false);
    }
  };

  const renderResults = () => {
    if (!analysisResult) return null;

    return (
      <Space direction="vertical" size="large" style={{ width: '100%' }}>
        <Card
          title={
            <Space>
              <CheckCircleOutlined style={{ color: '#52c41a' }} />
              <span>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</span>
            </Space>
          }
        >
          <Space direction="vertical" size="middle" style={{ width: '100%' }}>
            <div>
              <Text strong>ID –∞–Ω–∞–ª–∏–∑–∞:</Text> <Tag>{analysisResult.analysis_id}</Tag>
            </div>
            <div>
              <Text strong>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</Text>{' '}
              <Text type="secondary">{analysisResult.timestamp}</Text>
            </div>
            <Divider />
            
            <div>
              <Title level={4}>
                <FileTextOutlined /> –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
              </Title>
              <Paragraph>{analysisResult.project_object}</Paragraph>
            </div>

            <Divider />

            <Row gutter={16}>
              <Col span={12}>
                <Card size="small" title="–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è" bordered={false}>
                  <List
                    size="small"
                    dataSource={analysisResult.requirements}
                    renderItem={(item) => <List.Item>‚Ä¢ {item}</List.Item>}
                  />
                </Card>
              </Col>
              <Col span={12}>
                <Card size="small" title="–ù–æ—Ä–º—ã" bordered={false}>
                  <List
                    size="small"
                    dataSource={analysisResult.norms}
                    renderItem={(item) => <List.Item>‚Ä¢ {item}</List.Item>}
                  />
                </Card>
              </Col>
            </Row>

            <Row gutter={16}>
              <Col span={12}>
                <Card size="small" title="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è" bordered={false}>
                  <List
                    size="small"
                    dataSource={analysisResult.constraints}
                    renderItem={(item) => <List.Item>‚Ä¢ {item}</List.Item>}
                  />
                </Card>
              </Col>
              <Col span={12}>
                <Card size="small" title="–§—É–Ω–∫—Ü–∏–∏" bordered={false}>
                  <List
                    size="small"
                    dataSource={analysisResult.functions}
                    renderItem={(item) => <List.Item>‚Ä¢ {item}</List.Item>}
                  />
                </Card>
              </Col>
            </Row>

            {analysisResult.environment && (
              <>
                <Divider />
                <div>
                  <Title level={5}>–£—Å–ª–æ–≤–∏—è –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã</Title>
                  <Paragraph>{analysisResult.environment}</Paragraph>
                </div>
              </>
            )}
          </Space>
        </Card>

        {translations && (
          <Card
            title={
              <Space>
                <GlobalOutlined style={{ color: '#1890ff' }} />
                <span>–ü–µ—Ä–µ–≤–æ–¥—ã –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞</span>
              </Space>
            }
          >
            <Tabs
              items={[
                {
                  key: 'ru',
                  label: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
                  children: <Paragraph>{translations.ru}</Paragraph>,
                },
                {
                  key: 'cs',
                  label: 'üá®üáø ƒåe≈°tina',
                  children: <Paragraph>{translations.cs}</Paragraph>,
                },
                {
                  key: 'en',
                  label: 'üá¨üáß English',
                  children: <Paragraph>{translations.en}</Paragraph>,
                },
              ]}
            />
          </Card>
        )}
      </Space>
    );
  };

  return (
    <div style={{ padding: '24px' }}>
      <Space direction="vertical" size="large" style={{ width: '100%' }}>
        <Card>
          <Space direction="vertical" size="small">
            <Title level={2}>TZD Reader - –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π</Title>
            <Paragraph type="secondary">
              –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π,
              –Ω–æ—Ä–º, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ –¥—Ä—É–≥–æ–π –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç PDF,
              DOCX –∏ TXT —Ñ–∞–π–ª—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∏.
            </Paragraph>
          </Space>
        </Card>

        {error && (
          <Card>
            <Text type="danger">{error}</Text>
          </Card>
        )}

        {!analysisResult && !loading && (
          <TZDUploadSimple
            onAnalyze={handleAnalyze}
            loading={loading}
            disabled={loading}
          />
        )}

        {loading && (
          <Card>
            <div style={{ textAlign: 'center', padding: '60px 0' }}>
              <Spin size="large" />
              <div style={{ marginTop: '16px' }}>
                <Title level={4}>–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...</Title>
                <Paragraph type="secondary">
                  AI —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
                  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
                </Paragraph>
              </div>
            </div>
          </Card>
        )}

        {analysisResult && renderResults()}
      </Space>
    </div>
  );
};

export default TZDAnalysis;
