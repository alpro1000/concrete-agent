import React, { useState } from 'react';
import { 
  Row, 
  Col, 
  Typography, 
  Space, 
  message, 
  Spin,
  Card,
  Steps,
  Button,
  Alert
} from 'antd';
import { 
  UploadOutlined, 
  BarChartOutlined, 
  CheckCircleOutlined,
  ReloadOutlined
} from '@ant-design/icons';
import TZDUpload from '../components/TZDUpload';
import TZDResults from '../components/TZDResults';
import apiClient from '../api/client';
import type { TZDAnalysisResult } from '../types/api';

const { Title, Paragraph } = Typography;

const TZDAnalysis: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [analysisResult, setAnalysisResult] = useState<TZDAnalysisResult | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleAnalyze = async (files: File[], engine: string, context?: string) => {
    setLoading(true);
    setError(null);
    setCurrentStep(1);

    try {
      const formData = new FormData();
      files.forEach(file => {
        formData.append('files', file);
      });
      formData.append('ai_engine', engine);
      if (context) {
        formData.append('project_context', context);
      }

      const response = await apiClient.post('/api/v1/tzd/analyze', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        timeout: 300000, // 5 minutes timeout for analysis
      });

      if (response.data.success) {
        setAnalysisResult(response.data);
        setCurrentStep(2);
        message.success('–ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      } else {
        throw new Error(response.data.error_message || '–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è');
      }
    } catch (err: any) {
      const errorMessage = err.response?.data?.detail || err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ';
      setError(errorMessage);
      message.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${errorMessage}`);
      setCurrentStep(0);
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = async (format: 'json' | 'pdf') => {
    if (!analysisResult) return;

    try {
      if (format === 'json') {
        // Download as JSON
        const dataStr = JSON.stringify(analysisResult, null, 2);
        const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
        
        const exportFileDefaultName = `tzd_analysis_${analysisResult.analysis_id}.json`;
        
        const linkElement = document.createElement('a');
        linkElement.setAttribute('href', dataUri);
        linkElement.setAttribute('download', exportFileDefaultName);
        linkElement.click();
        
        message.success('JSON —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω');
      } else if (format === 'pdf') {
        // Request PDF generation from backend
        const response = await apiClient.get(`/api/v1/tzd/analysis/${analysisResult.analysis_id}/pdf`, {
          responseType: 'blob'
        });
        
        const blob = new Blob([response.data], { type: 'application/pdf' });
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `tzd_analysis_${analysisResult.analysis_id}.pdf`;
        link.click();
        window.URL.revokeObjectURL(url);
        
        message.success('PDF –æ—Ç—á–µ—Ç —Å–∫–∞—á–∞–Ω');
      }
    } catch (err: any) {
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞');
      console.error('Download error:', err);
    }
  };

  const handleCopyJSON = () => {
    if (!analysisResult) return;
    
    const jsonString = JSON.stringify(analysisResult, null, 2);
    navigator.clipboard.writeText(jsonString).then(() => {
      message.success('JSON —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }).catch(() => {
      message.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
    });
  };

  const handleReset = () => {
    setCurrentStep(0);
    setAnalysisResult(null);
    setError(null);
  };

  const steps = [
    {
      title: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤',
      description: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¢–ó –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
      icon: <UploadOutlined />,
    },
    {
      title: '–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
      description: 'AI –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
      icon: <BarChartOutlined />,
    },
    {
      title: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã',
      description: '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã',
      icon: <CheckCircleOutlined />,
    },
  ];

  return (
    <div style={{ padding: '24px' }}>
      <Space direction="vertical" size="large" style={{ width: '100%' }}>
        {/* Header */}
        <Card>
          <Space direction="vertical">
            <Title level={2}>
              üìã TZD Reader - –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π
            </Title>
            <Paragraph type="secondary">
              –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ 
              —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π Orchestrator. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 
              –∞–Ω–∞–ª–∏–∑ PDF, DOCX –∏ TXT —Ñ–∞–π–ª–æ–≤ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
            </Paragraph>
          </Space>
        </Card>

        {/* Progress Steps */}
        <Card>
          <Steps current={currentStep} items={steps} />
        </Card>

        {/* Error Display */}
        {error && (
          <Alert
            message="–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"
            description={error}
            type="error"
            showIcon
            closable
            onClose={() => setError(null)}
            action={
              <Button size="small" onClick={handleReset}>
                –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
              </Button>
            }
          />
        )}

        {/* Main Content */}
        <Row gutter={[24, 24]}>
          <Col span={24}>
            {currentStep === 0 && (
              <TZDUpload
                onAnalyze={handleAnalyze}
                loading={loading}
                disabled={loading}
              />
            )}

            {currentStep === 1 && (
              <Card>
                <div style={{ textAlign: 'center', padding: '60px 0' }}>
                  <Spin size="large" />
                  <div style={{ marginTop: '16px' }}>
                    <Title level={4}>–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...</Title>
                    <Paragraph type="secondary">
                      AI —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
                      –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
                    </Paragraph>
                  </div>
                </div>
              </Card>
            )}

            {currentStep === 2 && analysisResult && (
              <Space direction="vertical" size="large" style={{ width: '100%' }}>
                <TZDResults
                  result={analysisResult}
                  onDownload={handleDownload}
                  onCopy={handleCopyJSON}
                />
                
                <Card>
                  <Space>
                    <Button 
                      icon={<ReloadOutlined />}
                      onClick={handleReset}
                    >
                      –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                    </Button>
                    <Button 
                      type="primary"
                      onClick={() => handleDownload('pdf')}
                    >
                      –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á–µ—Ç
                    </Button>
                  </Space>
                </Card>
              </Space>
            )}
          </Col>
        </Row>

        {/* Help Information */}
        <Card title="–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">
          <Row gutter={[16, 16]}>
            <Col span={8}>
              <Card size="small" title="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã">
                <ul>
                  <li>PDF –¥–æ–∫—É–º–µ–Ω—Ç—ã</li>
                  <li>Microsoft Word (.docx)</li>
                  <li>–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)</li>
                </ul>
              </Card>
            </Col>
            <Col span={8}>
              <Card size="small" title="–ò–∑–≤–ª–µ–∫–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ">
                <ul>
                  <li>–û–±—ä–µ–∫—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞</li>
                  <li>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</li>
                  <li>–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã</li>
                  <li>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞</li>
                  <li>–£—Å–ª–æ–≤–∏—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏</li>
                  <li>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ</li>
                </ul>
              </Card>
            </Col>
            <Col span={8}>
              <Card size="small" title="–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å">
                <ul>
                  <li>–ú–∞–∫—Å–∏–º—É–º 10MB –Ω–∞ —Ñ–∞–π–ª</li>
                  <li>–î–æ 5 —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</li>
                  <li>–ó–∞—â–∏—Ç–∞ –æ—Ç path traversal</li>
                  <li>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤</li>
                </ul>
              </Card>
            </Col>
          </Row>
        </Card>
      </Space>
    </div>
  );
};

export default TZDAnalysis;