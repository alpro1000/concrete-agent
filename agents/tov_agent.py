# agents/tov_agent.py
"""
TOVAgent - –¢—Ä—É–¥-–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ-–ú–∞—Ç–µ—Ä–∏–∞–ª—ã Planning Agent
Builds resource schedules with work zones and Gantt charts

Moved from tov_planner.py to follow the agents naming convention.
"""
import logging
from dataclasses import dataclass
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import json
from io import StringIO

logger = logging.getLogger(__name__)

@dataclass
class WorkZone:
    """–†–∞–±–æ—á–∞—è –∑–∞—Ö–≤–∞—Ç–∫–∞"""
    zone_id: str
    name: str
    activities: List[str]
    start_date: datetime
    end_date: datetime
    resources: List[Dict[str, Any]]
    dependencies: List[str]
    floor_level: str = "–û–±—â–∏–π"
    estimated_duration_days: int = 0
    status: str = "planned"

@dataclass
class ResourceRequirement:
    """–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Ä–µ—Å—É—Ä—Å–∞–º"""
    resource_type: str  # 'labor', 'equipment', 'material'
    resource_name: str
    quantity: float
    unit: str
    cost_per_unit: float
    total_cost: float
    required_dates: List[datetime]
    priority: str = "normal"  # low, normal, high, critical

@dataclass
class WorkPackage:
    """–ü–∞–∫–µ—Ç —Ä–∞–±–æ—Ç"""
    package_id: str
    name: str
    description: str
    work_zones: List[WorkZone]
    total_duration_days: int
    total_cost: float
    critical_path: List[str]
    resource_requirements: List[ResourceRequirement]
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None
    status: str = "draft"

class TOVAgent:
    """
    TOV Agent - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ TOV (–¢—Ä—É–¥-–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ-–ú–∞—Ç–µ—Ä–∏–∞–ª—ã)
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ê–Ω–∞–ª–∏–∑ —Å–º–µ—Ç –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    - –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –∑–∞—Ö–≤–∞—Ç–∫–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø–∞—É–∑–∞–º
    - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞
    """
    
    def __init__(self):
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")

    async def create_tov_plan(
        self, 
        estimate_data: Dict[str, Any],
        project_constraints: Optional[Dict[str, Any]] = None
    ) -> WorkPackage:
        """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω —Ä–µ—Å—É—Ä—Å–æ–≤ TOV –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ TOV –ø–ª–∞–Ω–∞...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏–∑ —Å–º–µ—Ç—ã
            resources = self._extract_resources_from_estimate(estimate_data)
            self.logger.info(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {len(resources)}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—Ö–≤–∞—Ç–∫–∏
            work_zones = self._create_work_zones(resources, project_constraints)
            self.logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–æ –∑–∞—Ö–≤–∞—Ç–æ–∫: {len(work_zones)}")
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            scheduled_zones = self._schedule_zones(work_zones, project_constraints)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
            critical_path = self._identify_critical_path(scheduled_zones)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            total_duration = max([zone.estimated_duration_days for zone in scheduled_zones], default=0)
            total_cost = sum([sum([r.total_cost for r in zone.resources]) for zone in scheduled_zones])
            
            # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –ø–∞–∫–µ—Ç —Ä–∞–±–æ—Ç
            work_package = WorkPackage(
                package_id=f"TOV_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                name="TOV Plan - Resource Schedule",
                description="–ü–∞–∫–µ—Ç —Ä–∞–±–æ—Ç —Å –ø–ª–∞–Ω–æ–º —Ä–µ—Å—É—Ä—Å–æ–≤",
                work_zones=scheduled_zones,
                total_duration_days=total_duration,
                total_cost=total_cost,
                critical_path=critical_path,
                resource_requirements=resources
            )
            
            self.logger.info(f"‚úÖ TOV –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {len(scheduled_zones)} –∑–∞—Ö–≤–∞—Ç–æ–∫, {total_duration} –¥–Ω–µ–π")
            return work_package
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TOV –ø–ª–∞–Ω–∞: {e}")
            raise

    def _extract_resources_from_estimate(self, estimate_data: Dict[str, Any]) -> List[ResourceRequirement]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∏–∑ —Å–º–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        resources = []
        
        try:
            work_items = estimate_data.get("work_items", [])
            materials = estimate_data.get("materials", [])
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—ã
            for item in work_items:
                work_name = item.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
                quantity = float(item.get("quantity", 0))
                unit = item.get("unit", "—à—Ç")
                cost = float(item.get("cost", 0))
                
                # –¢—Ä—É–¥–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã
                labor_hours = item.get("labor_hours", quantity * 0.5)  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                if labor_hours > 0:
                    resources.append(ResourceRequirement(
                        resource_type="labor",
                        resource_name=f"–†–∞–±–æ—Ç—ã: {work_name}",
                        quantity=labor_hours,
                        unit="—á–∞—Å",
                        cost_per_unit=800,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å/—Ä–∞–±–æ—Ç—ã
                        total_cost=labor_hours * 800,
                        required_dates=[datetime.now()],
                        priority=self._classify_work_priority(work_name)
                    ))
                
                # –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                equipment = item.get("equipment", [])
                for eq in equipment:
                    resources.append(ResourceRequirement(
                        resource_type="equipment",
                        resource_name=eq.get("name", "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"),
                        quantity=eq.get("quantity", 1),
                        unit=eq.get("unit", "—à—Ç"),
                        cost_per_unit=eq.get("cost_per_unit", 1000),
                        total_cost=eq.get("total_cost", 1000),
                        required_dates=[datetime.now()],
                        priority="normal"
                    ))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            for material in materials:
                resources.append(ResourceRequirement(
                    resource_type="material",
                    resource_name=material.get("name", "–ú–∞—Ç–µ—Ä–∏–∞–ª"),
                    quantity=float(material.get("quantity", 0)),
                    unit=material.get("unit", "–º3"),
                    cost_per_unit=float(material.get("price", 0)),
                    total_cost=float(material.get("total_cost", 0)),
                    required_dates=[datetime.now()],
                    priority=self._classify_material_priority(material.get("name", ""))
                ))
            
            return resources
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
            return []

    def _create_work_zones(self, resources: List[ResourceRequirement], constraints: Optional[Dict[str, Any]]) -> List[WorkZone]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ –∑–∞—Ö–≤–∞—Ç–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        zones = []
        
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ —Ç–∏–ø–∞–º —Ä–∞–±–æ—Ç
            work_groups = {}
            
            for resource in resources:
                work_type = self._classify_work_type(resource.resource_name)
                if work_type not in work_groups:
                    work_groups[work_type] = []
                work_groups[work_type].append(resource)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—Ö–≤–∞—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç
            zone_counter = 1
            for work_type, group_resources in work_groups.items():
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–∂/—É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∫–∏
                floor_level = self._determine_floor_level(group_resources)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                total_labor_hours = sum([r.quantity for r in group_resources if r.resource_type == "labor"])
                duration_days = max(1, int(total_labor_hours / 8))  # 8 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å
                
                zone = WorkZone(
                    zone_id=f"ZONE_{zone_counter:03d}",
                    name=f"–ó–∞—Ö–≤–∞—Ç–∫–∞ {zone_counter}: {work_type}",
                    activities=[r.resource_name for r in group_resources if r.resource_type == "labor"],
                    start_date=datetime.now(),
                    end_date=datetime.now() + timedelta(days=duration_days),
                    resources=[{
                        "type": r.resource_type,
                        "name": r.resource_name,
                        "quantity": r.quantity,
                        "unit": r.unit,
                        "cost": r.total_cost
                    } for r in group_resources],
                    dependencies=[],
                    floor_level=floor_level,
                    estimated_duration_days=duration_days,
                    status="planned"
                )
                
                zones.append(zone)
                zone_counter += 1
            
            return zones
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–æ–∫: {e}")
            return []

    def _classify_work_type(self, work_name: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø —Ä–∞–±–æ—Ç—ã"""
        work_name_lower = work_name.lower()
        
        if any(keyword in work_name_lower for keyword in ["–±–µ—Ç–æ–Ω", "concrete", "–∑–∞–ª–∏–≤–∫–∞", "–∞—Ä–º–∏—Ä"]):
            return "concrete_works"
        elif any(keyword in work_name_lower for keyword in ["–∫–∏—Ä–ø–∏—á", "–∫–ª–∞–¥–∫–∞", "—Å—Ç–µ–Ω–∞", "masonry", "brick"]):
            return "masonry_works"
        elif any(keyword in work_name_lower for keyword in ["–æ—Ç–¥–µ–ª–∫–∞", "—à—Ç—É–∫–∞—Ç—É—Ä–∫–∞", "–ø–æ–∫—Ä–∞—Å–∫–∞", "finish"]):
            return "finishing_works"
        elif any(keyword in work_name_lower for keyword in ["–∫—Ä–æ–≤–ª—è", "–∫—Ä—ã—à–∞", "roof", "roofing"]):
            return "roofing_works"
        elif any(keyword in work_name_lower for keyword in ["—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç", "foundation", "–æ—Å–Ω–æ–≤–∞–Ω–∏–µ"]):
            return "foundation_works"
        elif any(keyword in work_name_lower for keyword in ["–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è", "—ç–ª–µ–∫—Ç—Ä", "hvac", "electric"]):
            return "systems"
        else:
            return "other"

    def _classify_work_priority(self, work_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–∞–±–æ—Ç—ã"""
        work_name_lower = work_name.lower()
        
        if any(keyword in work_name_lower for keyword in ["—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç", "foundation", "–Ω–µ—Å—É—â", "—Å—Ç—Ä—É–∫—Ç—É—Ä"]):
            return "critical"
        elif any(keyword in work_name_lower for keyword in ["–±–µ—Ç–æ–Ω", "concrete", "–∞—Ä–º–∏—Ä", "reinf"]):
            return "high"
        elif any(keyword in work_name_lower for keyword in ["–æ—Ç–¥–µ–ª–∫–∞", "finish", "–ø–æ–∫—Ä–∞—Å–∫–∞", "painting"]):
            return "low"
        else:
            return "normal"

    def _classify_material_priority(self, material_name: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        material_name_lower = material_name.lower()
        
        if any(keyword in material_name_lower for keyword in ["–±–µ—Ç–æ–Ω", "cement", "–∞—Ä–º–∞—Ç—É—Ä", "rebar"]):
            return "critical"
        elif any(keyword in material_name_lower for keyword in ["–∫–∏—Ä–ø–∏—á", "brick", "–±–ª–æ–∫", "block"]):
            return "high"
        else:
            return "normal"

    def _determine_floor_level(self, resources: List[ResourceRequirement]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å/—ç—Ç–∞–∂ –¥–ª—è –≥—Ä—É–ø–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–∂–∞
        for resource in resources:
            floor_info = self._extract_floor_info(resource.resource_name)
            if floor_info != "–û–±—â–∏–π":
                return floor_info
        
        return "–û–±—â–∏–π"

    def _extract_floor_info(self, description: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–∂–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
        description_lower = description.lower()
        
        if "–ø–æ–¥–≤–∞–ª" in description_lower or "basement" in description_lower:
            return "–ü–æ–¥–≤–∞–ª"
        elif "1 —ç—Ç–∞–∂" in description_lower or "1st floor" in description_lower:
            return "1 —ç—Ç–∞–∂"
        elif "2 —ç—Ç–∞–∂" in description_lower or "2nd floor" in description_lower:
            return "2 —ç—Ç–∞–∂"
        elif "3 —ç—Ç–∞–∂" in description_lower or "3rd floor" in description_lower:
            return "3 —ç—Ç–∞–∂"
        elif "–∫—Ä—ã—à–∞" in description_lower or "roof" in description_lower:
            return "–ö—Ä—ã—à–∞"
        
        return "–û–±—â–∏–π"

    def _schedule_zones(self, zones: List[WorkZone], constraints: Optional[Dict[str, Any]]) -> List[WorkZone]:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞—Ö–≤–∞—Ç–æ–∫ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –∑–∞—Ö–≤–∞—Ç–∫–∞–º–∏
            scheduled_zones = []
            current_date = datetime.now()
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Ä–∞–±–æ—Ç
            priority_order = ["foundation_works", "concrete_works", "masonry_works", "systems", "finishing_works", "roofing_works", "other"]
            
            def get_work_priority(zone):
                work_type = None
                for activity in zone.activities:
                    work_type = self._classify_work_type(activity)
                    break
                return priority_order.index(work_type) if work_type in priority_order else len(priority_order)
            
            zones.sort(key=get_work_priority)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞—Ö–≤–∞—Ç–∫—É
            for i, zone in enumerate(zones):
                if i == 0:
                    # –ü–µ—Ä–≤–∞—è –∑–∞—Ö–≤–∞—Ç–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É
                    zone.start_date = current_date
                else:
                    # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∑–∞—Ö–≤–∞—Ç–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö
                    prev_zone = scheduled_zones[i-1]
                    zone.start_date = prev_zone.end_date + timedelta(days=1)
                    zone.dependencies = [prev_zone.zone_id]
                
                zone.end_date = zone.start_date + timedelta(days=zone.estimated_duration_days)
                scheduled_zones.append(zone)
            
            return scheduled_zones
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–æ–∫: {e}")
            return zones

    def _identify_critical_path(self, zones: List[WorkZone]) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: –≤—Å–µ –∑–∞—Ö–≤–∞—Ç–∫–∏ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –ø—É—Ç–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±—ã –º–µ—Ç–æ–¥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏ (CPM)
            critical_path = []
            
            for zone in zones:
                # –ó–∞—Ö–≤–∞—Ç–∫–∏ —Å –±–æ–ª—å—à–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏–ª–∏ –≤—ã—Å–æ–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
                total_cost = sum([r.get("cost", 0) for r in zone.resources])
                if zone.estimated_duration_days > 5 or total_cost > 100000:
                    critical_path.append(zone.zone_id)
            
            return critical_path
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—Ç–∏: {e}")
            return []

    def export_to_csv(self, work_package: WorkPackage) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        try:
            output = StringIO()
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏
            output.write("Zone_ID,Zone_Name,Start_Date,End_Date,Duration_Days,Total_Cost,Activities,Floor_Level,Status\n")
            
            # –î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—Ö–≤–∞—Ç–∫–∞–º
            for zone in work_package.work_zones:
                total_cost = sum([r.get("cost", 0) for r in zone.resources])
                activities = "; ".join(zone.activities[:3])  # –ü–µ—Ä–≤—ã–µ 3 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                
                output.write(f"{zone.zone_id},{zone.name},{zone.start_date.strftime('%Y-%m-%d')},{zone.end_date.strftime('%Y-%m-%d')},{zone.estimated_duration_days},{total_cost},{activities},{zone.floor_level},{zone.status}\n")
            
            return output.getvalue()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV: {e}")
            return ""

    def export_to_json(self, work_package: WorkPackage) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            export_data = {
                "package_id": work_package.package_id,
                "name": work_package.name,
                "description": work_package.description,
                "total_duration_days": work_package.total_duration_days,
                "total_cost": work_package.total_cost,
                "critical_path": work_package.critical_path,
                "status": work_package.status,
                "work_zones": []
            }
            
            for zone in work_package.work_zones:
                zone_data = {
                    "zone_id": zone.zone_id,
                    "name": zone.name,
                    "activities": zone.activities,
                    "start_date": zone.start_date.isoformat(),
                    "end_date": zone.end_date.isoformat(),
                    "estimated_duration_days": zone.estimated_duration_days,
                    "floor_level": zone.floor_level,
                    "status": zone.status,
                    "dependencies": zone.dependencies,
                    "resources": zone.resources
                }
                export_data["work_zones"].append(zone_data)
            
            return json.dumps(export_data, indent=2, ensure_ascii=False)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON: {e}")
            return "{}"

# Singleton instance
_tov_agent = None

def get_tov_agent() -> TOVAgent:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä TOV –∞–≥–µ–Ω—Ç–∞"""
    global _tov_agent
    if _tov_agent is None:
        _tov_agent = TOVAgent()
    return _tov_agent