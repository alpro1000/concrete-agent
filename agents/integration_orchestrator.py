"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
agents/integration_orchestrator.py

–†–µ–∞–ª–∏–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π:
1. ConcreteAgent -> –∞–Ω–∞–ª–∏–∑ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞
2. VolumeAgent -> –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ConcreteAgent
3. MaterialAgent -> –ø–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
4. DrawingVolumeAgent -> –∞–Ω–∞–ª–∏–∑ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç fallback –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–µ–∑ –æ—à–∏–±–æ–∫.
"""

import logging
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
from pathlib import Path

from agents.concrete_agent import analyze_concrete, get_hybrid_agent
from agents.volume_agent.agent import get_volume_analysis_agent
from agents.material_agent.agent import get_material_analysis_agent
from utils.czech_preprocessor import get_czech_preprocessor

logger = logging.getLogger(__name__)

@dataclass
class IntegratedAnalysisRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    doc_paths: List[str]
    smeta_path: Optional[str] = None
    material_query: Optional[str] = None  # "–∞—Ä–º–∞—Ç—É—Ä–∞", "–æ–∫–Ω–∞", "–¥–≤–µ—Ä–∏", etc.
    use_claude: bool = True
    claude_mode: str = "enhancement"
    language: str = "cz"
    include_drawing_analysis: bool = False

@dataclass
class IntegratedAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    concrete_summary: Dict[str, Any]
    volume_summary: Dict[str, Any]
    material_summary: Dict[str, Any]
    drawing_summary: Optional[Dict[str, Any]] = None
    sources: List[str] = None
    analysis_status: Dict[str, str] = None
    success: bool = True
    error_message: Optional[str] = None

class IntegrationOrchestrator:
    """–ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        try:
            self.concrete_agent = get_hybrid_agent()
            logger.info("‚úÖ ConcreteAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ConcreteAgent: {e}")
            self.concrete_agent = None
        
        try:
            self.volume_agent = get_volume_analysis_agent()
            logger.info("‚úÖ VolumeAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VolumeAgent: {e}")
            self.volume_agent = None
        
        try:
            self.material_agent = get_material_analysis_agent()
            logger.info("‚úÖ MaterialAgent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MaterialAgent: {e}")
            self.material_agent = None
        
        self.czech_preprocessor = get_czech_preprocessor()
        logger.info("üöÄ IntegrationOrchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def analyze_materials_integrated(self, request: IntegratedAnalysisRequest) -> IntegratedAnalysisResult:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:
        1. –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞ (ConcreteAgent)
        2. –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ä–æ–∫ (VolumeAgent)
        3. –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É (MaterialAgent)
        4. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - –∞–Ω–∞–ª–∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π (DrawingVolumeAgent)
        """
        logger.info("üèóÔ∏è –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if not request.doc_paths:
            return IntegratedAnalysisResult(
                concrete_summary={},
                volume_summary={},
                material_summary={},
                success=False,
                error_message="–ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            )
        
        sources = request.doc_paths.copy()
        if request.smeta_path:
            sources.append(request.smeta_path)
        
        analysis_status = {}
        
        # –®–ê–ì 1: –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é ConcreteAgent
        logger.info("üìä –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞")
        concrete_summary = await self._analyze_concrete_grades(request, analysis_status)
        
        # –®–ê–ì 2: –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä–æ–∫
        logger.info("üìê –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤")
        volume_summary = await self._analyze_volumes(request, concrete_summary, analysis_status)
        
        # –®–ê–ì 3: –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("üîß –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        material_summary = await self._analyze_materials(request, analysis_status)
        
        # –®–ê–ì 4: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π
        drawing_summary = None
        if request.include_drawing_analysis:
            logger.info("üìê –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π")
            drawing_summary = await self._analyze_drawings(request, analysis_status)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = IntegratedAnalysisResult(
            concrete_summary=concrete_summary,
            volume_summary=volume_summary,
            material_summary=material_summary,
            drawing_summary=drawing_summary,
            sources=sources,
            analysis_status=analysis_status,
            success=True
        )
        
        logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return result
    
    async def _analyze_concrete_grades(self, request: IntegratedAnalysisRequest, status: Dict[str, str]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞"""
        if not self.concrete_agent:
            status["concrete_analysis"] = "unavailable - agent not initialized"
            return {
                "success": False,
                "error": "ConcreteAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "concrete_summary": [],
                "total_grades": 0
            }
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é analyze_concrete
            result = await analyze_concrete(
                doc_paths=request.doc_paths,
                smeta_path=request.smeta_path,
                use_claude=request.use_claude,
                claude_mode=request.claude_mode
            )
            
            if result.get("success", False):
                status["concrete_analysis"] = "completed successfully"
                return result
            else:
                status["concrete_analysis"] = f"failed - {result.get('error', 'unknown error')}"
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞: {e}")
            status["concrete_analysis"] = f"error - {str(e)}"
            return {
                "success": False,
                "error": str(e),
                "concrete_summary": [],
                "total_grades": 0
            }
    
    async def _analyze_volumes(self, request: IntegratedAnalysisRequest, 
                             concrete_result: Dict[str, Any], status: Dict[str, str]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞"""
        if not self.volume_agent:
            status["volume_analysis"] = "unavailable - agent not initialized"
            return {
                "success": False,
                "error": "VolumeAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "total_volume_m3": 0,
                "total_cost": 0,
                "volume_entries": []
            }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–º–µ—Ç—ã
            if not request.smeta_path:
                status["volume_analysis"] = "skipped - no budget/smeta provided"
                return {
                    "success": False,
                    "error": "–†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–º–µ—Ç–∞",
                    "message": "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ñ–∞–π–ª —Å–º–µ—Ç—ã –∏–ª–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç",
                    "concrete_grades_found": concrete_result.get("total_grades", 0),
                    "grades_locations": [grade.get("location", "") for grade in concrete_result.get("concrete_summary", [])],
                    "total_volume_m3": 0,
                    "total_cost": 0,
                    "volume_entries": []
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
            volumes = await self.volume_agent.analyze_volumes(
                doc_paths=request.doc_paths,
                smeta_path=request.smeta_path
            )
            
            # –°–æ–∑–¥–∞–µ–º summary
            volume_summary = self.volume_agent.create_volume_summary(volumes)
            
            status["volume_analysis"] = "completed successfully"
            return {
                "success": True,
                "total_volume_m3": volume_summary.get("total_volume_m3", 0),
                "total_cost": volume_summary.get("total_cost", 0),
                "volume_entries": [asdict(v) for v in volumes],
                "elements_count": volume_summary.get("elements_count", 0),
                "avg_confidence": volume_summary.get("avg_confidence", 0.0)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤: {e}")
            status["volume_analysis"] = f"error - {str(e)}"
            return {
                "success": False,
                "error": str(e),
                "total_volume_m3": 0,
                "total_cost": 0,
                "volume_entries": []
            }
    
    async def _analyze_materials(self, request: IntegratedAnalysisRequest, status: Dict[str, str]) -> Dict[str, Any]:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.material_agent:
            status["material_analysis"] = "unavailable - agent not initialized"
            return {
                "success": False,
                "error": "MaterialAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                "materials": [],
                "categories": [],
                "total_materials": 0
            }
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            materials = await self.material_agent.analyze_materials(
                doc_paths=request.doc_paths,
                smeta_path=request.smeta_path
            )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
            if request.material_query:
                materials = self._filter_materials_by_query(materials, request.material_query)
                logger.info(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{request.material_query}'")
            
            # –°–æ–∑–¥–∞–µ–º summary –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            material_summary = self.material_agent.create_material_summary(materials)
            categories = self.material_agent.categorize_materials(materials)
            
            status["material_analysis"] = "completed successfully"
            return {
                "success": True,
                "query": request.material_query,
                "total_materials": len(materials),
                "materials": [asdict(m) for m in materials],
                "categories": [asdict(c) for c in categories],
                "summary": material_summary
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
            status["material_analysis"] = f"error - {str(e)}"
            return {
                "success": False,
                "error": str(e),
                "materials": [],
                "categories": [],
                "total_materials": 0
            }
    
    def _filter_materials_by_query(self, materials, query: str):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not query:
            return materials
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é —á–µ—à—Å–∫–æ–≥–æ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        normalized_query = self.czech_preprocessor.normalize_text(query.lower())
        
        # –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
        query_synonyms = {
            "–∞—Ä–º–∞—Ç—É—Ä–∞": ["v√Ωztu≈æ", "armatura", "–∂–µ–ª–µ–∑–æ", "–∞—Ä–º–∞—Ç—É—Ä–Ω"],
            "–æ–∫–Ω–∞": ["okna", "–æ–∫–æ–Ω", "zasklen√≠", "–æ—Å—Ç–µ–∫–ª–µ–Ω"],
            "–¥–≤–µ—Ä–∏": ["dve≈ôe", "dvere", "–¥–≤–µ—Ä–Ω", "vchod"],
            "–ø–ª–∏—Ç–∫–∞": ["dla≈æba", "obklad", "keramick", "–ø–ª–∏—Ç–∫"],
            "–∏–∑–æ–ª—è—Ü–∏—è": ["izolace", "—É—Ç–µ–ø–ª–µ–Ω", "—Ç–µ–ø–ª–æ–∏–∑–æ–ª", "isolation"],
            "–±–µ—Ç–æ–Ω": ["beton", "concrete", "—Ü–µ–º–µ–Ω—Ç"],
            "—Å—Ç–∞–ª—å": ["ocel", "steel", "–º–µ—Ç–∞–ª–ª", "–∂–µ–ª–µ–∑–æ"]
        }
        
        # –†–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
        search_terms = [normalized_query]
        for key, synonyms in query_synonyms.items():
            if key in normalized_query or normalized_query in key:
                search_terms.extend(synonyms)
        
        filtered_materials = []
        for material in materials:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, —Ç–∏–ø–µ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            material_text = f"{material.material_name} {material.material_type} {material.specification}".lower()
            material_text = self.czech_preprocessor.normalize_text(material_text)
            
            if any(term in material_text for term in search_terms):
                filtered_materials.append(material)
        
        return filtered_materials
    
    async def _analyze_drawings(self, request: IntegratedAnalysisRequest, status: Dict[str, str]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–≥–æ DrawingVolumeAgent)"""
        # –ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π
        status["drawing_analysis"] = "not implemented - feature planned"
        
        return {
            "success": False,
            "message": "–ê–Ω–∞–ª–∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö",
            "note": "DrawingVolumeAgent –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MinerU –∏ DocStrange –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏",
            "pdf_drawings_found": len([p for p in request.doc_paths if p.lower().endswith('.pdf')]),
            "drawings": []
        }

# Singleton instance
_integration_orchestrator = None

def get_integration_orchestrator() -> IntegrationOrchestrator:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    global _integration_orchestrator
    if _integration_orchestrator is None:
        _integration_orchestrator = IntegrationOrchestrator()
        logger.info("üöÄ IntegrationOrchestrator initialized")
    return _integration_orchestrator