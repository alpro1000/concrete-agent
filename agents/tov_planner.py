# agents/tov_planner.py
"""
TOVPlanner Agent - –¢—Ä—É–¥-–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ-–ú–∞—Ç–µ—Ä–∏–∞–ª—ã Planning
Builds resource schedules with work zones and Gantt charts
"""
import logging
from dataclasses import dataclass
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
import json

logger = logging.getLogger(__name__)

@dataclass
class WorkZone:
    """–†–∞–±–æ—á–∞—è –∑–∞—Ö–≤–∞—Ç–∫–∞"""
    zone_id: str
    name: str
    description: str
    activities: List[str]
    estimated_duration_days: int
    dependencies: List[str]
    resources_required: Dict[str, Any]
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None

@dataclass
class ResourceRequirement:
    """–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ —Ä–µ—Å—É—Ä—Å–∞–º"""
    resource_type: str  # "labor", "equipment", "material"
    resource_name: str
    quantity: float
    unit: str
    cost_per_unit: float
    availability_constraint: Optional[str] = None

@dataclass
class WorkPackage:
    """–ü–∞–∫–µ—Ç —Ä–∞–±–æ—Ç"""
    package_id: str
    name: str
    description: str
    work_zones: List[WorkZone]
    total_duration_days: int
    total_cost: float
    critical_path: List[str]
    resource_requirements: List[ResourceRequirement]

class TOVPlanner:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ TOV (–¢—Ä—É–¥-–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ-–ú–∞—Ç–µ—Ä–∏–∞–ª—ã)
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ê–Ω–∞–ª–∏–∑ —Å–º–µ—Ç –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    - –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –∑–∞—Ö–≤–∞—Ç–∫–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø–∞—É–∑–∞–º
    - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞
    """
    
    def __init__(self):
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
    async def create_tov_plan(
        self, 
        estimate_data: Dict[str, Any],
        project_constraints: Optional[Dict[str, Any]] = None
    ) -> WorkPackage:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            estimate_data: –î–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã —Å —Ä–∞–±–æ—Ç–∞–º–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
            project_constraints: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (—Å—Ä–æ–∫–∏, –±—Ä–∏–≥–∞–¥—ã, —Ç–µ—Ö–Ω–∏–∫–∞)
            
        Returns:
            WorkPackage: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç —Ä–∞–±–æ—Ç
        """
        try:
            self.logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ TOV –ø–ª–∞–Ω–∞")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏–∑ —Å–º–µ—Ç—ã
            resources = self._extract_resources_from_estimate(estimate_data)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–µ –∑–∞—Ö–≤–∞—Ç–∫–∏
            work_zones = self._create_work_zones(
                estimate_data.get("work_items", []), 
                project_constraints
            )
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç
            scheduled_zones = self._schedule_work_zones(work_zones, resources)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
            critical_path = self._identify_critical_path(scheduled_zones)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            total_cost = sum(zone.resources_required.get("total_cost", 0) for zone in scheduled_zones)
            total_duration = self._calculate_total_duration(scheduled_zones)
            
            work_package = WorkPackage(
                package_id=f"wp_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                name="TOV Work Package",
                description="–ü–∞–∫–µ—Ç —Ä–∞–±–æ—Ç —Å –ø–ª–∞–Ω–æ–º —Ä–µ—Å—É—Ä—Å–æ–≤",
                work_zones=scheduled_zones,
                total_duration_days=total_duration,
                total_cost=total_cost,
                critical_path=critical_path,
                resource_requirements=resources
            )
            
            self.logger.info(f"‚úÖ TOV –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {len(scheduled_zones)} –∑–∞—Ö–≤–∞—Ç–æ–∫, {total_duration} –¥–Ω–µ–π")
            return work_package
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TOV –ø–ª–∞–Ω–∞: {e}")
            raise
    
    def _extract_resources_from_estimate(self, estimate_data: Dict[str, Any]) -> List[ResourceRequirement]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∏–∑ —Å–º–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        resources = []
        
        try:
            work_items = estimate_data.get("work_items", [])
            materials = estimate_data.get("materials", [])
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä—É–¥
            for item in work_items:
                if "labor_hours" in item:
                    resources.append(ResourceRequirement(
                        resource_type="labor",
                        resource_name=item.get("specialty", "General worker"),
                        quantity=item["labor_hours"],
                        unit="hours",
                        cost_per_unit=item.get("labor_rate", 500.0)  # CZK per hour
                    ))
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
                if "equipment" in item:
                    for equipment in item["equipment"]:
                        resources.append(ResourceRequirement(
                            resource_type="equipment",
                            resource_name=equipment.get("name", "Unknown equipment"),
                            quantity=equipment.get("hours", 1.0),
                            unit="hours",
                            cost_per_unit=equipment.get("rate", 1000.0)  # CZK per hour
                        ))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            for material in materials:
                resources.append(ResourceRequirement(
                    resource_type="material",
                    resource_name=material.get("name", "Unknown material"),
                    quantity=material.get("quantity", 1.0),
                    unit=material.get("unit", "pc"),
                    cost_per_unit=material.get("unit_price", 0.0)
                ))
            
            self.logger.info(f"üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {len(resources)}")
            return resources
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
            return []
    
    def _create_work_zones(
        self, 
        work_items: List[Dict[str, Any]], 
        constraints: Optional[Dict[str, Any]]
    ) -> List[WorkZone]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ –∑–∞—Ö–≤–∞—Ç–∫–∏"""
        zones = []
        
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—ã –ø–æ —Ç–∏–ø–∞–º
            work_groups = self._group_works_by_type(work_items)
            
            zone_counter = 1
            for group_name, group_items in work_groups.items():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ –∑–∞—Ö–≤–∞—Ç–∫–∏
                zone_strategy = self._determine_zone_strategy(group_name, group_items, constraints)
                
                if zone_strategy == "by_floors":
                    zones.extend(self._create_zones_by_floors(group_name, group_items, zone_counter))
                elif zone_strategy == "by_building_sections":
                    zones.extend(self._create_zones_by_sections(group_name, group_items, zone_counter))
                elif zone_strategy == "by_technology_breaks":
                    zones.extend(self._create_zones_by_tech_breaks(group_name, group_items, zone_counter))
                else:
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
                    zones.extend(self._create_simple_zones(group_name, group_items, zone_counter))
                
                zone_counter += len(zones)
            
            self.logger.info(f"üèóÔ∏è –°–æ–∑–¥–∞–Ω–æ –∑–∞—Ö–≤–∞—Ç–æ–∫: {len(zones)}")
            return zones
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–æ–∫: {e}")
            return []
    
    def _group_works_by_type(self, work_items: List[Dict[str, Any]]) -> Dict[str, List[Dict[str, Any]]]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—ã –ø–æ —Ç–∏–ø–∞–º"""
        groups = {
            "earthworks": [],
            "foundation": [],
            "structural": [],
            "finishing": [],
            "systems": [],
            "other": []
        }
        
        for item in work_items:
            work_type = self._classify_work_type(item.get("name", "").lower())
            groups[work_type].append(item)
        
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã
        return {k: v for k, v in groups.items() if v}
    
    def _classify_work_type(self, work_name: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø —Ä–∞–±–æ—Ç—ã"""
        if any(keyword in work_name for keyword in ["–∑–µ–º–ª—è", "–≤—ã–µ–º–∫–∞", "–∑–∞—Å—ã–ø–∫–∞", "earth", "excavation"]):
            return "earthworks"
        elif any(keyword in work_name for keyword in ["—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç", "foundation", "–±–µ—Ç–æ–Ω", "concrete"]):
            return "foundation"
        elif any(keyword in work_name for keyword in ["–∫–∞—Ä–∫–∞—Å", "–∫–æ–ª–æ–Ω–Ω–∞", "–±–∞–ª–∫–∞", "structural", "frame"]):
            return "structural"
        elif any(keyword in work_name for keyword in ["–æ—Ç–¥–µ–ª–∫–∞", "–ø–æ–∫—Ä–∞—Å–∫–∞", "–ø–ª–∏—Ç–∫–∞", "finishing", "tile"]):
            return "finishing"
        elif any(keyword in work_name for keyword in ["–æ—Ç–æ–ø–ª–µ–Ω–∏–µ", "–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è", "—ç–ª–µ–∫—Ç—Ä", "hvac", "electric"]):
            return "systems"
        else:
            return "other"
    
    def _determine_zone_strategy(
        self, 
        group_name: str, 
        group_items: List[Dict[str, Any]], 
        constraints: Optional[Dict[str, Any]]
    ) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ –∑–∞—Ö–≤–∞—Ç–∫–∏"""
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
        if len(group_items) > 20:
            return "by_floors"
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø —Ä–∞–±–æ—Ç
        if group_name in ["structural", "foundation"]:
            return "by_building_sections"
        elif group_name == "finishing":
            return "by_floors"
        elif group_name in ["earthworks", "systems"]:
            return "by_technology_breaks"
        
        return "simple"
    
    def _create_zones_by_floors(
        self, 
        group_name: str, 
        group_items: List[Dict[str, Any]], 
        start_counter: int
    ) -> List[WorkZone]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç–∫–∏ –ø–æ —ç—Ç–∞–∂–∞–º"""
        zones = []
        floor_groups = {}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —ç—Ç–∞–∂–∞–º (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ä–∞–±–æ—Ç)
        for item in group_items:
            floor = self._extract_floor_info(item.get("description", ""))
            if floor not in floor_groups:
                floor_groups[floor] = []
            floor_groups[floor].append(item["name"])
        
        # –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–∂–∞
        counter = start_counter
        for floor, activities in floor_groups.items():
            zone = WorkZone(
                zone_id=f"zone_{counter}",
                name=f"{group_name.title()} - {floor}",
                description=f"–†–∞–±–æ—Ç—ã {group_name} –Ω–∞ {floor}",
                activities=activities,
                estimated_duration_days=len(activities) * 2,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                dependencies=[f"zone_{counter-1}"] if counter > start_counter else [],
                resources_required={"labor_hours": len(activities) * 8}
            )
            zones.append(zone)
            counter += 1
        
        return zones
    
    def _create_zones_by_sections(
        self, 
        group_name: str, 
        group_items: List[Dict[str, Any]], 
        start_counter: int
    ) -> List[WorkZone]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç–∫–∏ –ø–æ —Å–µ–∫—Ü–∏—è–º –∑–¥–∞–Ω–∏—è"""
        zones = []
        section_size = max(1, len(group_items) // 4)  # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 4 —Å–µ–∫—Ü–∏–∏
        
        for i in range(0, len(group_items), section_size):
            section_items = group_items[i:i + section_size]
            activities = [item["name"] for item in section_items]
            
            zone = WorkZone(
                zone_id=f"zone_{start_counter + i // section_size}",
                name=f"{group_name.title()} - –°–µ–∫—Ü–∏—è {i // section_size + 1}",
                description=f"–†–∞–±–æ—Ç—ã {group_name} –≤ —Å–µ–∫—Ü–∏–∏ {i // section_size + 1}",
                activities=activities,
                estimated_duration_days=len(activities) * 3,
                dependencies=[],
                resources_required={"labor_hours": len(activities) * 10}
            )
            zones.append(zone)
        
        return zones
    
    def _create_zones_by_tech_breaks(
        self, 
        group_name: str, 
        group_items: List[Dict[str, Any]], 
        start_counter: int
    ) -> List[WorkZone]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç–∫–∏ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—É–∑–∞–º–∏"""
        zones = []
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—É–∑—ã (—Å—É—à–∫–∞, –∏—Å–ø—ã—Ç–∞–Ω–∏—è)
        tech_break_items = []
        normal_items = []
        
        for item in group_items:
            if any(keyword in item.get("name", "").lower() for keyword in ["—Å—É—à–∫–∞", "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ", "cure", "test"]):
                tech_break_items.append(item)
            else:
                normal_items.append(item)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–æ–Ω—ã
        if normal_items:
            zone = WorkZone(
                zone_id=f"zone_{start_counter}",
                name=f"{group_name.title()} - –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
                description=f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã {group_name}",
                activities=[item["name"] for item in normal_items],
                estimated_duration_days=len(normal_items) * 2,
                dependencies=[],
                resources_required={"labor_hours": len(normal_items) * 8}
            )
            zones.append(zone)
        
        # –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—É–∑–∞–º–∏
        if tech_break_items:
            zone = WorkZone(
                zone_id=f"zone_{start_counter + 1}",
                name=f"{group_name.title()} - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—É–∑—ã",
                description=f"–†–∞–±–æ—Ç—ã —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—É–∑–∞–º–∏ {group_name}",
                activities=[item["name"] for item in tech_break_items],
                estimated_duration_days=len(tech_break_items) * 5,  # –î–æ–ª—å—à–µ –∏–∑-–∑–∞ –ø–∞—É–∑
                dependencies=[f"zone_{start_counter}"] if normal_items else [],
                resources_required={"labor_hours": len(tech_break_items) * 4}
            )
            zones.append(zone)
        
        return zones
    
    def _create_simple_zones(
        self, 
        group_name: str, 
        group_items: List[Dict[str, Any]], 
        start_counter: int
    ) -> List[WorkZone]:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∑–∞—Ö–≤–∞—Ç–∫–∏"""
        activities = [item["name"] for item in group_items]
        
        zone = WorkZone(
            zone_id=f"zone_{start_counter}",
            name=f"{group_name.title()}",
            description=f"–†–∞–±–æ—Ç—ã —Ç–∏–ø–∞ {group_name}",
            activities=activities,
            estimated_duration_days=len(activities) * 2,
            dependencies=[],
            resources_required={"labor_hours": len(activities) * 8}
        )
        
        return [zone]
    
    def _extract_floor_info(self, description: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–∂–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
        description_lower = description.lower()
        
        if "–ø–æ–¥–≤–∞–ª" in description_lower or "basement" in description_lower:
            return "–ü–æ–¥–≤–∞–ª"
        elif "1 —ç—Ç–∞–∂" in description_lower or "1st floor" in description_lower:
            return "1 —ç—Ç–∞–∂"
        elif "2 —ç—Ç–∞–∂" in description_lower or "2nd floor" in description_lower:
            return "2 —ç—Ç–∞–∂"
        elif "3 —ç—Ç–∞–∂" in description_lower or "3rd floor" in description_lower:
            return "3 —ç—Ç–∞–∂"
        elif "–∫—Ä—ã—à–∞" in description_lower or "roof" in description_lower:
            return "–ö—Ä—ã—à–∞"
        
        return "–û–±—â–∏–π"
    
    def _schedule_work_zones(
        self, 
        zones: List[WorkZone], 
        resources: List[ResourceRequirement]
    ) -> List[WorkZone]:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞—Ö–≤–∞—Ç–æ–∫"""
        
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–æ–Ω—ã –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
            scheduled_zones = self._topological_sort_zones(zones)
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            current_date = datetime.now()
            
            for zone in scheduled_zones:
                # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
                dep_end_date = current_date
                for dep_id in zone.dependencies:
                    dep_zone = next((z for z in scheduled_zones if z.zone_id == dep_id), None)
                    if dep_zone and dep_zone.end_date:
                        dep_end_date = max(dep_end_date, dep_zone.end_date)
                
                zone.start_date = dep_end_date
                zone.end_date = dep_end_date + timedelta(days=zone.estimated_duration_days)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                current_date = zone.end_date
            
            return scheduled_zones
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—Ö–≤–∞—Ç–æ–∫: {e}")
            return zones
    
    def _topological_sort_zones(self, zones: List[WorkZone]) -> List[WorkZone]:
        """–¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞—Ö–≤–∞—Ç–æ–∫ –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        sorted_zones = []
        remaining_zones = zones.copy()
        
        while remaining_zones:
            # –ù–∞—Ö–æ–¥–∏–º –∑–æ–Ω—ã –±–µ–∑ –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            ready_zones = []
            for zone in remaining_zones:
                deps_satisfied = all(
                    any(sz.zone_id == dep_id for sz in sorted_zones)
                    for dep_id in zone.dependencies
                )
                if deps_satisfied:
                    ready_zones.append(zone)
            
            if not ready_zones:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
                ready_zones = [remaining_zones[0]]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –∑–æ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            for zone in ready_zones:
                sorted_zones.append(zone)
                remaining_zones.remove(zone)
        
        return sorted_zones
    
    def _identify_critical_path(self, zones: List[WorkZone]) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å"""
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Ü–µ–ø–æ—á–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        critical_path = []
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º: –Ω–∞—Ö–æ–¥–∏–º –∑–æ–Ω—É —Å —Å–∞–º–æ–π –ø–æ–∑–¥–Ω–µ–π –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è
        if zones:
            latest_zone = max(zones, key=lambda z: z.end_date if z.end_date else datetime.min)
            
            # –°—Ç—Ä–æ–∏–º –ø—É—Ç—å –Ω–∞–∑–∞–¥ –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
            current_zone = latest_zone
            while current_zone:
                critical_path.append(current_zone.zone_id)
                
                # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å —Å–∞–º–æ–π –ø–æ–∑–¥–Ω–µ–π –¥–∞—Ç–æ–π –æ–∫–æ–Ω—á–∞–Ω–∏—è
                dep_zones = [z for z in zones if z.zone_id in current_zone.dependencies]
                if dep_zones:
                    current_zone = max(dep_zones, key=lambda z: z.end_date if z.end_date else datetime.min)
                else:
                    current_zone = None
        
        return list(reversed(critical_path))
    
    def _calculate_total_duration(self, zones: List[WorkZone]) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞"""
        if not zones:
            return 0
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        latest_end = max(z.end_date for z in zones if z.end_date)
        earliest_start = min(z.start_date for z in zones if z.start_date)
        
        if latest_end and earliest_start:
            return (latest_end - earliest_start).days
        
        return sum(z.estimated_duration_days for z in zones)
    
    async def generate_gantt_chart_data(self, work_package: WorkPackage) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –ì–∞–Ω—Ç–∞"""
        try:
            gantt_data = {
                "project_name": work_package.name,
                "total_duration": work_package.total_duration_days,
                "start_date": min(z.start_date for z in work_package.work_zones if z.start_date).isoformat(),
                "end_date": max(z.end_date for z in work_package.work_zones if z.end_date).isoformat(),
                "tasks": []
            }
            
            for zone in work_package.work_zones:
                task = {
                    "id": zone.zone_id,
                    "name": zone.name,
                    "start": zone.start_date.isoformat() if zone.start_date else None,
                    "end": zone.end_date.isoformat() if zone.end_date else None,
                    "duration": zone.estimated_duration_days,
                    "dependencies": zone.dependencies,
                    "progress": 0,  # –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    "critical": zone.zone_id in work_package.critical_path
                }
                gantt_data["tasks"].append(task)
            
            return gantt_data
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ì–∞–Ω—Ç–∞: {e}")
            return {"error": str(e)}
    
    def export_to_csv(self, work_package: WorkPackage) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        import csv
        import io
        
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            "Zone ID", "Zone Name", "Activities", "Start Date", "End Date", 
            "Duration (days)", "Dependencies", "Labor Hours", "Cost"
        ])
        
        # –î–∞–Ω–Ω—ã–µ –∑–∞—Ö–≤–∞—Ç–æ–∫
        for zone in work_package.work_zones:
            writer.writerow([
                zone.zone_id,
                zone.name,
                "; ".join(zone.activities),
                zone.start_date.strftime("%Y-%m-%d") if zone.start_date else "",
                zone.end_date.strftime("%Y-%m-%d") if zone.end_date else "",
                zone.estimated_duration_days,
                "; ".join(zone.dependencies),
                zone.resources_required.get("labor_hours", 0),
                zone.resources_required.get("total_cost", 0)
            ])
        
        return output.getvalue()


# Singleton instance
_tov_planner = None

def get_tov_planner() -> TOVPlanner:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ TOV"""
    global _tov_planner
    if _tov_planner is None:
        _tov_planner = TOVPlanner()
    return _tov_planner