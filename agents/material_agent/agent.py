"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
agents/material_agent/agent.py

–û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞:
1. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
2. –ê–Ω–∞–ª–∏–∑ –∞—Ä–º–∞—Ç—É—Ä—ã –∏ —Å—Ç–∞–ª–∏
3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–æ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
4. –ê–Ω–∞–ª–∏–∑ –æ–∫–æ–Ω, –¥–≤–µ—Ä–µ–π –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
5. –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º
"""

import re
import json
import logging
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from pathlib import Path

from parsers.doc_parser import DocParser
from parsers.smeta_parser import SmetaParser
from services.doc_parser import parse_document  # New unified parser
from utils.knowledge_base_service import get_knowledge_service
from utils.czech_preprocessor import get_czech_preprocessor

logger = logging.getLogger(__name__)

@dataclass
class MaterialItem:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    material_type: str  # reinforcement, windows, insulation, etc.
    material_name: str
    specification: str  # Fe500, PVC, EPDM, etc.
    quantity: Optional[float]
    unit: str  # kg, m2, ks, m
    context: str
    source_document: str
    line_number: int
    confidence: float

@dataclass
class MaterialCategory:
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    category_name: str
    total_items: int
    items: List[MaterialItem]
    total_quantity: float
    main_specifications: List[str]

class MaterialAnalysisAgent:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    
    def __init__(self):
        self.knowledge_service = get_knowledge_service()
        self.czech_preprocessor = get_czech_preprocessor()
        self.doc_parser = DocParser()
        self.smeta_parser = SmetaParser()
        
        logger.info("üîß MaterialAnalysisAgent initialized")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        self.material_patterns = self._load_material_patterns()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤
        self.quantity_patterns = [
            r'(\d+[,.]?\d*)\s*(?:kg|–∫–≥)',  # –∫–∏–ª–æ–≥—Ä–∞–º–º—ã
            r'(\d+[,.]?\d*)\s*(?:m2|–º2)',  # –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –º–µ—Ç—Ä—ã
            r'(\d+[,.]?\d*)\s*(?:m|–º)(?![2-9])',  # –º–µ—Ç—Ä—ã (–Ω–µ –º2, –º3)
            r'(\d+[,.]?\d*)\s*(?:ks|—à—Ç)',  # —à—Ç—É–∫–∏
            r'(\d+[,.]?\d*)\s*(?:t|—Ç–æ–Ω–Ω)',  # —Ç–æ–Ω–Ω—ã
            r'(\d+[,.]?\d*)\s*(?:l|–ª–∏—Ç—Ä)',  # –ª–∏—Ç—Ä—ã
        ]
    
    def _load_material_patterns(self) -> Dict[str, Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        patterns = {
            "reinforcement": {
                "patterns": [
                    r'\b(?:v√Ωztu≈æ|–∞—Ä–º–∞—Ç—É—Ä)\w*\s+(?:Fe\s?(\d{3})|R(\d{2,3}))',
                    r'\b(?:ocel|—Å—Ç–∞–ª—å)\s+(?:Fe\s?(\d{3})|R(\d{2,3}))',
                    r'\bFe\s?(\d{3})\b',
                    r'\bR(\d{2,3})\b',
                    r'\b(?:beton√°≈ôsk[√°√©]|–∞—Ä–º–∞—Ç—É—Ä–Ω)\w*\s+v√Ωztu≈æ',
                ],
                "specifications": ["Fe500", "Fe400", "R10", "R12", "R16", "R20", "R25", "R32"],
                "units": ["kg", "t", "m"]
            },
            
            "windows": {
                "patterns": [
                    r'\b(?:okn[oa]|–æ–∫–Ω)\w*\s+(?:PVC|–¥–µ—Ä–µ–≤|hlin√≠k|plastik)',
                    r'\b(?:PVC|–ø–ª–∞—Å—Ç–∏–∫)\w*\s+(?:okn|–æ–∫–Ω)',
                    r'\b(?:d≈ôevƒõn[√©√°]|–¥–µ—Ä–µ–≤—è–Ω–Ω)\w*\s+(?:okn|–æ–∫–Ω)',
                    r'\b(?:hlin√≠kov[√©√°]|–∞–ª—é–º–∏–Ω–∏–µ–≤)\w*\s+(?:okn|–æ–∫–Ω)',
                    r'\b(?:zasklen√≠|–æ—Å—Ç–µ–∫–ª–µ–Ω)',
                ],
                "specifications": ["PVC", "d≈ôevo", "hlin√≠k", "plastik"],
                "units": ["ks", "m2"]
            },
            
            "insulation": {
                "patterns": [
                    r'\b(?:izolac[e√≠]|–∏–∑–æ–ª—è—Ü)\w*\s+(?:XPS|EPS|miner√°ln√≠|–∫–∞–º–µ–Ω–Ω)',
                    r'\b(?:tepeln[√°√©]|—Ç–µ–ø–ª–æ–≤)\w*\s+izolac',
                    r'\b(?:polystyren|–ø–µ–Ω–æ–ø–ª–∞—Å—Ç|–ø–µ–Ω–æ–ø–æ–ª–∏—Å—Ç–∏—Ä–æ–ª)',
                    r'\b(?:miner√°ln√≠|–º–∏–Ω–µ—Ä–∞–ª—å–Ω)\w*\s+(?:vlna|–≤–∞—Ç–∞)',
                    r'\bXPS\b|\bEPS\b',
                ],
                "specifications": ["XPS", "EPS", "miner√°ln√≠ vlna", "polystyren"],
                "units": ["m2", "m3", "kg"]
            },
            
            "sealing": {
                "patterns": [
                    r'\b(?:tƒõsnƒõn[√≠√©]|—É–ø–ª–æ—Ç–Ω–µ–Ω)\w*\s+(?:EPDM|pry≈æ|—Ä–µ–∑–∏–Ω)',
                    r'\b(?:tƒõsnic√≠|—É–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å–Ω)\w*\s+(?:p√°s|–ª–µ–Ω—Ç–∞|profil)',
                    r'\bEPDM\b',
                    r'\b(?:gumov[√©√°]|—Ä–µ–∑–∏–Ω–æ–≤)\w*\s+(?:tƒõsnƒõn|—É–ø–ª–æ—Ç–Ω–µ–Ω)',
                ],
                "specifications": ["EPDM", "pry≈æ", "guma", "PVC"],
                "units": ["m", "ks"]
            },
            
            "metal_structures": {
                "patterns": [
                    r'\b(?:konstrukce|–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü)\w*\s+(?:z\s+)?(?:oceli|—Å—Ç–∞–ª)',
                    r'\b(?:ocelov√Ω|—Å—Ç–∞–ª—å–Ω)\w*\s+(?:r√°m|frame|–∫–∞—Ä–∫–∞—Å)',
                    r'\b(?:nosn√≠k|–±–∞–ª–∫)\w*\s+(?:ocelov√Ω|—Å—Ç–∞–ª—å–Ω)',
                    r'\b(?:sloup|–∫–æ–ª–æ–Ω–Ω)\w*\s+(?:ocelov√Ω|—Å—Ç–∞–ª—å–Ω)',
                    r'\b(?:profil|–ø—Ä–æ—Ñ–∏–ª—å)\s+(?:IPE|HEA|HEB|UPE)',
                ],
                "specifications": ["IPE", "HEA", "HEB", "UPE", "ocel S235", "ocel S355"],
                "units": ["kg", "t", "m"]
            },
            
            "doors": {
                "patterns": [
                    r'\b(?:dve≈ô[e√≠]|–¥–≤–µ—Ä)\w*\s+(?:PVC|d≈ôev|hlin√≠k)',
                    r'\b(?:vchodov[√©√°]|–≤—Ö–æ–¥–Ω)\w*\s+dve≈ô',
                    r'\b(?:interi√©rov[√©√°]|–≤–Ω—É—Ç—Ä–µ–Ω–Ω)\w*\s+dve≈ô',
                    r'\b(?:bezpeƒçnostn[√≠√©]|–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç)\w*\s+dve≈ô',
                ],
                "specifications": ["PVC", "d≈ôevo", "hlin√≠k", "ocel"],
                "units": ["ks", "m2"]
            },
            
            "roofing": {
                "patterns": [
                    r'\b(?:st≈ôe≈°n[√≠√©]|–∫—Ä–æ–≤–µ–ª—å–Ω)\w*\s+(?:krytina|–º–∞—Ç–µ—Ä–∏–∞–ª)',
                    r'\b(?:plechov[√°√©]|–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫)\w*\s+(?:krytina|–∫—Ä–æ–≤–ª)',
                    r'\b(?:ta≈°k[ay]|—á–µ—Ä–µ–ø–∏—Ü)',
                    r'\b(?:membr√°nu|–º–µ–º–±—Ä–∞–Ω)\w*\s+(?:st≈ôe≈°n|–∫—Ä–æ–≤–µ–ª—å–Ω)',
                ],
                "specifications": ["plech", "ta≈°ky", "membr√°na", "eternit"],
                "units": ["m2", "ks"]
            }
        }
        
        return patterns
    
    async def analyze_materials(self, doc_paths: List[str], 
                              smeta_path: Optional[str] = None) -> List[MaterialItem]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        logger.info(f"üîß –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ {len(doc_paths)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        all_materials = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        for doc_path in doc_paths:
            materials = await self._extract_materials_from_document(doc_path)
            all_materials.extend(materials)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ
        if smeta_path:
            smeta_materials = await self._extract_materials_from_smeta(smeta_path)
            all_materials.extend(smeta_materials)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        validated_materials = self._validate_materials(all_materials)
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(validated_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        return validated_materials
    
    async def _extract_materials_from_document(self, doc_path: str) -> List[MaterialItem]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            # Use unified parser with MinerU integration
            result = parse_document(doc_path)
            if not result["success"] or not result["results"]:
                return []
            
            # Extract text from parse results
            text = ""
            for parse_result in result["results"]:
                content = parse_result.content
                if isinstance(content, str):
                    text += content + "\n"
                elif isinstance(content, dict):
                    # Handle structured content from MinerU
                    text += content.get("text", str(content)) + "\n"
                else:
                    text += str(content) + "\n"
            
            if not text.strip():
                return []
            
            text = self.czech_preprocessor.normalize_text(text)
            materials = self._extract_materials_from_text(text, doc_path)
            
            # Log which parser was used
            if result["results"]:
                logger.info(f"üìä –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ {Path(doc_path).name}: {len(materials)} (parser: {result['results'][0].parser_used})")
                
            return materials
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_path}: {e}")
            return []
    
    async def _extract_materials_from_smeta(self, smeta_path: str) -> List[MaterialItem]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —Å–º–µ—Ç—ã"""
        try:
            # Use unified parser for smeta
            result = parse_document(smeta_path)
            if not result["success"] or not result["results"]:
                return []
            
            # Extract structured smeta data
            smeta_data = []
            for parse_result in result["results"]:
                content = parse_result.content
                if isinstance(content, list):
                    # Structured smeta data from parser
                    smeta_data.extend(content)
                elif isinstance(content, dict) and "items" in content:
                    # Legacy format with items key
                    smeta_data.extend(content["items"])
                elif isinstance(content, dict):
                    # Single structured item
                    smeta_data.append(content)
            
            if not smeta_data:
                return []
            
            materials = []
            for row_num, row in enumerate(smeta_data):
                if isinstance(row, dict):
                    material_items = self._extract_materials_from_smeta_row(
                        row, smeta_path, row_num
                    )
                    materials.extend(material_items)
            
            # Log which parser was used
            if result["results"]:
                logger.info(f"üìä –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —Å–º–µ—Ç—ã {Path(smeta_path).name}: {len(materials)} (parser: {result['results'][0].parser_used})")
            
            return materials
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ—Ç—ã {smeta_path}: {e}")
            return []
    
    def _extract_materials_from_text(self, text: str, source_document: str) -> List[MaterialItem]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        materials = []
        lines = text.split('\n')
        
        for line_num, line in enumerate(lines):
            line_clean = line.strip()
            if not line_clean or len(line_clean) < 5:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            for category, category_data in self.material_patterns.items():
                for pattern in category_data["patterns"]:
                    matches = re.finditer(pattern, line_clean, re.IGNORECASE)
                    for match in matches:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–∑ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                        specification = self._extract_specification(
                            match, line_clean, category_data["specifications"]
                        )
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        context = self._get_line_context(lines, line_num)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        quantity, unit = self._extract_quantity_and_unit(
                            line_clean, category_data["units"]
                        )
                        
                        material = MaterialItem(
                            material_type=category,
                            material_name=match.group(0),
                            specification=specification,
                            quantity=quantity,
                            unit=unit,
                            context=context[:200],
                            source_document=source_document,
                            line_number=line_num + 1,
                            confidence=self._calculate_material_confidence(
                                category, specification, quantity, context
                            )
                        )
                        
                        materials.append(material)
        
        return materials
    
    def _extract_materials_from_smeta_row(self, row: Dict, source_document: str, 
                                        row_num: int) -> List[MaterialItem]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–º–µ—Ç—ã"""
        materials = []
        description = row.get('description', '')
        quantity = row.get('quantity', 0)
        unit = row.get('unit', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        for category, category_data in self.material_patterns.items():
            for pattern in category_data["patterns"]:
                matches = re.finditer(pattern, description, re.IGNORECASE)
                for match in matches:
                    specification = self._extract_specification(
                        match, description, category_data["specifications"]
                    )
                    
                    material = MaterialItem(
                        material_type=category,
                        material_name=match.group(0),
                        specification=specification,
                        quantity=float(quantity) if quantity else None,
                        unit=unit,
                        context=description,
                        source_document=source_document,
                        line_number=row_num + 1,
                        confidence=0.8  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã
                    )
                    
                    materials.append(material)
        
        return materials
    
    def _extract_specification(self, match, line: str, possible_specs: List[str]) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–∏
        if match.groups():
            for group in match.groups():
                if group:
                    return group
        
        # –ò—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        line_upper = line.upper()
        for spec in possible_specs:
            if spec.upper() in line_upper:
                return spec
        
        return ""
    
    def _extract_quantity_and_unit(self, line: str, preferred_units: List[str]) -> tuple:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        for pattern in self.quantity_patterns:
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                quantity_str = match.group(1).replace(',', '.')
                try:
                    quantity = float(quantity_str)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                    unit_match = re.search(r'(\w+)(?:\)|\])?$', match.group(0))
                    unit = unit_match.group(1) if unit_match else ""
                    
                    return quantity, unit
                except ValueError:
                    continue
        
        return None, ""
    
    def _calculate_material_confidence(self, category: str, specification: str, 
                                     quantity: Optional[float], context: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ"""
        confidence = 0.6  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if specification:
            confidence += 0.2
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if quantity is not None:
            confidence += 0.1
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        context_keywords = {
            "reinforcement": ["v√Ωztu≈æ", "–∞—Ä–º–∞—Ç—É—Ä", "ocel", "—Å—Ç–∞–ª—å"],
            "windows": ["okno", "–æ–∫–Ω", "zasklen√≠", "–æ—Å—Ç–µ–∫–ª–µ–Ω"],
            "insulation": ["izolace", "–∏–∑–æ–ª—è—Ü", "tepeln√°", "—Ç–µ–ø–ª–æ–≤"],
            "sealing": ["tƒõsnƒõn√≠", "—É–ø–ª–æ—Ç–Ω–µ–Ω"],
            "metal_structures": ["konstrukce", "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü", "nosn√≠k", "–±–∞–ª–∫"],
            "doors": ["dve≈ôe", "–¥–≤–µ—Ä"],
            "roofing": ["st≈ôe≈°n√≠", "–∫—Ä–æ–≤–µ–ª—å–Ω", "krytina"]
        }
        
        category_keywords = context_keywords.get(category, [])
        context_lower = context.lower()
        
        if any(keyword in context_lower for keyword in category_keywords):
            confidence += 0.1
        
        return min(confidence, 1.0)
    
    def _get_line_context(self, lines: List[str], line_num: int, window: int = 1) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–æ–∫–∏"""
        start = max(0, line_num - window)
        end = min(len(lines), line_num + window + 1)
        
        context_lines = lines[start:end]
        return ' '.join(context_lines).strip()
    
    def _validate_materials(self, materials: List[MaterialItem]) -> List[MaterialItem]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã"""
        validated = []
        seen_materials = set()
        
        for material in materials:
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            material_key = f"{material.material_type}_{material.material_name}_{material.source_document}_{material.line_number}"
            if material_key in seen_materials:
                continue
            seen_materials.add(material_key)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if material.confidence >= 0.5:
                validated.append(material)
        
        return validated
    
    def categorize_materials(self, materials: List[MaterialItem]) -> List[MaterialCategory]:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–∏–ø–∞–º"""
        categories = {}
        
        for material in materials:
            category_name = material.material_type
            
            if category_name not in categories:
                categories[category_name] = MaterialCategory(
                    category_name=category_name,
                    total_items=0,
                    items=[],
                    total_quantity=0.0,
                    main_specifications=[]
                )
            
            category = categories[category_name]
            category.items.append(material)
            category.total_items += 1
            
            if material.quantity:
                category.total_quantity += material.quantity
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in categories.values():
            specs = [m.specification for m in category.items if m.specification]
            # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            spec_counts = {}
            for spec in specs:
                spec_counts[spec] = spec_counts.get(spec, 0) + 1
            
            category.main_specifications = sorted(
                spec_counts.keys(), 
                key=lambda x: spec_counts[x], 
                reverse=True
            )[:3]  # –¢–æ–ø-3 —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        return list(categories.values())
    
    def create_material_summary(self, materials: List[MaterialItem]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º"""
        if not materials:
            return {
                'total_materials': 0,
                'categories_count': 0,
                'categories': {},
                'specifications_summary': {},
                'documents_summary': {}
            }
        
        categories = self.categorize_materials(materials)
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories_summary = {}
        for category in categories:
            categories_summary[category.category_name] = {
                'count': category.total_items,
                'total_quantity': category.total_quantity,
                'main_specifications': category.main_specifications
            }
        
        # –°–≤–æ–¥–∫–∞ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º
        specifications_summary = {}
        for material in materials:
            if material.specification:
                spec = material.specification
                if spec not in specifications_summary:
                    specifications_summary[spec] = {
                        'count': 0,
                        'categories': set(),
                        'total_quantity': 0
                    }
                
                specifications_summary[spec]['count'] += 1
                specifications_summary[spec]['categories'].add(material.material_type)
                if material.quantity:
                    specifications_summary[spec]['total_quantity'] += material.quantity
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sets –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        for spec_data in specifications_summary.values():
            spec_data['categories'] = list(spec_data['categories'])
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        documents_summary = {}
        for material in materials:
            doc = material.source_document
            if doc not in documents_summary:
                documents_summary[doc] = {
                    'materials_count': 0,
                    'categories': set()
                }
            
            documents_summary[doc]['materials_count'] += 1
            documents_summary[doc]['categories'].add(material.material_type)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sets –≤ —Å–ø–∏—Å–∫–∏
        for doc_data in documents_summary.values():
            doc_data['categories'] = list(doc_data['categories'])
        
        return {
            'total_materials': len(materials),
            'categories_count': len(categories),
            'categories': categories_summary,
            'specifications_summary': specifications_summary,
            'documents_summary': documents_summary
        }


# Singleton instance
_material_analysis_agent = None

def get_material_analysis_agent() -> MaterialAnalysisAgent:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    global _material_analysis_agent
    if _material_analysis_agent is None:
        _material_analysis_agent = MaterialAnalysisAgent()
        logger.info("üîß MaterialAnalysisAgent initialized")
    return _material_analysis_agent


# ==============================
# üß™ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ==============================

async def test_material_analysis_agent():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    agent = get_material_analysis_agent()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
    test_text = """
    V√Ωztu≈æ: Fe500 - 2500 kg
    Okna PVC - 15 ks
    Tepeln√° izolace XPS 100mm - 85.5 m2
    Ocelov√Ω nosn√≠k IPE200 - 450 kg
    St≈ôe≈°n√≠ krytina - ta≈°ky keramick√© - 125 m2
    Tƒõsnƒõn√≠ EPDM - 45 m
    """
    
    print("üß™ TESTING MATERIAL ANALYSIS AGENT")
    print("=" * 50)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    materials = agent._extract_materials_from_text(test_text, "test_document.pdf")
    summary = agent.create_material_summary(materials)
    categories = agent.categorize_materials(materials)
    
    print(f"üîß –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(materials)}")
    print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    
    print("\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
    for category in categories:
        print(f"  ‚Ä¢ {category.category_name}: {category.total_items} —à—Ç.")
        print(f"    –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: {', '.join(category.main_specifications)}")
        print(f"    –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {category.total_quantity}")
        print()
    
    print("üìä –î–µ—Ç–∞–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
    for material in materials:
        print(f"  ‚Ä¢ {material.material_name}")
        print(f"    –¢–∏–ø: {material.material_type}")
        print(f"    –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: {material.specification}")
        print(f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {material.quantity} {material.unit}")
        print(f"    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {material.confidence:.2f}")
        print()

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_material_analysis_agent())