"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞
agents/concrete_agent/agent.py

–û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞:
1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
2. –í–∞–ª–∏–¥–∞—Ü–∏—é –º–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
"""

import re
import logging
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

from parsers.doc_parser import DocParser
from parsers.smeta_parser import SmetaParser
from utils.knowledge_base_service import get_knowledge_service
from utils.czech_preprocessor import get_czech_preprocessor

logger = logging.getLogger(__name__)

@dataclass
class ConcreteGrade:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞"""
    grade: str
    exposure_classes: List[str]
    context: str
    location: str
    confidence: float
    source_document: str
    line_number: int

class ConcreteGradeExtractor:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞"""
    
    def __init__(self):
        self.knowledge_service = get_knowledge_service()
        self.czech_preprocessor = get_czech_preprocessor()
        self.doc_parser = DocParser()
        self.smeta_parser = SmetaParser()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –º–∞—Ä–∫–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        self.allowed_grades = set(self.knowledge_service.get_all_concrete_grades())
        logger.info(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.allowed_grades)} –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞
        self.concrete_patterns = [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã C25/30, LC25/28
            r'(?i)(?:beton(?:u|em|y|ov√©|ov√°)?|bet√≥nov√°?)\s+(?:t≈ô√≠dy?\s+)?((?:LC)?C\d{1,3}/\d{1,3})',
            r'(?i)\b((?:LC)?C\d{1,3}/\d{1,3})\b',
            
            # –°—Ç–∞—Ä—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è B20, B25
            r'(?i)(?:beton(?:u|em|y)?)\s+(?:t≈ô√≠dy?\s+)?(B\d{1,2})',
            r'(?i)\b(B\d{1,2})\b(?=\s|$|[,.])',
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            r'(?i)(?:ze\s+≈æelezobetonu|≈æelezobetonov[√Ω√°])\s+(?:t≈ô√≠dy?\s+)?((?:LC)?C\d{1,3}/\d{1,3})',
            r'(?i)(?:monolitick[√Ω√°]|lit√Ω)\s+beton\s+(?:t≈ô√≠dy?\s+)?((?:LC)?C\d{1,3}/\d{1,3})',
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
        self.exposure_patterns = [
            r'\b(X[CDFASM]\d*)\b',
            r'\b(XO)\b'
        ]
    
    async def extract_concrete_grades(self, doc_paths: List[str], 
                                    smeta_path: Optional[str] = None) -> List[ConcreteGrade]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞ –∏–∑ {len(doc_paths)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        all_grades = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        for doc_path in doc_paths:
            grades = await self._extract_from_document(doc_path)
            all_grades.extend(grades)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ
        if smeta_path:
            smeta_grades = await self._extract_from_smeta(smeta_path)
            all_grades.extend(smeta_grades)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–∏
        validated_grades = self._validate_grades(all_grades)
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(validated_grades)} –≤–∞–ª–∏–¥–Ω—ã—Ö –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞")
        return validated_grades
    
    async def _extract_from_document(self, doc_path: str) -> List[ConcreteGrade]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ä–∫–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            text = self.doc_parser.parse(doc_path)
            if not text:
                return []
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            text = self.czech_preprocessor.normalize_text(text)
            
            return self._extract_grades_from_text(text, doc_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_path}: {e}")
            return []
    
    async def _extract_from_smeta(self, smeta_path: str) -> List[ConcreteGrade]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ä–∫–∏ –∏–∑ —Å–º–µ—Ç—ã"""
        try:
            smeta_data = self.smeta_parser.parse(smeta_path)
            if not smeta_data:
                return []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å–º–µ—Ç—ã
            text_parts = []
            for row in smeta_data:
                if isinstance(row, dict):
                    desc = row.get('description', '')
                    if desc:
                        text_parts.append(desc)
            
            text = '\n'.join(text_parts)
            text = self.czech_preprocessor.normalize_text(text)
            
            return self._extract_grades_from_text(text, smeta_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ—Ç—ã {smeta_path}: {e}")
            return []
    
    def _extract_grades_from_text(self, text: str, source_document: str) -> List[ConcreteGrade]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        grades = []
        lines = text.split('\n')
        
        for line_num, line in enumerate(lines):
            line_clean = line.strip()
            if not line_clean or len(line_clean) < 5:
                continue
            
            # –ò—â–µ–º –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ
            for pattern in self.concrete_patterns:
                matches = re.finditer(pattern, line_clean)
                for match in matches:
                    grade = match.group(1) if match.groups() else match.group(0)
                    grade = grade.strip().upper()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–∞—è –º–∞—Ä–∫–∞
                    if self._is_valid_grade_format(grade):
                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        context = self._get_line_context(lines, line_num)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å—ã –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
                        exposure_classes = self._extract_exposure_classes(context)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ/—ç–ª–µ–º–µ–Ω—Ç
                        location = self._identify_construction_element(context)
                        
                        concrete_grade = ConcreteGrade(
                            grade=grade,
                            exposure_classes=exposure_classes,
                            context=context[:200],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                            location=location,
                            confidence=self._calculate_confidence(grade, context),
                            source_document=source_document,
                            line_number=line_num + 1
                        )
                        
                        grades.append(concrete_grade)
        
        return grades
    
    def _is_valid_grade_format(self, grade: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞"""
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: C25/30, LC25/28, B25
        standard_patterns = [
            r'^(?:LC)?C\d{1,3}/\d{1,3}$',  # C25/30, LC25/28
            r'^B\d{1,2}$'  # B25
        ]
        
        return any(re.match(pattern, grade) for pattern in standard_patterns)
    
    def _extract_exposure_classes(self, context: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª–∞—Å—Å—ã –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        classes = []
        for pattern in self.exposure_patterns:
            matches = re.findall(pattern, context)
            classes.extend(matches)
        
        return list(set(classes))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    
    def _identify_construction_element(self, context: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        element = self.knowledge_service.identify_construction_element(context)
        return element if element != "unknown" else ""
    
    def _calculate_confidence(self, grade: str, context: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –º–∞—Ä–∫–µ"""
        confidence = 0.5  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        # –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –º–∞—Ä–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        if grade in self.allowed_grades:
            confidence += 0.3
        
        # –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
        context_keywords = self.knowledge_service.get_context_keywords()
        context_lower = context.lower()
        
        for keyword in context_keywords:
            if keyword in context_lower:
                confidence += 0.1
                break
        
        # –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞—Å—Å—ã –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
        if self._extract_exposure_classes(context):
            confidence += 0.1
        
        return min(confidence, 1.0)
    
    def _get_line_context(self, lines: List[str], line_num: int, window: int = 2) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–æ–∫–∏"""
        start = max(0, line_num - window)
        end = min(len(lines), line_num + window + 1)
        
        context_lines = lines[start:end]
        return ' '.join(context_lines).strip()
    
    def _validate_grades(self, grades: List[ConcreteGrade]) -> List[ConcreteGrade]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–∏"""
        validated = []
        seen_grades = set()
        
        for grade in grades:
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            grade_key = f"{grade.grade}_{grade.source_document}_{grade.line_number}"
            if grade_key in seen_grades:
                continue
            seen_grades.add(grade_key)
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            if self.knowledge_service.is_valid_concrete_grade(grade.grade):
                validated.append(grade)
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞—Ä–∫–∞ –±–µ—Ç–æ–Ω–∞: {grade.grade}")
        
        return validated
    
    def create_grades_summary(self, grades: List[ConcreteGrade]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –º–∞—Ä–∫–∞–º"""
        if not grades:
            return {
                'total_grades_found': 0,
                'unique_grades': [],
                'grades_by_document': {},
                'grades_by_element': {},
                'validation_summary': {
                    'valid_grades': 0,
                    'invalid_grades': 0
                }
            }
        
        unique_grades = list(set(g.grade for g in grades))
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        by_document = {}
        for grade in grades:
            doc = grade.source_document
            if doc not in by_document:
                by_document[doc] = []
            by_document[doc].append(grade.grade)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
        by_element = {}
        for grade in grades:
            element = grade.location or '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç'
            if element not in by_element:
                by_element[element] = []
            by_element[element].append(grade.grade)
        
        return {
            'total_grades_found': len(grades),
            'unique_grades': unique_grades,
            'grades_by_document': by_document,
            'grades_by_element': by_element,
            'validation_summary': {
                'valid_grades': len(grades),  # –í—Å–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
                'invalid_grades': 0
            }
        }


# Singleton instance
_concrete_grade_extractor = None

def get_concrete_grade_extractor() -> ConcreteGradeExtractor:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞"""
    global _concrete_grade_extractor
    if _concrete_grade_extractor is None:
        _concrete_grade_extractor = ConcreteGradeExtractor()
        logger.info("üéØ ConcreteGradeExtractor initialized")
    return _concrete_grade_extractor


# ==============================
# üß™ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ==============================

async def test_concrete_grade_extractor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞"""
    extractor = get_concrete_grade_extractor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    test_text = """
    MOSTN√ç OPƒöRA ZE ≈ΩELEZOBETONU C30/37 XD2
    Pou≈æit√Ω beton: C25/30 XC2 XF1
    Z√°kladov√° deska - monolitick√Ω beton B25
    """
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    grades = extractor._extract_grades_from_text(test_text, "test_document.pdf")
    summary = extractor.create_grades_summary(grades)
    
    print("üß™ TESTING CONCRETE GRADE EXTRACTOR")
    print("=" * 50)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–æ–∫: {len(grades)}")
    print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–æ–∫: {len(summary['unique_grades'])}")
    
    print("\nüìã –î–µ—Ç–∞–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä–æ–∫:")
    for grade in grades:
        print(f"  ‚Ä¢ {grade.grade} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {grade.confidence:.2f})")
        print(f"    –≠–ª–µ–º–µ–Ω—Ç: {grade.location}")
        print(f"    –ö–ª–∞—Å—Å—ã –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è: {', '.join(grade.exposure_classes)}")
        print(f"    –°—Ç—Ä–æ–∫–∞: {grade.line_number}")
        print()

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_concrete_grade_extractor())