"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DWG/DXF —Ñ–∞–π–ª–∞–º–∏
agents/dwg_agent/agent.py

–û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞:
1. –ü–∞—Ä—Å–∏–Ω–≥ DWG –∏ DXF —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é ezdxf
2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∏ —Ä–∞–∑–º–µ—Ä–æ–≤
3. –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–µ–≤ —á–µ—Ä—Ç–µ–∂–∞
4. –ü–æ–∏—Å–∫ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–∞—Ö
5. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
"""

import logging
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from pathlib import Path

try:
    import ezdxf
    from ezdxf import recover
    EZDXF_AVAILABLE = True
except ImportError:
    EZDXF_AVAILABLE = False
    logging.warning("‚ö†Ô∏è ezdxf –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. DWG/DXF —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

from utils.knowledge_base_service import get_knowledge_service
from utils.czech_preprocessor import get_czech_preprocessor

logger = logging.getLogger(__name__)

@dataclass
class DwgTextEntity:
    """–¢–µ–∫—Å—Ç–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å –∏–∑ DWG"""
    text: str
    layer: str
    position: Tuple[float, float, float]  # x, y, z –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    height: float
    style: str
    entity_type: str  # TEXT, MTEXT, DIMENSION

@dataclass  
class DwgLayer:
    """–°–ª–æ–π DWG —Ñ–∞–π–ª–∞"""
    name: str
    color: int
    linetype: str
    entities_count: int
    has_text: bool
    has_dimensions: bool

@dataclass
class ConcreteSpecification:
    """–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –±–µ—Ç–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–∞—è –≤ DWG"""
    grade: str
    layer: str
    position: Tuple[float, float, float]
    context: str
    confidence: float
    source_entity: str

@dataclass
class DimensionInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–º–µ—Ä–µ"""
    value: float
    text: str
    layer: str
    position: Tuple[float, float, float]
    dimension_type: str  # LINEAR, ANGULAR, RADIAL

class DwgAnalysisAgent:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ DWG/DXF —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        if not EZDXF_AVAILABLE:
            raise ImportError("ezdxf –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ezdxf")
        
        self.knowledge_service = get_knowledge_service()
        self.czech_preprocessor = get_czech_preprocessor()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞
        self.allowed_grades = set(self.knowledge_service.get_all_concrete_grades())
        
        logger.info("üìê DwgAnalysisAgent initialized")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞ –≤ DWG —Ç–µ–∫—Å—Ç–∞—Ö
        self.concrete_patterns = [
            r'(?i)\b(C\d{1,3}/\d{1,3})\b',
            r'(?i)\b(LC\d{1,3}/\d{1,3})\b', 
            r'(?i)\b(B\d{1,2})\b',
            r'(?i)(?:beton|–±–µ—Ç–æ–Ω)\s+(C\d{1,3}/\d{1,3})',
            r'(?i)(?:beton|–±–µ—Ç–æ–Ω)\s+(B\d{1,2})',
        ]
        
        # –°–ª–æ–∏, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.specification_layers = [
            'TEXT', 'NOTES', 'SPECS', 'ANNOTATION',
            'POZN√ÅMKY', 'SPECIFIKACE', 'POPIS',
            '0'  # –°–ª–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        ]
    
    async def analyze_dwg_file(self, file_path: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç DWG/DXF —Ñ–∞–π–ª"""
        logger.info(f"üìê –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ DWG —Ñ–∞–π–ª–∞: {file_path}")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                doc = ezdxf.readfile(file_path)
                recovered = False
            except ezdxf.DXFStructureError:
                logger.warning(f"‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π DXF, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {file_path}")
                doc, auditor = recover.readfile(file_path)
                recovered = True
                logger.info(f"üîß –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—à–∏–±–æ–∫: {len(auditor.errors)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            analysis_result = await self._analyze_document_content(doc, file_path, recovered)
            
            return analysis_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ DWG —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return {
                'success': False,
                'error': str(e),
                'file_path': file_path
            }
    
    async def _analyze_document_content(self, doc, file_path: str, recovered: bool) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—è—Ö
        layers = self._extract_layers_info(doc)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
        text_entities = self._extract_text_entities(doc)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        dimensions = self._extract_dimensions(doc)
        
        # –ò—â–µ–º –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞
        concrete_specs = self._find_concrete_specifications(text_entities)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = self._create_analysis_summary(
            layers, text_entities, dimensions, concrete_specs
        )
        
        return {
            'success': True,
            'file_path': file_path,
            'recovered': recovered,
            'dxf_version': doc.dxfversion,
            'layers': layers,
            'text_entities_count': len(text_entities),
            'dimensions_count': len(dimensions), 
            'concrete_specifications': concrete_specs,
            'summary': summary,
            'raw_text_entities': [entity.__dict__ for entity in text_entities[:10]]  # –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        }
    
    def _extract_layers_info(self, doc) -> List[DwgLayer]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—è—Ö"""
        layers = []
        
        for layer in doc.layers:
            # –°—á–∏—Ç–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Å–ª–æ–µ
            entities_count = 0
            has_text = False
            has_dimensions = False
            
            for entity in doc.modelspace().query(f'*[layer=="{layer.dxf.name}"]'):
                entities_count += 1
                if entity.dxftype() in ['TEXT', 'MTEXT']:
                    has_text = True
                elif entity.dxftype().startswith('DIMENSION'):
                    has_dimensions = True
            
            dwg_layer = DwgLayer(
                name=layer.dxf.name,
                color=layer.dxf.color,
                linetype=layer.dxf.linetype,
                entities_count=entities_count,
                has_text=has_text,
                has_dimensions=has_dimensions
            )
            layers.append(dwg_layer)
        
        return layers
    
    def _extract_text_entities(self, doc) -> List[DwgTextEntity]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        text_entities = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º TEXT —Å—É—â–Ω–æ—Å—Ç–∏
        for entity in doc.modelspace().query('TEXT'):
            if hasattr(entity.dxf, 'text') and entity.dxf.text:
                text_entity = DwgTextEntity(
                    text=entity.dxf.text,
                    layer=entity.dxf.layer,
                    position=(entity.dxf.insert.x, entity.dxf.insert.y, entity.dxf.insert.z),
                    height=entity.dxf.height,
                    style=getattr(entity.dxf, 'style', ''),
                    entity_type='TEXT'
                )
                text_entities.append(text_entity)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º MTEXT —Å—É—â–Ω–æ—Å—Ç–∏
        for entity in doc.modelspace().query('MTEXT'):
            if hasattr(entity, 'text') and entity.text:
                text_entity = DwgTextEntity(
                    text=entity.text,
                    layer=entity.dxf.layer,
                    position=(entity.dxf.insert.x, entity.dxf.insert.y, entity.dxf.insert.z),
                    height=entity.dxf.char_height,
                    style=getattr(entity.dxf, 'style', ''),
                    entity_type='MTEXT'
                )
                text_entities.append(text_entity)
        
        return text_entities
    
    def _extract_dimensions(self, doc) -> List[DimensionInfo]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã"""
        dimensions = []
        
        for entity in doc.modelspace().query('DIMENSION'):
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞–∑–º–µ—Ä–∞
                dim_text = entity.get_text() if hasattr(entity, 'get_text') else ""
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                import re
                numbers = re.findall(r'\d+(?:[.,]\d+)?', dim_text)
                value = float(numbers[0].replace(',', '.')) if numbers else 0.0
                
                dimension_info = DimensionInfo(
                    value=value,
                    text=dim_text,
                    layer=entity.dxf.layer,
                    position=(0, 0, 0),  # –†–∞–∑–º–µ—Ä—ã –∏–º–µ—é—Ç —Å–ª–æ–∂–Ω—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é
                    dimension_type=entity.dxftype()
                )
                dimensions.append(dimension_info)
                
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–º–µ—Ä–∞: {e}")
                continue
        
        return dimensions
    
    def _find_concrete_specifications(self, text_entities: List[DwgTextEntity]) -> List[ConcreteSpecification]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ—Ç–æ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç—è—Ö"""
        concrete_specs = []
        
        for entity in text_entities:
            text = entity.text.strip()
            if not text or len(text) < 3:
                continue
            
            # –ò—â–µ–º –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
            for pattern in self.concrete_patterns:
                import re
                matches = re.finditer(pattern, text)
                for match in matches:
                    grade = match.group(1) if match.groups() else match.group(0)
                    grade = grade.upper().strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–∞—Ä–∫–∏
                    if self._is_valid_concrete_grade(grade):
                        concrete_spec = ConcreteSpecification(
                            grade=grade,
                            layer=entity.layer,
                            position=entity.position,
                            context=text,
                            confidence=self._calculate_dwg_confidence(grade, text, entity.layer),
                            source_entity=entity.entity_type
                        )
                        concrete_specs.append(concrete_spec)
        
        return concrete_specs
    
    def _is_valid_concrete_grade(self, grade: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞"""
        return grade in self.allowed_grades or self.knowledge_service.is_valid_concrete_grade(grade)
    
    def _calculate_dwg_confidence(self, grade: str, text: str, layer: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –º–∞—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≤ DWG"""
        confidence = 0.7  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è DWG
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ –≤–∞–ª–∏–¥–Ω—É—é –º–∞—Ä–∫—É –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        if grade in self.allowed_grades:
            confidence += 0.2
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ–π
        if layer.upper() in [l.upper() for l in self.specification_layers]:
            confidence += 0.1
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
        context_words = ['beton', '–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω', 'monolitick', 'konstrukce']
        text_lower = text.lower()
        if any(word in text_lower for word in context_words):
            confidence += 0.1
        
        return min(confidence, 1.0)
    
    def _create_analysis_summary(self, layers: List[DwgLayer], 
                               text_entities: List[DwgTextEntity],
                               dimensions: List[DimensionInfo],
                               concrete_specs: List[ConcreteSpecification]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ—è–º
        layers_with_text = [l for l in layers if l.has_text]
        layers_with_dimensions = [l for l in layers if l.has_dimensions]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ä–∫–∞–º –±–µ—Ç–æ–Ω–∞
        unique_grades = list(set(spec.grade for spec in concrete_specs))
        grades_by_layer = {}
        for spec in concrete_specs:
            layer = spec.layer
            if layer not in grades_by_layer:
                grades_by_layer[layer] = []
            grades_by_layer[layer].append(spec.grade)
        
        # –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–ª–æ—è—Ö
        for layer in grades_by_layer:
            grades_by_layer[layer] = list(set(grades_by_layer[layer]))
        
        return {
            'layers_summary': {
                'total_layers': len(layers),
                'layers_with_text': len(layers_with_text),
                'layers_with_dimensions': len(layers_with_dimensions),
                'text_layers_names': [l.name for l in layers_with_text]
            },
            'content_summary': {
                'total_text_entities': len(text_entities),
                'total_dimensions': len(dimensions),
                'concrete_specifications_found': len(concrete_specs),
                'unique_concrete_grades': len(unique_grades)
            },
            'concrete_analysis': {
                'grades_found': unique_grades,
                'grades_by_layer': grades_by_layer,
                'highest_confidence': max([s.confidence for s in concrete_specs]) if concrete_specs else 0
            }
        }
    
    async def analyze_multiple_dwg_files(self, file_paths: List[str]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ DWG —Ñ–∞–π–ª–æ–≤"""
        logger.info(f"üìê –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {len(file_paths)} DWG —Ñ–∞–π–ª–æ–≤")
        
        results = {}
        all_concrete_specs = []
        
        for file_path in file_paths:
            try:
                result = await self.analyze_dwg_file(file_path)
                results[file_path] = result
                
                if result.get('success') and result.get('concrete_specifications'):
                    all_concrete_specs.extend(result['concrete_specifications'])
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_path}: {e}")
                results[file_path] = {
                    'success': False,
                    'error': str(e),
                    'file_path': file_path
                }
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É
        overall_summary = self._create_overall_summary(results, all_concrete_specs)
        
        return {
            'files_analyzed': len(file_paths),
            'successful_analyses': sum(1 for r in results.values() if r.get('success')),
            'failed_analyses': sum(1 for r in results.values() if not r.get('success')),
            'results_by_file': results,
            'overall_summary': overall_summary
        }
    
    def _create_overall_summary(self, results: Dict[str, Any], 
                              all_concrete_specs: List[ConcreteSpecification]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º"""
        
        successful_results = [r for r in results.values() if r.get('success')]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        total_text_entities = sum(r.get('text_entities_count', 0) for r in successful_results)
        total_dimensions = sum(r.get('dimensions_count', 0) for r in successful_results)
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º
        all_grades = list(set(spec.grade for spec in all_concrete_specs))
        
        # –ú–∞—Ä–∫–∏ –ø–æ —Ñ–∞–π–ª–∞–º
        grades_by_file = {}
        for file_path, result in results.items():
            if result.get('success') and result.get('concrete_specifications'):
                grades = [spec.grade for spec in result['concrete_specifications']]
                grades_by_file[file_path] = list(set(grades))
        
        return {
            'content_statistics': {
                'total_text_entities': total_text_entities,
                'total_dimensions': total_dimensions,
                'total_concrete_specs': len(all_concrete_specs)
            },
            'concrete_analysis': {
                'unique_grades_found': all_grades,
                'total_unique_grades': len(all_grades),
                'grades_by_file': grades_by_file,
                'files_with_concrete_specs': len([f for f in grades_by_file if grades_by_file[f]])
            }
        }


# Singleton instance
_dwg_analysis_agent = None

def get_dwg_analysis_agent() -> DwgAnalysisAgent:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ DWG"""
    global _dwg_analysis_agent
    if _dwg_analysis_agent is None:
        if not EZDXF_AVAILABLE:
            raise ImportError("ezdxf –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install ezdxf")
        _dwg_analysis_agent = DwgAnalysisAgent()
        logger.info("üìê DwgAnalysisAgent initialized")
    return _dwg_analysis_agent


# ==============================
# üß™ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ==============================

async def test_dwg_analysis_agent():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ DWG"""
    if not EZDXF_AVAILABLE:
        print("‚ùå EZDXF –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
        return
    
    print("üß™ TESTING DWG ANALYSIS AGENT")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π DXF —Ñ–∞–π–ª
    doc = ezdxf.new('R2010')
    msp = doc.modelspace()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –º–∞—Ä–∫–æ–π –±–µ—Ç–æ–Ω–∞
    msp.add_text("Beton C25/30 XC2", dxfattribs={'layer': 'SPECS'})
    msp.add_text("≈Ωelezobetonov√° konstrukce C30/37", dxfattribs={'layer': 'NOTES'})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    test_file = "/tmp/test_dwg.dxf"
    doc.saveas(test_file)
    
    try:
        agent = get_dwg_analysis_agent()
        result = await agent.analyze_dwg_file(test_file)
        
        print(f"üìê –£—Å–ø–µ—Ö –∞–Ω–∞–ª–∏–∑–∞: {result.get('success')}")
        print(f"üìÑ DXF –≤–µ—Ä—Å–∏—è: {result.get('dxf_version')}")
        print(f"üìä –°–ª–æ–µ–≤: {len(result.get('layers', []))}")
        print(f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π: {result.get('text_entities_count')}")
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞: {len(result.get('concrete_specifications', []))}")
        
        if result.get('concrete_specifications'):
            print("\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–∏:")
            for spec in result['concrete_specifications']:
                print(f"  ‚Ä¢ {spec.grade} (—Å–ª–æ–π: {spec.layer}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {spec.confidence:.2f})")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        import os
        if os.path.exists(test_file):
            os.remove(test_file)

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_dwg_analysis_agent())