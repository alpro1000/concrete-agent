"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç-—Å–º–µ—Ç—á–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–º–µ—Ç –∏ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π
agents/smetny_inzenyr/agent.py

–û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞:
1. –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF, DOCX, Excel, XML)
2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–º–µ—Ç
3. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤–µ–¥–æ–º–æ—Å—Ç–µ–π –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç
4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
"""

import logging
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from pathlib import Path

from parsers.doc_parser import DocParser
from parsers.smeta_parser import SmetaParser
from parsers.xml_smeta_parser import parse_xml_smeta
from outputs.save_report import save_merged_report

logger = logging.getLogger(__name__)

@dataclass
class SmetaRow:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–æ–∫–∏ —Å–º–µ—Ç—ã"""
    code: str
    description: str
    quantity: float
    unit: str
    unit_price: Optional[float]
    total_cost: Optional[float]
    source_document: str
    row_number: int
    category: Optional[str] = None  # –±–µ—Ç–æ–Ω, –∞—Ä–º–∞—Ç—É—Ä–∞, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ç.–¥.

@dataclass
class DocumentParsingResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    document_path: str
    document_type: str  # pdf, docx, xlsx, xml
    success: bool
    rows_count: int
    error_message: Optional[str]
    parsed_data: Any
    metadata: Dict[str, Any]

class SmetnyInzenyr:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–º–µ—Ç –∏ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π"""
    
    def __init__(self):
        self.doc_parser = DocParser()
        self.smeta_parser = SmetaParser()
        
        logger.info("üìã SmetnyInzenyr initialized")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫ —Å–º–µ—Ç
        self.category_keywords = {
            "concrete": ["beton", "≈æelezobeton", "monolitick", "–±–µ—Ç–æ–Ω", "–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω"],
            "reinforcement": ["v√Ωztu≈æ", "–∞—Ä–º–∞—Ç—É—Ä", "ocel", "Fe500", "Fe400"],
            "formwork": ["bednƒõn√≠", "–æ–ø–∞–ª—É–±–∫", "deska", "–¥–æ—Å–∫–∞"],
            "earthworks": ["v√Ωkop", "zemn√≠", "—Ä–∞—Å–∫–æ–ø", "–∑–µ–º–ª—è–Ω—ã–µ"],
            "insulation": ["izolace", "–∏–∑–æ–ª—è—Ü", "tepeln√°", "—Ç–µ–ø–ª–æ–≤"],
            "roofing": ["st≈ôe≈°n√≠", "–∫—Ä–æ–≤–µ–ª—å–Ω", "krytina", "–ø–æ–∫—Ä—ã—Ç–∏"],
            "windows_doors": ["okna", "dve≈ôe", "–æ–∫–Ω–∞", "–¥–≤–µ—Ä–∏"],
            "other": []
        }
    
    async def parse_documents(self, files: List[str]) -> Dict[str, DocumentParsingResult]:
        """–ü–∞—Ä—Å–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        logger.info(f"üìã –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {len(files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        results = {}
        
        for file_path in files:
            try:
                result = await self._parse_single_document(file_path)
                results[file_path] = result
                
                if result.success:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω {file_path}: {result.rows_count} —Å—Ç—Ä–æ–∫")
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {result.error_message}")
                    
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
                results[file_path] = DocumentParsingResult(
                    document_path=file_path,
                    document_type="unknown",
                    success=False,
                    rows_count=0,
                    error_message=str(e),
                    parsed_data=None,
                    metadata={}
                )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        await self._save_parsing_report(results)
        
        return results
    
    async def _parse_single_document(self, file_path: str) -> DocumentParsingResult:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç"""
        file_extension = Path(file_path).suffix.lower()
        
        if file_extension in [".pdf", ".docx"]:
            return await self._parse_text_document(file_path, file_extension)
        elif file_extension in [".xls", ".xlsx"]:
            return await self._parse_excel_document(file_path, file_extension)
        elif file_extension == ".xml":
            return await self._parse_xml_document(file_path, file_extension)
        else:
            return DocumentParsingResult(
                document_path=file_path,
                document_type=file_extension,
                success=False,
                rows_count=0,
                error_message=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_extension}",
                parsed_data=None,
                metadata={}
            )
    
    async def _parse_text_document(self, file_path: str, file_extension: str) -> DocumentParsingResult:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOCX)"""
        try:
            text = self.doc_parser.parse(file_path)
            if not text:
                return DocumentParsingResult(
                    document_path=file_path,
                    document_type=file_extension,
                    success=False,
                    rows_count=0,
                    error_message="–ü—É—Å—Ç–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è",
                    parsed_data=None,
                    metadata={}
                )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            smeta_rows = self._extract_smeta_rows_from_text(text, file_path)
            
            return DocumentParsingResult(
                document_path=file_path,
                document_type=file_extension,
                success=True,
                rows_count=len(smeta_rows),
                error_message=None,
                parsed_data={
                    'text': text,
                    'smeta_rows': smeta_rows
                },
                metadata={
                    'text_length': len(text),
                    'lines_count': len(text.split('\n')),
                    'has_structured_data': len(smeta_rows) > 0
                }
            )
            
        except Exception as e:
            return DocumentParsingResult(
                document_path=file_path,
                document_type=file_extension,
                success=False,
                rows_count=0,
                error_message=str(e),
                parsed_data=None,
                metadata={}
            )
    
    async def _parse_excel_document(self, file_path: str, file_extension: str) -> DocumentParsingResult:
        """–ü–∞—Ä—Å–∏—Ç Excel –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        try:
            smeta_data = self.smeta_parser.parse(file_path)
            if not smeta_data:
                return DocumentParsingResult(
                    document_path=file_path,
                    document_type=file_extension,
                    success=False,
                    rows_count=0,
                    error_message="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel —Ñ–∞–π–ª–µ",
                    parsed_data=None,
                    metadata={}
                )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            smeta_rows = self._convert_excel_data_to_rows(smeta_data, file_path)
            
            return DocumentParsingResult(
                document_path=file_path,
                document_type=file_extension,
                success=True,
                rows_count=len(smeta_rows),
                error_message=None,
                parsed_data={
                    'raw_data': smeta_data,
                    'smeta_rows': smeta_rows
                },
                metadata={
                    'rows_count': len(smeta_data),
                    'has_prices': any(row.get('unit_price') for row in smeta_data if isinstance(row, dict)),
                    'has_quantities': any(row.get('quantity') for row in smeta_data if isinstance(row, dict))
                }
            )
            
        except Exception as e:
            return DocumentParsingResult(
                document_path=file_path,
                document_type=file_extension,
                success=False,
                rows_count=0,
                error_message=str(e),
                parsed_data=None,
                metadata={}
            )
    
    async def _parse_xml_document(self, file_path: str, file_extension: str) -> DocumentParsingResult:
        """–ü–∞—Ä—Å–∏—Ç XML –¥–æ–∫—É–º–µ–Ω—Ç—ã"""
        try:
            xml_data = parse_xml_smeta(file_path)
            if not xml_data:
                return DocumentParsingResult(
                    document_path=file_path,
                    document_type=file_extension,
                    success=False,
                    rows_count=0,
                    error_message="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ XML —Ñ–∞–π–ª–µ",
                    parsed_data=None,
                    metadata={}
                )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º XML –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            smeta_rows = self._convert_xml_data_to_rows(xml_data, file_path)
            
            return DocumentParsingResult(
                document_path=file_path,
                document_type=file_extension,
                success=True,
                rows_count=len(smeta_rows),
                error_message=None,
                parsed_data={
                    'raw_data': xml_data,
                    'smeta_rows': smeta_rows
                },
                metadata={
                    'xml_structure': type(xml_data).__name__,
                    'has_structured_format': True
                }
            )
            
        except Exception as e:
            return DocumentParsingResult(
                document_path=file_path,
                document_type=file_extension,
                success=False,
                rows_count=0,
                error_message=str(e),
                parsed_data=None,
                metadata={}
            )
    
    def _extract_smeta_rows_from_text(self, text: str, source_document: str) -> List[SmetaRow]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å–º–µ—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        rows = []
        lines = text.split('\n')
        
        for line_num, line in enumerate(lines):
            line_clean = line.strip()
            if not line_clean or len(line_clean) < 10:
                continue
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            row_data = self._parse_smeta_line(line_clean)
            if row_data:
                smeta_row = SmetaRow(
                    code=row_data.get('code', ''),
                    description=row_data.get('description', line_clean),
                    quantity=row_data.get('quantity', 0.0),
                    unit=row_data.get('unit', ''),
                    unit_price=row_data.get('unit_price'),
                    total_cost=row_data.get('total_cost'),
                    source_document=source_document,
                    row_number=line_num + 1,
                    category=self._classify_smeta_row(line_clean)
                )
                rows.append(smeta_row)
        
        return rows
    
    def _parse_smeta_line(self, line: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å–º–µ—Ç—ã"""
        import re
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫ —Å–º–µ—Ç
        patterns = [
            # –ö–æ–¥ | –û–ø–∏—Å–∞–Ω–∏–µ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –ï–¥–∏–Ω–∏—Ü–∞ | –¶–µ–Ω–∞ | –°—É–º–º–∞
            r'(\d+(?:\.\d+)*)\s*[|\s]+(.+?)\s+(\d+[,.]?\d*)\s+(\w+)\s+(\d+[,.]?\d*)\s+(\d+[,.]?\d*)',
            
            # –û–ø–∏—Å–∞–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ –µ–¥–∏–Ω–∏—Ü–µ–π
            r'(.+?)\s+(\d+[,.]?\d*)\s+(m3|–º3|m2|–º2|ks|—à—Ç|kg|–∫–≥|t|—Ç–æ–Ω–Ω)',
            
            # –¢–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            r'(.+?)\s+(\d+[,.]?\d*)\s*$'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                groups = match.groups()
                
                if len(groups) >= 6:  # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    return {
                        'code': groups[0],
                        'description': groups[1].strip(),
                        'quantity': float(groups[2].replace(',', '.')),
                        'unit': groups[3],
                        'unit_price': float(groups[4].replace(',', '.')),
                        'total_cost': float(groups[5].replace(',', '.'))
                    }
                elif len(groups) >= 3:  # –û–ø–∏—Å–∞–Ω–∏–µ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + –µ–¥–∏–Ω–∏—Ü–∞
                    quantity_str = groups[1].replace(',', '.')
                    try:
                        quantity = float(quantity_str)
                        return {
                            'description': groups[0].strip(),
                            'quantity': quantity,
                            'unit': groups[2]
                        }
                    except ValueError:
                        continue
                elif len(groups) >= 2:  # –û–ø–∏—Å–∞–Ω–∏–µ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    quantity_str = groups[1].replace(',', '.')
                    try:
                        quantity = float(quantity_str)
                        return {
                            'description': groups[0].strip(),
                            'quantity': quantity
                        }
                    except ValueError:
                        continue
        
        return None
    
    def _convert_excel_data_to_rows(self, excel_data: List[Dict], source_document: str) -> List[SmetaRow]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ Excel –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏"""
        rows = []
        
        for row_num, row_data in enumerate(excel_data):
            if not isinstance(row_data, dict):
                continue
            
            smeta_row = SmetaRow(
                code=str(row_data.get('code', '')),
                description=str(row_data.get('description', '')),
                quantity=float(row_data.get('quantity', 0)) if row_data.get('quantity') else 0.0,
                unit=str(row_data.get('unit', '')),
                unit_price=float(row_data.get('unit_price')) if row_data.get('unit_price') else None,
                total_cost=float(row_data.get('total_cost')) if row_data.get('total_cost') else None,
                source_document=source_document,
                row_number=row_num + 1,
                category=self._classify_smeta_row(str(row_data.get('description', '')))
            )
            rows.append(smeta_row)
        
        return rows
    
    def _convert_xml_data_to_rows(self, xml_data: Any, source_document: str) -> List[SmetaRow]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ XML –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏"""
        rows = []
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ XML –¥–∞–Ω–Ω—ã–µ - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        if isinstance(xml_data, list):
            for row_num, row_data in enumerate(xml_data):
                if isinstance(row_data, dict):
                    smeta_row = SmetaRow(
                        code=str(row_data.get('code', '')),
                        description=str(row_data.get('description', '')),
                        quantity=float(row_data.get('qty', 0)) if row_data.get('qty') else 0.0,
                        unit=str(row_data.get('unit', '')),
                        unit_price=None,  # XML –º–æ–∂–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–Ω—ã
                        total_cost=None,
                        source_document=source_document,
                        row_number=row_num + 1,
                        category=self._classify_smeta_row(str(row_data.get('description', '')))
                    )
                    rows.append(smeta_row)
        
        return rows
    
    def _classify_smeta_row(self, description: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–º–µ—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        description_lower = description.lower()
        
        for category, keywords in self.category_keywords.items():
            if any(keyword in description_lower for keyword in keywords):
                return category
        
        return "other"
    
    async def _save_parsing_report(self, results: Dict[str, DocumentParsingResult]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–∞—Ä—Å–∏–Ω–≥–µ"""
        report_data = {
            'summary': {
                'total_documents': len(results),
                'successful_documents': sum(1 for r in results.values() if r.success),
                'failed_documents': sum(1 for r in results.values() if not r.success),
                'total_rows': sum(r.rows_count for r in results.values()),
            },
            'documents': {}
        }
        
        for file_path, result in results.items():
            report_data['documents'][file_path] = {
                'success': result.success,
                'document_type': result.document_type,
                'rows_count': result.rows_count,
                'error_message': result.error_message,
                'metadata': result.metadata
            }
        
        save_merged_report(report_data, output_path="outputs/smetny_inzenyr_report.json")
        logger.info("üìã –û—Ç—á–µ—Ç –æ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    def extract_all_smeta_rows(self, parsing_results: Dict[str, DocumentParsingResult]) -> List[SmetaRow]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–º–µ—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        all_rows = []
        
        for result in parsing_results.values():
            if result.success and result.parsed_data:
                smeta_rows = result.parsed_data.get('smeta_rows', [])
                all_rows.extend(smeta_rows)
        
        return all_rows
    
    def create_parsing_summary(self, parsing_results: Dict[str, DocumentParsingResult]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        successful_results = [r for r in parsing_results.values() if r.success]
        failed_results = [r for r in parsing_results.values() if not r.success]
        
        all_rows = self.extract_all_smeta_rows(parsing_results)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories_summary = {}
        for row in all_rows:
            category = row.category
            if category not in categories_summary:
                categories_summary[category] = {
                    'count': 0,
                    'total_quantity': 0,
                    'documents': set()
                }
            
            categories_summary[category]['count'] += 1
            categories_summary[category]['total_quantity'] += row.quantity
            categories_summary[category]['documents'].add(row.source_document)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sets –≤ —Å–ø–∏—Å–∫–∏
        for category_data in categories_summary.values():
            category_data['documents'] = list(category_data['documents'])
        
        return {
            'parsing_statistics': {
                'total_documents': len(parsing_results),
                'successful_documents': len(successful_results),
                'failed_documents': len(failed_results),
                'success_rate': len(successful_results) / len(parsing_results) if parsing_results else 0
            },
            'data_statistics': {
                'total_rows': len(all_rows),
                'categories_found': len(categories_summary),
                'has_prices': sum(1 for row in all_rows if row.unit_price is not None),
                'has_quantities': sum(1 for row in all_rows if row.quantity > 0)
            },
            'categories_summary': categories_summary,
            'failed_documents': [
                {
                    'path': r.document_path,
                    'error': r.error_message
                } for r in failed_results
            ]
        }


# Singleton instance  
_smetny_inzenyr = None

def get_smetny_inzenyr() -> SmetnyInzenyr:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–≥–µ–Ω—Ç–∞-—Å–º–µ—Ç—á–∏–∫–∞"""
    global _smetny_inzenyr
    if _smetny_inzenyr is None:
        _smetny_inzenyr = SmetnyInzenyr()
        logger.info("üìã SmetnyInzenyr initialized")
    return _smetny_inzenyr

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ –∫–ª–∞—Å—Å–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
def parse_files(file_list: List[str]) -> Dict[str, DocumentParsingResult]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ –∫–ª–∞—Å—Å–∞"""
    import asyncio
    agent = get_smetny_inzenyr()
    return asyncio.run(agent.parse_documents(file_list))


# ==============================
# üß™ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ==============================

async def test_smetny_inzenyr():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞-—Å–º–µ—Ç—á–∏–∫–∞"""
    agent = get_smetny_inzenyr()
    
    print("üß™ TESTING SMETNY INZENYR")
    print("=" * 50)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
    test_text = """
    001 Monolitick√° z√°kladov√° deska C25/30 10.5 m3 3500 36750
    002 ≈Ωelezobetonov√Ω vƒõnec C25/30 5.2 m3 3800 19760
    003 V√Ωztu≈æ Fe500 1250 kg 25 31250
    """
    
    rows = agent._extract_smeta_rows_from_text(test_text, "test_smeta.txt")
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(rows)}")
    
    print("\nüìä –î–µ—Ç–∞–ª–∏ —Å—Ç—Ä–æ–∫:")
    for row in rows:
        print(f"  ‚Ä¢ {row.description}")
        print(f"    –ö–æ–¥: {row.code}")
        print(f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {row.quantity} {row.unit}")
        print(f"    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row.category}")
        if row.unit_price:
            print(f"    –¶–µ–Ω–∞: {row.unit_price}, –°—É–º–º–∞: {row.total_cost}")
        print()

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_smetny_inzenyr())