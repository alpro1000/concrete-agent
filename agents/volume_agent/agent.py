"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤ –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
agents/volume_agent/agent.py

–û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞:
1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–º–µ—Ç
2. –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ —Å –º–∞—Ä–∫–∞–º–∏ –±–µ—Ç–æ–Ω–∞
3. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
4. –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤
"""

import re
import logging
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict

from parsers.doc_parser import DocParser
from parsers.smeta_parser import SmetaParser
from services.doc_parser import parse_document  # New unified parser
from utils.knowledge_base_service import get_knowledge_service
from utils.czech_preprocessor import get_czech_preprocessor
from agents.concrete_agent.agent import get_concrete_grade_extractor

logger = logging.getLogger(__name__)

@dataclass
class VolumeEntry:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–º–∞"""
    concrete_grade: str
    volume_m3: Optional[float]
    area_m2: Optional[float] 
    thickness_mm: Optional[float]
    construction_element: str
    unit_price: Optional[float]
    total_cost: Optional[float]
    unit: str  # 'm3', 'm2', 'ks', 't'
    source_line: str
    source_document: str
    line_number: int
    confidence: float
    context: str

@dataclass
class ElementVolumeGroup:
    """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä–µ–º–æ–≤ –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
    element_name: str
    concrete_grade: str
    total_volume_m3: float
    unit_price: Optional[float]
    total_cost: Optional[float]
    entries: List[VolumeEntry]

class VolumeAnalysisAgent:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤"""
    
    def __init__(self):
        self.knowledge_service = get_knowledge_service()
        self.czech_preprocessor = get_czech_preprocessor()
        self.doc_parser = DocParser()
        self.smeta_parser = SmetaParser()
        self.concrete_extractor = get_concrete_grade_extractor()
        
        logger.info("üèóÔ∏è VolumeAnalysisAgent initialized")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–º–æ–≤
        self.volume_patterns = [
            # –û–±—ä–µ–º—ã –≤ –º¬≥: 125,5 m3, 125.5 –º¬≥
            r'(\d+[,.]?\d*)\s*(?:m3|–º3|–∫—É–±–æ–º–µ—Ç—Ä)',
            
            # –ü–ª–æ—â–∞–¥–∏ –≤ –º¬≤: 50,2 m2, 50.2 –º¬≤
            r'(\d+[,.]?\d*)\s*(?:m2|–º2|–∫–≤–∞–¥—Ä–∞—Ç–Ω)',
            
            # –¢–æ–ª—â–∏–Ω—ã –≤ –º–º: 200 mm, 150–º–º
            r'(?:—Ç–æ–ª—â|tlou≈°≈•k|thick)\w*[:\s]*(\d+)\s*(?:mm|–º–º)',
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞: 15 ks, 20 —à—Ç
            r'(\d+)\s*(?:ks|—à—Ç|—à—Ç—É–∫)',
            
            # –ú–∞—Å—Å—ã: 2,5 t, 2.5 —Ç–æ–Ω–Ω
            r'(\d+[,.]?\d*)\s*(?:t|—Ç–æ–Ω–Ω|ton)',
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω
        self.price_patterns = [
            r'(\d+[,.]?\d*)\s*(?:Kƒç|–∫—á|–∫—Ä–æ–Ω)',
            r'(?:—Ü–µ–Ω–∞|price|cena)[:\s]*(\d+[,.]?\d*)',
            r'(\d+[,.]?\d*)\s*(?:–∑–∞|per|na)\s*(?:m3|–º3)',
        ]
    
    async def analyze_volumes(self, doc_paths: List[str], 
                            smeta_path: Optional[str] = None) -> List[VolumeEntry]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–º—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ –∏–∑ {len(doc_paths)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        all_volumes = []
        
        # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞
        concrete_grades = await self.concrete_extractor.extract_concrete_grades(doc_paths, smeta_path)
        grades_by_document = self._group_grades_by_document(concrete_grades)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã  
        for doc_path in doc_paths:
            doc_grades = grades_by_document.get(doc_path, [])
            volumes = await self._extract_volumes_from_document(doc_path, doc_grades)
            all_volumes.extend(volumes)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ
        if smeta_path:
            smeta_grades = grades_by_document.get(smeta_path, [])
            smeta_volumes = await self._extract_volumes_from_smeta(smeta_path, smeta_grades)
            all_volumes.extend(smeta_volumes)
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –æ–±—ä–µ–º—ã —Å –º–∞—Ä–∫–∞–º–∏ –±–µ—Ç–æ–Ω–∞
        linked_volumes = self._link_volumes_with_grades(all_volumes, concrete_grades)
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(linked_volumes)} –æ–±—ä–µ–º–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –º–∞—Ä–∫–∞–º")
        return linked_volumes
    
    def _group_grades_by_document(self, grades) -> Dict[str, List]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –º–∞—Ä–∫–∏ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
        grouped = {}
        for grade in grades:
            doc = grade.source_document
            if doc not in grouped:
                grouped[doc] = []
            grouped[doc].append(grade)
        return grouped
    
    async def _extract_volumes_from_document(self, doc_path: str, grades: List) -> List[VolumeEntry]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—ä–µ–º—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            # Use unified parser with MinerU integration
            result = parse_document(doc_path)
            if not result["success"] or not result["results"]:
                return []
            
            # Extract text from parse results
            text = ""
            for parse_result in result["results"]:
                content = parse_result.content
                if isinstance(content, str):
                    text += content + "\n"
                elif isinstance(content, dict):
                    # Handle structured content from MinerU
                    text += content.get("text", str(content)) + "\n"
                else:
                    text += str(content) + "\n"
            
            if not text.strip():
                return []
            
            text = self.czech_preprocessor.normalize_text(text)
            volumes = self._extract_volumes_from_text(text, doc_path, grades)
            
            # Log which parser was used
            if result["results"]:
                logger.info(f"üìä –û–±—ä–µ–º—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {Path(doc_path).name}: {len(volumes)} (parser: {result['results'][0].parser_used})")
                
            return volumes
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_path}: {e}")
            return []
    
    async def _extract_volumes_from_smeta(self, smeta_path: str, grades: List) -> List[VolumeEntry]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—ä–µ–º—ã –∏–∑ —Å–º–µ—Ç—ã"""
        try:
            # Use unified parser for smeta
            result = parse_document(smeta_path)
            if not result["success"] or not result["results"]:
                return []
            
            # Extract structured smeta data
            smeta_data = []
            for parse_result in result["results"]:
                content = parse_result.content
                if isinstance(content, list):
                    # Structured smeta data from parser
                    smeta_data.extend(content)
                elif isinstance(content, dict) and "items" in content:
                    # Legacy format with items key
                    smeta_data.extend(content["items"])
                elif isinstance(content, dict):
                    # Single structured item
                    smeta_data.append(content)
            
            if not smeta_data:
                return []
            
            volumes = []
            for row_num, row in enumerate(smeta_data):
                if isinstance(row, dict):
                    volume_entry = self._extract_volume_from_smeta_row(
                        row, smeta_path, row_num, grades
                    )
                    if volume_entry:
                        volumes.append(volume_entry)
            
            # Log which parser was used
            if result["results"]:
                logger.info(f"üìä –û–±—ä–µ–º—ã –∏–∑ —Å–º–µ—Ç—ã {Path(smeta_path).name}: {len(volumes)} (parser: {result['results'][0].parser_used})")
            
            return volumes
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ—Ç—ã {smeta_path}: {e}")
            return []
    
    def _extract_volumes_from_text(self, text: str, source_document: str, grades: List) -> List[VolumeEntry]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—ä–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        volumes = []
        lines = text.split('\n')
        
        for line_num, line in enumerate(lines):
            line_clean = line.strip()
            if not line_clean or len(line_clean) < 10:
                continue
            
            # –ò—â–µ–º –æ–±—ä–µ–º—ã –≤ —Å—Ç—Ä–æ–∫–µ
            volume_data = self._parse_volume_from_line(line_clean)
            if not volume_data:
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = self._get_line_context(lines, line_num)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            element = self.knowledge_service.identify_construction_element(context)
            
            # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞
            closest_grade = self._find_closest_grade(line_num, grades, context)
            
            volume_entry = VolumeEntry(
                concrete_grade=closest_grade.grade if closest_grade else "",
                volume_m3=volume_data.get('volume_m3'),
                area_m2=volume_data.get('area_m2'),
                thickness_mm=volume_data.get('thickness_mm'),
                construction_element=element,
                unit_price=volume_data.get('unit_price'),
                total_cost=volume_data.get('total_cost'),
                unit=volume_data.get('unit', 'm3'),
                source_line=line_clean,
                source_document=source_document,
                line_number=line_num + 1,
                confidence=self._calculate_volume_confidence(volume_data, context),
                context=context[:200]
            )
            
            volumes.append(volume_entry)
        
        return volumes
    
    def _extract_volume_from_smeta_row(self, row: Dict, source_document: str, 
                                     row_num: int, grades: List) -> Optional[VolumeEntry]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—ä–µ–º –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–º–µ—Ç—ã"""
        description = row.get('description', '')
        quantity = row.get('quantity', 0)
        unit = row.get('unit', '')
        unit_price = row.get('unit_price', 0)
        total_cost = row.get('total_cost', 0)
        
        # –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        volume_data = self._parse_volume_from_line(description)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        element = self.knowledge_service.identify_construction_element(description)
        
        # –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞
        closest_grade = self._find_closest_grade_in_smeta(description, grades)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–º/–ø–ª–æ—â–∞–¥—å
        volume_m3 = None
        area_m2 = None
        
        if unit.lower() in ['m3', '–º3']:
            volume_m3 = float(quantity) if quantity else volume_data.get('volume_m3')
        elif unit.lower() in ['m2', '–º2']:
            area_m2 = float(quantity) if quantity else volume_data.get('area_m2')
        
        return VolumeEntry(
            concrete_grade=closest_grade.grade if closest_grade else "",
            volume_m3=volume_m3,
            area_m2=area_m2,
            thickness_mm=volume_data.get('thickness_mm'),
            construction_element=element,
            unit_price=float(unit_price) if unit_price else None,
            total_cost=float(total_cost) if total_cost else None,
            unit=unit,
            source_line=description,
            source_document=source_document,
            line_number=row_num + 1,
            confidence=0.8,  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã
            context=description
        )
    
    def _parse_volume_from_line(self, line: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –æ–±—ä–µ–º—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        volume_data = {}
        
        # –ò—â–µ–º –æ–±—ä–µ–º—ã –º¬≥
        for pattern in [r'(\d+[,.]?\d*)\s*(?:m3|–º3)']:
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                volume_str = match.group(1).replace(',', '.')
                try:
                    volume_data['volume_m3'] = float(volume_str)
                    volume_data['unit'] = 'm3'
                except ValueError:
                    pass
        
        # –ò—â–µ–º –ø–ª–æ—â–∞–¥–∏ –º¬≤
        for pattern in [r'(\d+[,.]?\d*)\s*(?:m2|–º2)']:
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                area_str = match.group(1).replace(',', '.')
                try:
                    volume_data['area_m2'] = float(area_str)
                    if 'unit' not in volume_data:
                        volume_data['unit'] = 'm2'
                except ValueError:
                    pass
        
        # –ò—â–µ–º —Ç–æ–ª—â–∏–Ω—ã
        for pattern in [r'(?:—Ç–æ–ª—â|tlou≈°≈•k|thick)\w*[:\s]*(\d+)\s*(?:mm|–º–º)']:
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                try:
                    volume_data['thickness_mm'] = float(match.group(1))
                except ValueError:
                    pass
        
        # –ò—â–µ–º —Ü–µ–Ω—ã
        for pattern in self.price_patterns:
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                price_str = match.group(1).replace(',', '.')
                try:
                    volume_data['unit_price'] = float(price_str)
                except ValueError:
                    pass
        
        return volume_data
    
    def _find_closest_grade(self, line_num: int, grades: List, context: str):
        """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞"""
        if not grades:
            return None
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –º–∞—Ä–∫—É –≤ —Ç–æ–º –∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        for grade in grades:
            if grade.line_number == line_num + 1:  # –¢–∞ –∂–µ —Å—Ç—Ä–æ–∫–∞
                return grade
        
        # –ò—â–µ–º –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±5 —Å—Ç—Ä–æ–∫)
        nearby_grades = [g for g in grades if abs(g.line_number - (line_num + 1)) <= 5]
        if nearby_grades:
            return min(nearby_grades, key=lambda g: abs(g.line_number - (line_num + 1)))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –º–∞—Ä–∫—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        return grades[0] if grades else None
    
    def _find_closest_grade_in_smeta(self, description: str, grades: List):
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–∞—Ä–∫—É –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Å–º–µ—Ç—ã"""
        if not grades:
            return None
        
        # –ò—â–µ–º –º–∞—Ä–∫—É –ø—Ä—è–º–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        for grade in grades:
            if grade.grade in description:
                return grade
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–∞—Ä–∫—É
        return grades[0] if grades else None
    
    def _link_volumes_with_grades(self, volumes: List[VolumeEntry], grades: List) -> List[VolumeEntry]:
        """–°–≤—è–∑—ã–≤–∞–µ—Ç –æ–±—ä–µ–º—ã —Å –º–∞—Ä–∫–∞–º–∏ –±–µ—Ç–æ–Ω–∞"""
        # –î–ª—è –æ–±—ä–µ–º–æ–≤ –±–µ–∑ –º–∞—Ä–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é
        for volume in volumes:
            if not volume.concrete_grade and grades:
                # –ò—â–µ–º –º–∞—Ä–∫—É –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                matching_grades = [g for g in grades if g.location == volume.construction_element]
                if matching_grades:
                    volume.concrete_grade = matching_grades[0].grade
                elif grades:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–∞—Ä–∫—É
                    volume.concrete_grade = grades[0].grade
        
        return volumes
    
    def _calculate_volume_confidence(self, volume_data: Dict, context: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –æ–±—ä–µ–º–µ"""
        confidence = 0.5
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if volume_data.get('volume_m3') or volume_data.get('area_m2'):
            confidence += 0.2
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω—ã
        if volume_data.get('unit_price'):
            confidence += 0.1
        
        # –ü–æ–≤—ã—à–∞–µ–º –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        context_keywords = ['beton', '≈æelezobeton', 'monolitick', 'konstrukce']
        context_lower = context.lower()
        
        if any(keyword in context_lower for keyword in context_keywords):
            confidence += 0.2
        
        return min(confidence, 1.0)
    
    def _get_line_context(self, lines: List[str], line_num: int, window: int = 2) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–æ–∫–∏"""
        start = max(0, line_num - window)
        end = min(len(lines), line_num + window + 1)
        
        context_lines = lines[start:end]
        return ' '.join(context_lines).strip()
    
    def group_volumes_by_element(self, volumes: List[VolumeEntry]) -> List[ElementVolumeGroup]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –æ–±—ä–µ–º—ã –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
        grouped = {}
        
        for volume in volumes:
            key = f"{volume.construction_element}_{volume.concrete_grade}"
            
            if key not in grouped:
                grouped[key] = ElementVolumeGroup(
                    element_name=volume.construction_element,
                    concrete_grade=volume.concrete_grade,
                    total_volume_m3=0.0,
                    unit_price=volume.unit_price,
                    total_cost=0.0,
                    entries=[]
                )
            
            group = grouped[key]
            group.entries.append(volume)
            
            # –°—É–º–º–∏—Ä—É–µ–º –æ–±—ä–µ–º—ã
            if volume.volume_m3:
                group.total_volume_m3 += volume.volume_m3
            
            # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            if volume.total_cost:
                group.total_cost = (group.total_cost or 0) + volume.total_cost
        
        return list(grouped.values())
    
    def create_volume_summary(self, volumes: List[VolumeEntry]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –æ–±—ä–µ–º–∞–º"""
        if not volumes:
            return {
                'total_entries': 0,
                'total_volume_m3': 0,
                'total_cost': 0,
                'grades_summary': {},
                'elements_summary': {}
            }
        
        total_volume = sum(v.volume_m3 for v in volumes if v.volume_m3)
        total_cost = sum(v.total_cost for v in volumes if v.total_cost)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–∞—Ä–∫–∞–º
        grades_summary = {}
        for volume in volumes:
            grade = volume.concrete_grade or '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –º–∞—Ä–∫–∞'
            if grade not in grades_summary:
                grades_summary[grade] = {
                    'count': 0,
                    'total_volume_m3': 0,
                    'total_cost': 0
                }
            
            grades_summary[grade]['count'] += 1
            if volume.volume_m3:
                grades_summary[grade]['total_volume_m3'] += volume.volume_m3
            if volume.total_cost:
                grades_summary[grade]['total_cost'] += volume.total_cost
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
        elements_summary = {}
        for volume in volumes:
            element = volume.construction_element or '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç'
            if element not in elements_summary:
                elements_summary[element] = {
                    'count': 0,
                    'total_volume_m3': 0,
                    'grades_used': set()
                }
            
            elements_summary[element]['count'] += 1
            if volume.volume_m3:
                elements_summary[element]['total_volume_m3'] += volume.volume_m3
            if volume.concrete_grade:
                elements_summary[element]['grades_used'].add(volume.concrete_grade)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º sets –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        for element_data in elements_summary.values():
            element_data['grades_used'] = list(element_data['grades_used'])
        
        return {
            'total_entries': len(volumes),
            'total_volume_m3': total_volume,
            'total_cost': total_cost,
            'grades_summary': grades_summary,
            'elements_summary': elements_summary
        }


# Singleton instance
_volume_analysis_agent = None

def get_volume_analysis_agent() -> VolumeAnalysisAgent:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤"""
    global _volume_analysis_agent
    if _volume_analysis_agent is None:
        _volume_analysis_agent = VolumeAnalysisAgent()
        logger.info("üìä VolumeAnalysisAgent initialized")
    return _volume_analysis_agent


# ==============================
# üß™ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ==============================

async def test_volume_analysis_agent():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤"""
    agent = get_volume_analysis_agent()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –æ–±—ä–µ–º–∞–º–∏
    test_text = """
    MOSTN√ç OPƒöRA ZE ≈ΩELEZOBETONU C30/37
    Objem betonu: 125.5 m3
    Cena: 3500 Kƒç za m3
    
    Z√ÅKLADOV√Å DESKA C25/30
    Plocha: 85.2 m2
    Tlou≈°≈•ka: 300 mm
    """
    
    print("üß™ TESTING VOLUME ANALYSIS AGENT")
    print("=" * 50)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤
    volumes = agent._extract_volumes_from_text(test_text, "test_document.pdf", [])
    summary = agent.create_volume_summary(volumes)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–º–æ–≤: {len(volumes)}")
    print(f"üèóÔ∏è –û–±—â–∏–π –æ–±—ä–µ–º: {summary['total_volume_m3']} –º¬≥")
    print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {summary['total_cost']} Kƒç")
    
    print("\nüìã –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–º–æ–≤:")
    for volume in volumes:
        print(f"  ‚Ä¢ –ú–∞—Ä–∫–∞: {volume.concrete_grade}")
        print(f"    –û–±—ä–µ–º: {volume.volume_m3} –º¬≥" if volume.volume_m3 else f"    –ü–ª–æ—â–∞–¥—å: {volume.area_m2} –º¬≤")
        print(f"    –≠–ª–µ–º–µ–Ω—Ç: {volume.construction_element}")
        print(f"    –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {volume.confidence:.2f}")
        print()

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_volume_analysis_agent())