import re
import logging
from typing import List, Dict, Any

from parsers.doc_parser import extract_text_from_docs
from parsers.smeta_parser import extract_smeta_positions

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
CONCRETE_REGEX = r"\b(C\d{1,2}/\d{1,2}|B\d{1,2})\b"
ENV_CLASSES_REGEX = r"\b(XO|XC[1-4]|XD[1-3]|XS[1-3]|XF[1-4]|XA[1-3])\b"
WORKABILITY_REGEX = r"\bS[1-5]\b"

# –û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ —Å—Ä–µ–¥—ã
ENV_CLASS_DESCRIPTION = {
    "XO": "Bez rizika koroze nebo degradace. Pro beton bez v√Ωztu≈æe v such√©m prost≈ôed√≠.",
    "XC1": "Koroze karbonatac√≠ ‚Äì such√© nebo trvale vlhk√© prost≈ôed√≠.",
    "XC2": "Koroze karbonatac√≠ ‚Äì vlhk√©, obƒças such√© prost≈ôed√≠.",
    "XC3": "Koroze karbonatac√≠ ‚Äì st≈ôednƒõ vlhk√© prost≈ôed√≠.",
    "XC4": "Koroze karbonatac√≠ ‚Äì st≈ô√≠davƒõ vlhk√© a such√© prost≈ôed√≠.",
    "XD1": "Koroze chloridy (mimo mo≈ôsk√© vody) ‚Äì st≈ôednƒõ vlhk√© prost≈ôed√≠.",
    "XD2": "Koroze chloridy ‚Äì vlhk√©, obƒças such√© prost≈ôed√≠.",
    "XD3": "Koroze chloridy ‚Äì st≈ô√≠davƒõ vlhk√© a such√© prost≈ôed√≠.",
    "XS1": "Mo≈ôsk√° s≈Øl ve vzduchu ‚Äì povrch vystaven√Ω sol√≠m.",
    "XS2": "St√°l√© pono≈ôen√≠ do mo≈ôsk√© vody.",
    "XS3": "Z√≥ny p≈ô√≠livu, odlivu a rozst≈ôik≈Ø mo≈ôsk√© vody.",
    "XF1": "Zamrz√°n√≠/rozmrazov√°n√≠ ‚Äì m√≠rnƒõ nas√°kav√© prost≈ôed√≠, bez posypov√Ωch sol√≠.",
    "XF2": "Zamrz√°n√≠/rozmrazov√°n√≠ ‚Äì m√≠rnƒõ nas√°kav√©, s posypov√Ωmi solemi.",
    "XF3": "Zamrz√°n√≠/rozmrazov√°n√≠ ‚Äì silnƒõ nas√°kav√©, bez posypov√Ωch sol√≠.",
    "XF4": "Zamrz√°n√≠/rozmrazov√°n√≠ ‚Äì silnƒõ nas√°kav√©, s posypov√Ωmi solemi.",
    "XA1": "Slabƒõ agresivn√≠ chemick√© prost≈ôed√≠.",
    "XA2": "St≈ôednƒõ agresivn√≠ chemick√© prost≈ôed√≠.",
    "XA3": "Silnƒõ agresivn√≠ chemick√© prost≈ôed√≠."
}

# –ö–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
CONTEXT_PATTERNS = {
    "z√°klady": r"z√°klad",
    "vƒõnec": r"vƒõnec",
    "piloty": r"pilot[ay]?",
    "zdi": r"p≈ô√≠ƒçka|zeƒè|stƒõna",
    "mostn√≠ konstrukce": r"most",
    "schodi≈°tƒõ": r"schodi≈°tƒõ"
}


def analyze_concrete(doc_paths: List[str], smeta_path: str) -> Dict[str, Any]:
    logging.info("üöÄ –°—Ç–∞—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ç–æ–Ω–Ω—ã—Ö –º–∞—Ä–æ–∫ –∏ —Å–º–µ—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

    try:
        doc_text = extract_text_from_docs(doc_paths).lower()
        logging.info("üìÑ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á—ë–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

        smeta = extract_smeta_positions(smeta_path)
        logging.info("üìä –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–º–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")

        concrete_data = {}

        for match in re.finditer(CONCRETE_REGEX, doc_text):
            grade = match.group(0)
            logging.debug(f"üîç –ù–∞–π–¥–µ–Ω–∞ –º–∞—Ä–∫–∞ –±–µ—Ç–æ–Ω–∞: {grade}")

            snippet = doc_text[max(0, match.start() - 150): match.end() + 150]
            env_classes = set(re.findall(ENV_CLASSES_REGEX, snippet))
            workability = set(re.findall(WORKABILITY_REGEX, snippet))

            if grade not in concrete_data:
                concrete_data[grade] = {
                    "environment_classes": set(),
                    "workability_classes": set(),
                    "used_in": set(),
                    "smeta_mentions": []
                }

            concrete_data[grade]["environment_classes"].update(env_classes)
            concrete_data[grade]["workability_classes"].update(workability)

            for ctx, pattern in CONTEXT_PATTERNS.items():
                if re.search(pattern, snippet):
                    logging.debug(f"üèóÔ∏è –ú–∞—Ä–∫–∞ {grade} –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {ctx}")
                    concrete_data[grade]["used_in"].add(ctx)

        # –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Å–º–µ—Ç–µ
        for i, row in enumerate(smeta):
            name = str(row.get("name", "")).lower().strip()
            code = str(row.get("code", ""))
            qty = row.get("qty", 0.0)
            unit = row.get("unit", "")

            for grade in concrete_data:
                if grade.lower() in name:
                    logging.debug(f"üìå –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ —Å–º–µ—Ç–µ: {grade} ‚Üí —Å—Ç—Ä–æ–∫–∞ {i + 1}")
                    concrete_data[grade]["smeta_mentions"].append({
                        "row": i + 1,
                        "description": name,
                        "code": code,
                        "qty": qty,
                        "unit": unit
                    })

        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        result = []
        for grade, data in concrete_data.items():
            result.append({
                "grade": grade,
                "used_in": sorted(data["used_in"]),
                "environment_classes": [{
                    "code": cls,
                    "description": ENV_CLASS_DESCRIPTION.get(cls, "Popis nen√≠ k dispozici.")
                } for cls in sorted(data["environment_classes"])],
                "workability_classes": sorted(data["workability_classes"]),
                "smeta_mentions": data["smeta_mentions"]
            })

        logging.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–π–¥–µ–Ω–æ {len(result)} –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞.")
        return {"concrete_summary": result}

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return {"error": str(e)}
