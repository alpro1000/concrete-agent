# parsers/doc_parser.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –±–µ–∑ textract
"""
–ü–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è textract
–ó–∞–º–µ–Ω–∞ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ doc_parser.py
"""
import os
import logging
from pathlib import Path
from typing import Optional, Dict, List

logger = logging.getLogger(__name__)

def extract_text_from_document(file_path: str) -> Optional[str]:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ textract
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: PDF, DOCX, TXT
    """
    try:
        file_path = Path(file_path)
        extension = file_path.suffix.lower()
        
        if extension == '.txt':
            return _extract_from_txt(file_path)
        elif extension == '.pdf':
            return _extract_from_pdf(file_path)
        elif extension in ['.doc', '.docx']:
            return _extract_from_docx(file_path)
        else:
            logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {extension}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ {file_path}: {e}")
        return None

def _extract_from_txt(file_path: Path) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ TXT —Ñ–∞–π–ª–æ–≤"""
    encodings = ['utf-8', 'cp1251', 'iso-8859-1', 'windows-1252']
    
    for encoding in encodings:
        try:
            with open(file_path, 'r', encoding=encoding) as f:
                return f.read()
        except UnicodeDecodeError:
            continue
    
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è {file_path}")
    return None

def _extract_from_pdf(file_path: Path) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ PDF —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pdfplumber (–ª—É—á—à–∏–π –≤—ã–±–æ—Ä)
        try:
            import pdfplumber
            with pdfplumber.open(file_path) as pdf:
                text = ""
                for page in pdf.pages:
                    page_text = page.extract_text()
                    if page_text:
                        text += page_text + "\n"
                return text
        except ImportError:
            logger.warning("pdfplumber –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # Fallback –∫ PyPDF2
        try:
            import PyPDF2
            with open(file_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                text = ""
                for page in reader.pages:
                    text += page.extract_text() + "\n"
                return text
        except ImportError:
            logger.warning("PyPDF2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        logger.error("–ù–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF")
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF: {e}")
        return None

def _extract_from_docx(file_path: Path) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ DOCX —Ñ–∞–π–ª–æ–≤"""
    try:
        from docx import Document
        doc = Document(file_path)
        text = ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
        for paragraph in doc.paragraphs:
            text += paragraph.text + "\n"
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    text += cell.text + "\t"
                text += "\n"
        
        return text
        
    except ImportError:
        logger.error("python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è DOCX: {e}")
        return None

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º API
def parse_document(file_path: str) -> Dict:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    text = extract_text_from_document(file_path)
    
    if not text:
        return {
            "success": False,
            "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ {file_path}",
            "text": "",
            "metadata": {}
        }
    
    # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    word_count = len(text.split())
    
    return {
        "success": True,
        "text": text,
        "metadata": {
            "file_path": file_path,
            "lines_count": len(lines),
            "word_count": word_count,
            "char_count": len(text)
        }
    }

def get_supported_formats() -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    return ['.txt', '.pdf', '.docx', '.doc']

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫
def check_dependencies() -> Dict[str, bool]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    deps = {
        'pdfplumber': False,
        'PyPDF2': False,
        'python-docx': False
    }
    
    for lib in deps:
        try:
            if lib == 'python-docx':
                import docx
            else:
                __import__(lib)
            deps[lib] = True
        except ImportError:
            pass
    
    return deps

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    deps = check_dependencies()
    for lib, available in deps.items():
        status = "‚úÖ" if available else "‚ùå"
        print(f"{status} {lib}")
    
    print(f"\nüìÑ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(get_supported_formats())}")
