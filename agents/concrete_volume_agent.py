"""
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤ –±–µ—Ç–æ–Ω–∞
agents/concrete_volume_agent.py

–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ –∏–∑ —Å–º–µ—Ç –∏ v√Ωkaz v√Ωmƒõr
2. –¢–æ—á–Ω–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞ —Å –æ–±—ä–µ–º–∞–º–∏
3. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
4. –û–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import re
import json
import logging
from pathlib import Path
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict

from parsers.doc_parser import DocParser
from parsers.smeta_parser import SmetaParser
from utils.czech_preprocessor import get_czech_preprocessor

logger = logging.getLogger(__name__)

@dataclass
class VolumeMatch:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –±–µ—Ç–æ–Ω–∞"""
    concrete_grade: str
    volume_m3: float
    area_m2: Optional[float]
    thickness_mm: Optional[float]
    construction_element: str
    unit_price: Optional[float]
    total_cost: Optional[float]
    unit: str  # 'm3', 'm2', 'ks', 't'
    source_line: str
    source_document: str
    line_number: int
    confidence: float
    context: str  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö —Å—Ç—Ä–æ–∫

@dataclass
class ElementVolumeGroup:
    """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–±—ä–µ–º–æ–≤ –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
    element_name: str
    concrete_grade: str
    total_volume_m3: float
    unit_price: Optional[float]
    total_cost: Optional[float]
    entries: List[VolumeMatch]
    
class ConcreteVolumeAgent:
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤ –±–µ—Ç–æ–Ω–∞
    –§–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –æ–±—ä–µ–º–æ–≤
    """
    
    def __init__(self, knowledge_base_path="knowledge_base/complete-concrete-knowledge-base.json"):
        self.doc_parser = DocParser()
        self.smeta_parser = SmetaParser()
        self.czech_preprocessor = get_czech_preprocessor()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        self.knowledge_base = self._load_knowledge_base(knowledge_base_path)
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞ –≤ —Å–º–µ—Ç–∞—Ö
        self.concrete_patterns = [
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            r'(?i)(?:beton(?:u|em|y|ov√©|ov√°)?|bet√≥nov√°?)\s+(?:t≈ô√≠dy?\s+)?((?:LC)?C\d{1,3}/\d{1,3})',
            r'(?i)((?:LC)?C\d{1,3}/\d{1,3})\s*[-‚Äì]\s*[XO][CDFASM]?\d*',
            r'(?i)bet√≥n\s+((?:LC)?C\d{1,3}/\d{1,3})',
            r'(?i)ze\s+≈æelezobetonu\s+(?:do\s+)?((?:LC)?C\d{1,3}/\d{1,3})',
            r'(?i)prost√Ω\s+beton\s+((?:LC)?C\d{1,3}/\d{1,3})',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Ç—Ä–æ–∫ —Ç–∏–ø–∞ "MOSTN√ç OPƒöRY A K≈ò√çDLA ZE ≈ΩELEZOBETONU DO C30/37"
            r'(?i)(?:mostn√≠|≈æelezobeton|ze|do)\s+.*?((?:LC)?C\d{1,3}/\d{1,3})',
        ]
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–º–æ–≤ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        self.volume_patterns = [
            # –ö—É–±–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
            r'(\d+(?:[,.]\d+)?)\s*(?:m3|m¬≥|m\^3|–∫–±\.?–º|–∫—É–±–∏—á)',
            # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –º–µ—Ç—Ä—ã 
            r'(\d+(?:[,.]\d+)?)\s*(?:m2|m¬≤|m\^2|–∫–≤\.?–º|–∫–≤–∞–¥—Ä)',
            # –®—Ç—É–∫–∏/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            r'(\d+(?:[,.]\d+)?)\s*(?:ks|—à—Ç\.?|pc\.?|kus≈Ø)',
            # –¢–æ–Ω–Ω—ã
            r'(\d+(?:[,.]\d+)?)\s*(?:t|—Ç–æ–Ω–Ω?\.?|tuny?)',
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω
        self.price_patterns = [
            r'(\d+(?:[,.]?\d+)?)\s*(?:Kƒç|CZK|–∫—á|–∫—Ä–æ–Ω)',  # –¶–µ–Ω—ã –≤ –∫—Ä–æ–Ω–∞—Ö
            r'(\d+(?:[,.]?\d+)?)\s*(?:EUR|–µ–≤—Ä–æ)',         # –¶–µ–Ω—ã –≤ –µ–≤—Ä–æ
        ]
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.construction_elements = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            'opƒõr': ['opƒõra', 'opƒõry', 'abutment', '–æ–ø–æ—Ä–∞'],
            'pil√≠≈ô': ['pil√≠≈ô', 'pil√≠≈ôe', 'pier', '—Å—Ç–æ–ª–±', '–ø–∏–ª–æ–Ω'],
            '≈ô√≠ms': ['≈ô√≠msa', '≈ô√≠ms', 'cornice', '–∫–∞—Ä–Ω–∏–∑'],
            'mostovk': ['mostovka', 'deck', '–Ω–∞—Å—Ç–∏–ª'],
            'z√°klad': ['z√°klad', 'z√°klady', 'foundation', '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç'],
            'kr√≠dl': ['k≈ô√≠dlo', 'k≈ô√≠dla', 'wing', '–∫—Ä—ã–ª–æ'],
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            'desk': ['deska', 'desky', 'slab', '–ø–ª–∏—Ç–∞'],
            'stƒõn': ['stƒõna', 'stƒõny', 'wall', '—Å—Ç–µ–Ω–∞'],
            'sloup': ['sloup', 'sloupy', 'column', '–∫–æ–ª–æ–Ω–Ω–∞'],
            'tr√°m': ['tr√°m', 'tr√°my', 'beam', '–±–∞–ª–∫–∞'],
            'schodi≈°t': ['schodi≈°tƒõ', 'stairs', '–ª–µ—Å—Ç–Ω–∏—Ü–∞'],
            'podkladn': ['podkladn√≠', 'subgrade', '–ø–æ–¥–∫–ª–∞–¥–æ—á–Ω—ã–π'],
            'mazanin': ['mazanina', 'screed', '—Å—Ç—è–∂–∫–∞'],
            'chodn√≠k': ['chodn√≠k', 'sidewalk', '—Ç—Ä–æ—Ç—É–∞—Ä'],
            'vozovk': ['vozovka', 'roadway', '–ø—Ä–æ–µ–∑–∂–∞—è —á–∞—Å—Ç—å'],
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            'prefabrik√°t': ['prefabrik√°t', 'precast', '—Å–±–æ—Ä–Ω—ã–π'],
            'monolitick': ['monolitick√Ω', 'monolithic', '–º–æ–Ω–æ–ª–∏—Ç–Ω—ã–π'],
            '≈æelezobeton': ['≈æelezobeton', 'reinforced concrete', '–∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω'],
            'prost√Ω': ['prost√Ω beton', 'plain concrete', '–ø—Ä–æ—Å—Ç–æ–π –±–µ—Ç–æ–Ω'],
        }

    def _load_knowledge_base(self, path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            if Path(path).exists():
                with open(path, "r", encoding="utf-8") as f:
                    return json.load(f)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π: {e}")
        
        return {
            "concrete_grades": ["C12/15", "C16/20", "C20/25", "C25/30", "C30/37", "C35/45", "LC25/28"],
            "exposure_classes": ["X0", "XC1", "XC2", "XC3", "XC4", "XD1", "XD2", "XD3", "XF1", "XF2", "XF3", "XF4"]
        }

    async def analyze_volumes_from_documents(self, doc_paths: List[str], 
                                           smeta_path: Optional[str] = None) -> List[VolumeMatch]:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        
        Args:
            doc_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
            smeta_path: –ü—É—Ç—å –∫ —Å–º–µ—Ç–µ –∏–ª–∏ v√Ωkaz v√Ωmƒõr
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤ –±–µ—Ç–æ–Ω–∞
        """
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ –∏–∑ {len(doc_paths)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        all_volumes = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        for doc_path in doc_paths:
            try:
                volumes = await self._analyze_single_document(doc_path)
                all_volumes.extend(volumes)
                logger.info(f"üìÑ {doc_path}: –Ω–∞–π–¥–µ–Ω–æ {len(volumes)} –æ–±—ä–µ–º–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {doc_path}: {e}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–º–µ—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        if smeta_path:
            try:
                smeta_volumes = await self._analyze_smeta_document(smeta_path)
                all_volumes.extend(smeta_volumes)
                logger.info(f"üìä –°–º–µ—Ç–∞ {smeta_path}: –Ω–∞–π–¥–µ–Ω–æ {len(smeta_volumes)} –æ–±—ä–µ–º–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–º–µ—Ç—ã {smeta_path}: {e}")
        
        # –î–µ—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
        deduplicated = self._deduplicate_volumes(all_volumes)
        
        logger.info(f"‚úÖ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(deduplicated)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–º–æ–≤")
        return deduplicated

    async def _analyze_single_document(self, doc_path: str) -> List[VolumeMatch]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ–±—ä–µ–º–æ–≤"""
        volumes = []
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
            text = await self.doc_parser.parse_document(doc_path)
            if not text or len(text.strip()) < 50:
                return volumes
                
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—à—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            processed_text = self.czech_preprocessor.process_text(text)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º—ã
            volumes = self._extract_volumes_from_text(processed_text, doc_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {doc_path}: {e}")
            
        return volumes

    async def _analyze_smeta_document(self, smeta_path: str) -> List[VolumeMatch]:
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–º–µ—Ç—ã"""
        volumes = []
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å–º–µ—Ç
            smeta_data = await self.smeta_parser.parse_smeta(smeta_path)
            
            if smeta_data.get('items'):
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã
                volumes = self._extract_volumes_from_smeta_items(smeta_data['items'], smeta_path)
            elif smeta_data.get('raw_text'):
                # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã
                volumes = self._extract_volumes_from_text(smeta_data['raw_text'], smeta_path)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–º–µ—Ç—ã {smeta_path}: {e}")
            
        return volumes

    def _extract_volumes_from_text(self, text: str, document_name: str) -> List[VolumeMatch]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—ä–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        volumes = []
        lines = text.split('\n')
        
        for line_num, line in enumerate(lines):
            line_clean = line.strip()
            if not line_clean or len(line_clean) < 10:
                continue
                
            # –ò—â–µ–º –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –≤ —Å—Ç—Ä–æ–∫–µ
            concrete_grade = self._extract_concrete_grade(line_clean)
            if not concrete_grade:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å–æ—Å–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏)
            context = self._get_line_context(lines, line_num, window=2)
            
            # –ò—â–µ–º –æ–±—ä–µ–º—ã –≤ —ç—Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö
            volume_matches = self._extract_volumes_from_line(
                line_clean, context, line_num, document_name
            )
            
            if volume_matches:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                element = self._identify_construction_element(line_clean, context)
                
                for vol_match in volume_matches:
                    vol_match.concrete_grade = concrete_grade
                    vol_match.construction_element = element
                    vol_match.context = context[:200]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    volumes.append(vol_match)
        
        return volumes

    def _extract_concrete_grade(self, line: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º"""
        for pattern in self.concrete_patterns:
            match = re.search(pattern, line, re.IGNORECASE)
            if match:
                grade = match.group(1).upper().strip()
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º–∏ —Ñ–æ—Ä–º–∞—Ç
                if re.match(r'^(?:LC)?C\d{1,3}/\d{1,3}$', grade):
                    return grade
        return None

    def _get_line_context(self, lines: List[str], line_num: int, window: int = 2) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–æ–∫–∏"""
        start = max(0, line_num - window)
        end = min(len(lines), line_num + window + 1)
        context_lines = lines[start:end]
        return ' '.join(l.strip() for l in context_lines if l.strip())

    def _extract_volumes_from_line(self, line: str, context: str, line_num: int, 
                                 document_name: str) -> List[VolumeMatch]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—ä–µ–º—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        volumes = []
        search_text = f"{line} {context}"
        
        # –ü–æ–∏—Å–∫ –º¬≥
        for match in re.finditer(self.volume_patterns[0], search_text, re.IGNORECASE):
            volume_str = match.group(1).replace(',', '.')
            try:
                volume = float(volume_str)
                if volume > 0:  # –¢–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–º—ã
                    vol_match = VolumeMatch(
                        concrete_grade="",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤—ã—à–µ
                        volume_m3=volume,
                        area_m2=None,
                        thickness_mm=None,
                        construction_element="",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤—ã—à–µ
                        unit_price=self._extract_unit_price(search_text),
                        total_cost=self._extract_total_cost(search_text),
                        unit='m3',
                        source_line=line,
                        source_document=document_name,
                        line_number=line_num + 1,
                        confidence=0.9,
                        context=""  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤—ã—à–µ
                    )
                    volumes.append(vol_match)
            except ValueError:
                continue
        
        # –ü–æ–∏—Å–∫ –º¬≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ–π —Ç–æ–ª—â–∏–Ω–æ–π
        for match in re.finditer(self.volume_patterns[1], search_text, re.IGNORECASE):
            area_str = match.group(1).replace(',', '.')
            try:
                area = float(area_str)
                if area > 0:
                    thickness = self._extract_thickness(search_text)
                    volume = area * (thickness / 1000) if thickness else 0.0
                    
                    vol_match = VolumeMatch(
                        concrete_grade="",
                        volume_m3=volume,
                        area_m2=area,
                        thickness_mm=thickness,
                        construction_element="",
                        unit_price=self._extract_unit_price(search_text),
                        total_cost=self._extract_total_cost(search_text),
                        unit='m2',
                        source_line=line,
                        source_document=document_name,
                        line_number=line_num + 1,
                        confidence=0.8 if thickness else 0.6,
                        context=""
                    )
                    volumes.append(vol_match)
            except ValueError:
                continue
        
        return volumes

    def _extract_thickness(self, text: str) -> Optional[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—â–∏–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        thickness_patterns = [
            r'(?i)(?:tl\.?|—Ç–æ–ª—â\.?|thick\.?)\s*(\d+)\s*(?:mm|–º–º)',
            r'(\d+)\s*(?:mm|–º–º)(?:\s+thick)?',
            r'(?i)(?:h|–≤—ã—Å–æ—Ç–∞)\s*=?\s*(\d+)\s*(?:mm|–º–º)',
        ]
        
        for pattern in thickness_patterns:
            match = re.search(pattern, text)
            if match:
                try:
                    return float(match.group(1))
                except ValueError:
                    continue
        return None

    def _extract_unit_price(self, text: str) -> Optional[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –µ–¥–∏–Ω–∏—á–Ω—É—é —Ü–µ–Ω—É"""
        for pattern in self.price_patterns:
            match = re.search(pattern, text)
            if match:
                try:
                    price_str = match.group(1).replace(',', '.')
                    return float(price_str)
                except ValueError:
                    continue
        return None

    def _extract_total_cost(self, text: str) -> Optional[float]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–ø—Ä–æ—â–µ - –∏—â–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞ —Å –≤–∞–ª—é—Ç–æ–π)"""
        # –ò—â–µ–º –±–æ–ª—å—à–∏–µ —Å—É–º–º—ã (–æ–±—ã—á–Ω–æ –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å > –µ–¥–∏–Ω–∏—á–Ω–æ–π)
        large_price_pattern = r'(\d{3,}(?:[,.]?\d+)?)\s*(?:Kƒç|CZK|–∫—á|–∫—Ä–æ–Ω)'
        match = re.search(large_price_pattern, text)
        if match:
            try:
                cost_str = match.group(1).replace(',', '.')
                return float(cost_str)
            except ValueError:
                pass
        return None

    def _identify_construction_element(self, line: str, context: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        full_text = f"{line} {context}".lower()
        
        # –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for element_key, synonyms in self.construction_elements.items():
            for synonym in synonyms:
                if synonym.lower() in full_text:
                    return element_key
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—â–∏–π —Ç–∏–ø
        if any(word in full_text for word in ['z√°klad', 'foundation', '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç']):
            return 'z√°klad'
        elif any(word in full_text for word in ['stƒõn', 'wall', '—Å—Ç–µ–Ω–∞']):
            return 'stƒõn'
        elif any(word in full_text for word in ['desk', 'slab', '–ø–ª–∏—Ç–∞']):
            return 'desk'
        else:
            return 'unknown'

    def _extract_volumes_from_smeta_items(self, items: List[Dict], smeta_path: str) -> List[VolumeMatch]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—ä–µ–º—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–º–µ—Ç—ã"""
        volumes = []
        
        for i, item in enumerate(items):
            if not isinstance(item, dict):
                continue
                
            # –ò—â–µ–º –º–∞—Ä–∫—É –±–µ—Ç–æ–Ω–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            description = item.get('description', '') or item.get('popis', '')
            concrete_grade = self._extract_concrete_grade(description)
            
            if not concrete_grade:
                continue
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º
            volume_m3 = 0.0
            area_m2 = None
            thickness_mm = None
            unit = item.get('unit', '') or item.get('mj', '')
            quantity = item.get('quantity', 0) or item.get('mnozstvi', 0)
            
            try:
                quantity = float(str(quantity).replace(',', '.'))
            except (ValueError, TypeError):
                quantity = 0.0
                
            if quantity <= 0:
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –µ–¥–∏–Ω–∏—Ü—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º
            unit_lower = unit.lower()
            if 'm3' in unit_lower or 'm¬≥' in unit_lower:
                volume_m3 = quantity
            elif 'm2' in unit_lower or 'm¬≤' in unit_lower:
                area_m2 = quantity
                thickness_mm = self._extract_thickness(description)
                if thickness_mm:
                    volume_m3 = area_m2 * (thickness_mm / 1000)
            else:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
                continue
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
            unit_price = None
            total_cost = None
            
            if 'unit_price' in item or 'jednotkova_cena' in item:
                try:
                    price_val = item.get('unit_price') or item.get('jednotkova_cena')
                    unit_price = float(str(price_val).replace(',', '.'))
                except (ValueError, TypeError):
                    pass
                    
            if 'total_cost' in item or 'celkem' in item:
                try:
                    cost_val = item.get('total_cost') or item.get('celkem')
                    total_cost = float(str(cost_val).replace(',', '.'))
                except (ValueError, TypeError):
                    pass
                    
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            element = self._identify_construction_element(description, "")
            
            vol_match = VolumeMatch(
                concrete_grade=concrete_grade,
                volume_m3=volume_m3,
                area_m2=area_m2,
                thickness_mm=thickness_mm,
                construction_element=element,
                unit_price=unit_price,
                total_cost=total_cost,
                unit=unit,
                source_line=description,
                source_document=smeta_path,
                line_number=i + 1,
                confidence=0.95,  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                context=description
            )
            
            volumes.append(vol_match)
            
        return volumes

    def _deduplicate_volumes(self, volumes: List[VolumeMatch]) -> List[VolumeMatch]:
        """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –æ–±—ä–µ–º–æ–≤"""
        if not volumes:
            return volumes
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
        groups = {}
        for vol in volumes:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            key = (
                vol.concrete_grade,
                vol.construction_element,
                round(vol.volume_m3, 2),  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                vol.source_document
            )
            
            if key not in groups:
                groups[key] = []
            groups[key].append(vol)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ª—É—á—à–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã (—Å –Ω–∞–∏–≤—ã—Å—à–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é)
        deduplicated = []
        for group in groups.values():
            best_match = max(group, key=lambda x: x.confidence)
            deduplicated.append(best_match)
        
        return deduplicated

    def group_volumes_by_grade(self, volumes: List[VolumeMatch]) -> Dict[str, ElementVolumeGroup]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –æ–±—ä–µ–º—ã –ø–æ –º–∞—Ä–∫–∞–º –±–µ—Ç–æ–Ω–∞ –∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
        groups = {}
        
        for volume in volumes:
            key = f"{volume.concrete_grade}_{volume.construction_element}"
            
            if key not in groups:
                groups[key] = ElementVolumeGroup(
                    element_name=volume.construction_element,
                    concrete_grade=volume.concrete_grade,
                    total_volume_m3=0.0,
                    unit_price=volume.unit_price,
                    total_cost=0.0,
                    entries=[]
                )
            
            group = groups[key]
            group.total_volume_m3 += volume.volume_m3
            group.entries.append(volume)
            
            if volume.total_cost:
                group.total_cost = (group.total_cost or 0) + volume.total_cost
        
        return groups

    def create_volume_summary(self, volumes: List[VolumeMatch]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –æ–±—ä–µ–º–∞–º"""
        if not volumes:
            return {
                'total_grades_found': 0,
                'total_volume_m3': 0.0,
                'total_cost': 0.0,
                'grades_summary': {},
                'elements_summary': {}
            }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        grouped = self.group_volumes_by_grade(volumes)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫–∏
        grades_summary = {}
        elements_summary = {}
        total_volume = 0.0
        total_cost = 0.0
        
        for group in grouped.values():
            grade = group.concrete_grade
            element = group.element_name
            
            # –°–≤–æ–¥–∫–∞ –ø–æ –º–∞—Ä–∫–∞–º
            if grade not in grades_summary:
                grades_summary[grade] = {
                    'total_volume_m3': 0.0,
                    'total_cost': 0.0,
                    'elements': []
                }
            
            grades_summary[grade]['total_volume_m3'] += group.total_volume_m3
            grades_summary[grade]['total_cost'] += (group.total_cost or 0)
            grades_summary[grade]['elements'].append({
                'element': element,
                'volume_m3': group.total_volume_m3,
                'cost': group.total_cost
            })
            
            # –°–≤–æ–¥–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
            if element not in elements_summary:
                elements_summary[element] = {
                    'total_volume_m3': 0.0,
                    'grades': []
                }
            
            elements_summary[element]['total_volume_m3'] += group.total_volume_m3
            elements_summary[element]['grades'].append({
                'grade': grade,
                'volume_m3': group.total_volume_m3
            })
            
            total_volume += group.total_volume_m3
            total_cost += (group.total_cost or 0)
        
        return {
            'total_grades_found': len(grades_summary),
            'total_volume_m3': round(total_volume, 2),
            'total_cost': round(total_cost, 2),
            'grades_summary': grades_summary,
            'elements_summary': elements_summary,
            'detailed_entries': [asdict(vol) for vol in volumes]
        }

# Singleton instance
_volume_agent = None

def get_concrete_volume_agent() -> ConcreteVolumeAgent:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–≥–µ–Ω—Ç–∞ –æ–±—ä–µ–º–æ–≤"""
    global _volume_agent
    if _volume_agent is None:
        _volume_agent = ConcreteVolumeAgent()
        logger.info("üèóÔ∏è ConcreteVolumeAgent initialized")
    return _volume_agent


# ==============================
# üß™ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# ==============================

async def test_volume_agent():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –æ–±—ä–µ–º–æ–≤"""
    agent = get_concrete_volume_agent()
    
    test_text = """
    801.001.001 Beton prost√Ω C12/15-X0 125,50 m3 2500 Kƒç 313750 Kƒç
    801.002.001 ≈Ωelezobeton C25/30-XC2 z√°klady 85,25 m3 3200 Kƒç 272800 Kƒç
    801.003.001 Mazanina C16/20 tl. 120 mm 450,00 m2 850 Kƒç 382500 Kƒç
    802.001.001 Betonov√° deska C30/37-XC4 200,00 m2 tl. 250 mm 1200 Kƒç 240000 Kƒç
    MOSTN√ç OPƒöRY A K≈ò√çDLA ZE ≈ΩELEZOBETONU DO C30/37 255,7 m3
    ≈ò√çMS ZE ≈ΩELEZOBETONU DO C30/37 176,768 m3
    """
    
    volumes = agent._extract_volumes_from_text(test_text, "test_smeta.txt")
    summary = agent.create_volume_summary(volumes)
    
    print("üß™ TESTING CONCRETE VOLUME AGENT")
    print("=" * 50)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–º–æ–≤: {len(volumes)}")
    print(f"üèóÔ∏è –ú–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞: {summary['total_grades_found']}")
    print(f"üìê –û–±—â–∏–π –æ–±—ä–µ–º: {summary['total_volume_m3']} –º¬≥")
    print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {summary['total_cost']} Kƒç")
    
    print("\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –º–∞—Ä–∫–∞–º:")
    for grade, data in summary['grades_summary'].items():
        print(f"  {grade}: {data['total_volume_m3']} –º¬≥")
        for elem in data['elements']:
            print(f"    - {elem['element']}: {elem['volume_m3']} –º¬≥")

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_volume_agent())