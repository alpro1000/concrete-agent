"""
DrawingVolumeAgent - –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ –∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π –∏ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
agents/drawing_volume_agent.py

–ë—É–¥—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
- MinerU –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF-—á–µ—Ä—Ç–µ–∂–µ–π
- DocStrange –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —á–µ—Ä—Ç–µ–∂–µ–π
- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ API-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤

–ü–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫–∏ —Å fallback –ª–æ–≥–∏–∫–æ–π.
"""

import logging
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from pathlib import Path

logger = logging.getLogger(__name__)

@dataclass
class GeometricElement:
    """–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å —á–µ—Ä—Ç–µ–∂–∞"""
    element_type: str  # "rectangle", "circle", "line", etc.
    dimensions: Dict[str, float]  # {"width": 100, "height": 50, "diameter": 25}
    coordinates: Dict[str, float]  # {"x": 0, "y": 0, "z": 0}
    material_ref: Optional[str] = None
    volume_m3: Optional[float] = None
    area_m2: Optional[float] = None
    confidence: float = 0.0

@dataclass
class DrawingAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä—Ç–µ–∂–∞"""
    drawing_file: str
    elements_found: int
    total_volume_m3: float
    total_area_m2: float
    elements: List[GeometricElement]
    analysis_method: str
    success: bool
    error_message: Optional[str] = None

class DrawingVolumeAgent:
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤ –∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π –∏ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.supported_formats = ['.pdf', '.dwg', '.dxf']
        self.external_services = {
            'mineru': self._check_mineru_availability(),
            'docstrange': self._check_docstrange_availability()
        }
        
        logger.info("üìê DrawingVolumeAgent initialized")
        logger.info(f"üîß External services: {self.external_services}")
    
    def _check_mineru_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ MinerU"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ API
            # import mineru_client
            # return mineru_client.is_available()
            return False  # –ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        except Exception as e:
            logger.debug(f"MinerU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    def _check_docstrange_availability(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ DocStrange"""
        try:
            # –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ API
            # import docstrange_client
            # return docstrange_client.is_available()
            return False  # –ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        except Exception as e:
            logger.debug(f"DocStrange –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def analyze_drawing_volumes(self, drawing_paths: List[str]) -> List[DrawingAnalysisResult]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–º—ã –∏ –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π
        
        Args:
            drawing_paths: –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —á–µ—Ä—Ç–µ–∂–µ–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ—Ä—Ç–µ–∂–∞
        """
        logger.info(f"üìê –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ {len(drawing_paths)} —á–µ—Ä—Ç–µ–∂–µ–π")
        
        results = []
        
        for drawing_path in drawing_paths:
            result = await self._analyze_single_drawing(drawing_path)
            results.append(result)
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return results
    
    async def _analyze_single_drawing(self, drawing_path: str) -> DrawingAnalysisResult:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —á–µ—Ä—Ç–µ–∂–∞"""
        file_path = Path(drawing_path)
        
        if not file_path.exists():
            return DrawingAnalysisResult(
                drawing_file=drawing_path,
                elements_found=0,
                total_volume_m3=0.0,
                total_area_m2=0.0,
                elements=[],
                analysis_method="error",
                success=False,
                error_message=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {drawing_path}"
            )
        
        file_ext = file_path.suffix.lower()
        
        if file_ext not in self.supported_formats:
            return DrawingAnalysisResult(
                drawing_file=drawing_path,
                elements_found=0,
                total_volume_m3=0.0,
                total_area_m2=0.0,
                elements=[],
                analysis_method="unsupported_format",
                success=False,
                error_message=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {file_ext}"
            )
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
        if file_ext == '.pdf':
            if self.external_services['mineru']:
                return await self._analyze_with_mineru(drawing_path)
            else:
                return await self._analyze_pdf_fallback(drawing_path)
        
        elif file_ext in ['.dwg', '.dxf']:
            if self.external_services['docstrange']:
                return await self._analyze_with_docstrange(drawing_path)
            else:
                return await self._analyze_cad_fallback(drawing_path)
        
        else:
            return DrawingAnalysisResult(
                drawing_file=drawing_path,
                elements_found=0,
                total_volume_m3=0.0,
                total_area_m2=0.0,
                elements=[],
                analysis_method="fallback",
                success=False,
                error_message="–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã"
            )
    
    async def _analyze_with_mineru(self, drawing_path: str) -> DrawingAnalysisResult:
        """–ê–Ω–∞–ª–∏–∑ PDF —Å –ø–æ–º–æ—â—å—é MinerU (–±—É–¥—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ {drawing_path} —Å –ø–æ–º–æ—â—å—é MinerU")
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ MinerU API
            # mineru_result = await mineru_client.analyze_pdf(drawing_path)
            # elements = self._parse_mineru_result(mineru_result)
            
            # –ó–∞–≥–ª—É—à–∫–∞
            elements = [
                GeometricElement(
                    element_type="rectangle",
                    dimensions={"width": 500, "height": 300, "thickness": 200},
                    coordinates={"x": 0, "y": 0, "z": 0},
                    volume_m3=30.0,
                    area_m2=150.0,
                    confidence=0.8
                )
            ]
            
            return DrawingAnalysisResult(
                drawing_file=drawing_path,
                elements_found=len(elements),
                total_volume_m3=sum(e.volume_m3 or 0 for e in elements),
                total_area_m2=sum(e.area_m2 or 0 for e in elements),
                elements=elements,
                analysis_method="mineru",
                success=True
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å MinerU: {e}")
            return await self._analyze_pdf_fallback(drawing_path)
    
    async def _analyze_with_docstrange(self, drawing_path: str) -> DrawingAnalysisResult:
        """–ê–Ω–∞–ª–∏–∑ CAD —Å –ø–æ–º–æ—â—å—é DocStrange (–±—É–¥—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)"""
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ {drawing_path} —Å –ø–æ–º–æ—â—å—é DocStrange")
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ DocStrange API
            # docstrange_result = await docstrange_client.analyze_cad(drawing_path)
            # elements = self._parse_docstrange_result(docstrange_result)
            
            # –ó–∞–≥–ª—É—à–∫–∞
            elements = [
                GeometricElement(
                    element_type="beam",
                    dimensions={"length": 6000, "width": 300, "height": 500},
                    coordinates={"x": 0, "y": 0, "z": 0},
                    volume_m3=0.9,
                    confidence=0.9
                )
            ]
            
            return DrawingAnalysisResult(
                drawing_file=drawing_path,
                elements_found=len(elements),
                total_volume_m3=sum(e.volume_m3 or 0 for e in elements),
                total_area_m2=sum(e.area_m2 or 0 for e in elements),
                elements=elements,
                analysis_method="docstrange",
                success=True
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å DocStrange: {e}")
            return await self._analyze_cad_fallback(drawing_path)
    
    async def _analyze_pdf_fallback(self, drawing_path: str) -> DrawingAnalysisResult:
        """Fallback –∞–Ω–∞–ª–∏–∑ PDF (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤)"""
        logger.info(f"üìÑ Fallback –∞–Ω–∞–ª–∏–∑ PDF: {drawing_path}")
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ - –∏—â–µ–º PDF —Å –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ç–µ–∫—Å—Ç–µ
        try:
            import pdfplumber
            
            elements = []
            with pdfplumber.open(drawing_path) as pdf:
                for page in pdf.pages:
                    text = page.extract_text() or ""
                    
                    # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
                    import re
                    dimension_patterns = [
                        r'(\d+(?:[.,]\d+)?)\s*[x—Ö√ó]\s*(\d+(?:[.,]\d+)?)\s*[x—Ö√ó]?\s*(\d+(?:[.,]\d+)?)?',  # 100x200x300
                        r'(?:d√©lka|length)[:\s]*(\d+(?:[.,]\d+)?)',  # d√©lka: 500
                        r'(?:≈°√≠≈ôka|width)[:\s]*(\d+(?:[.,]\d+)?)',   # ≈°√≠≈ôka: 300
                        r'(?:v√Ω≈°ka|height)[:\s]*(\d+(?:[.,]\d+)?)',  # v√Ω≈°ka: 200
                    ]
                    
                    for pattern in dimension_patterns:
                        matches = re.finditer(pattern, text, re.IGNORECASE)
                        for match in matches:
                            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
                            dims = [float(g.replace(',', '.')) for g in match.groups() if g]
                            if len(dims) >= 2:
                                element = GeometricElement(
                                    element_type="detected_element",
                                    dimensions={"width": dims[0], "height": dims[1], 
                                              "depth": dims[2] if len(dims) > 2 else 100},
                                    coordinates={"x": 0, "y": 0, "z": 0},
                                    volume_m3=(dims[0] * dims[1] * (dims[2] if len(dims) > 2 else 100)) / 1000000,  # –º–º –≤ –º¬≥
                                    confidence=0.6
                                )
                                elements.append(element)
            
            return DrawingAnalysisResult(
                drawing_file=drawing_path,
                elements_found=len(elements),
                total_volume_m3=sum(e.volume_m3 or 0 for e in elements),
                total_area_m2=sum(e.area_m2 or 0 for e in elements),
                elements=elements,
                analysis_method="pdf_fallback",
                success=True
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback –∞–Ω–∞–ª–∏–∑–∞ PDF: {e}")
            return DrawingAnalysisResult(
                drawing_file=drawing_path,
                elements_found=0,
                total_volume_m3=0.0,
                total_area_m2=0.0,
                elements=[],
                analysis_method="pdf_fallback",
                success=False,
                error_message=str(e)
            )
    
    async def _analyze_cad_fallback(self, drawing_path: str) -> DrawingAnalysisResult:
        """Fallback –∞–Ω–∞–ª–∏–∑ CAD (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤)"""
        logger.info(f"üìê CAD —Ñ–∞–π–ª—ã —Ç—Ä–µ–±—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {drawing_path}")
        
        return DrawingAnalysisResult(
            drawing_file=drawing_path,
            elements_found=0,
            total_volume_m3=0.0,
            total_area_m2=0.0,
            elements=[],
            analysis_method="cad_fallback",
            success=False,
            error_message="CAD –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è DocStrange API"
        )
    
    def create_drawing_summary(self, results: List[DrawingAnalysisResult]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä—Ç–µ–∂–µ–π"""
        total_elements = sum(r.elements_found for r in results)
        total_volume = sum(r.total_volume_m3 for r in results)
        total_area = sum(r.total_area_m2 for r in results)
        successful_analyses = sum(1 for r in results if r.success)
        
        return {
            "total_drawings": len(results),
            "successful_analyses": successful_analyses,
            "total_elements_found": total_elements,
            "total_volume_m3": total_volume,
            "total_area_m2": total_area,
            "analysis_methods": list(set(r.analysis_method for r in results)),
            "external_services_status": self.external_services,
            "drawings": [
                {
                    "file": r.drawing_file,
                    "success": r.success,
                    "elements": r.elements_found,
                    "volume_m3": r.total_volume_m3,
                    "method": r.analysis_method,
                    "error": r.error_message
                }
                for r in results
            ]
        }

# Singleton instance
_drawing_volume_agent = None

def get_drawing_volume_agent() -> DrawingVolumeAgent:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–≥–µ–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä—Ç–µ–∂–µ–π"""
    global _drawing_volume_agent
    if _drawing_volume_agent is None:
        _drawing_volume_agent = DrawingVolumeAgent()
        logger.info("üìê DrawingVolumeAgent initialized")
    return _drawing_volume_agent

# –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def test_drawing_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä—Ç–µ–∂–µ–π"""
    agent = get_drawing_volume_agent()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF
    import tempfile
    temp_dir = tempfile.mkdtemp()
    test_pdf = f"{temp_dir}/test_drawing.pdf"
    
    # –ü—Ä–æ—Å—Ç–æ–π PDF —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
    from fpdf import FPDF
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Technical Drawing", ln=1, align="C")
    pdf.cell(200, 10, txt="Beam: 6000 x 300 x 500 mm", ln=1)
    pdf.cell(200, 10, txt="Column: 400 x 400 x 3000 mm", ln=1)
    pdf.output(test_pdf)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    results = await agent.analyze_drawing_volumes([test_pdf])
    summary = agent.create_drawing_summary(results)
    
    print("üìê DRAWING ANALYSIS TEST")
    print("=" * 40)
    print(f"Total drawings: {summary['total_drawings']}")
    print(f"Successful analyses: {summary['successful_analyses']}")
    print(f"Total volume: {summary['total_volume_m3']} m¬≥")
    print(f"Methods used: {summary['analysis_methods']}")
    
    # –û—á–∏—Å—Ç–∫–∞
    import shutil
    shutil.rmtree(temp_dir)

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_drawing_analysis())