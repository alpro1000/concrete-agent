#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ç–æ–Ω–∞ —Å –æ–±—ä–µ–º–∞–º–∏ –∏ –æ—Ç—á–µ—Ç–∞–º–∏
analyze_concrete_complete.py
"""

import asyncio
import argparse
import sys
import logging
from pathlib import Path
from typing import List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('concrete_analysis.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

def setup_arguments():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ—Ç–æ–Ω–∞ —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –æ–±—ä–µ–º–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:
    python analyze_concrete_complete.py --docs file1.pdf file2.pdf

  –ê–Ω–∞–ª–∏–∑ —Å–æ —Å–º–µ—Ç–æ–π:
    python analyze_concrete_complete.py --docs *.pdf --smeta smeta.xlsx

  –ê–Ω–∞–ª–∏–∑ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:
    python analyze_concrete_complete.py --docs *.pdf --language ru --no-claude

  –¢–æ–ª—å–∫–æ –æ–±—ä–µ–º—ã –±–µ–∑ Claude:
    python analyze_concrete_complete.py --docs *.pdf --smeta vykaz.pdf --language en --no-claude
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument(
        '--docs', '--documents',
        nargs='+',
        required=True,
        help='–°–ø–∏—Å–æ–∫ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
    )
    
    parser.add_argument(
        '--smeta', '--budget',
        type=str,
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–º–µ—Ç—ã –∏–ª–∏ v√Ωkaz v√Ωmƒõr (PDF, XLSX, DOCX)'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    parser.add_argument(
        '--language', '-l',
        choices=['cz', 'en', 'ru'],
        default='cz',
        help='–Ø–∑—ã–∫ –æ—Ç—á–µ—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: cz)'
    )
    
    parser.add_argument(
        '--claude-mode',
        choices=['enhancement', 'primary'],
        default='enhancement',
        help='–†–µ–∂–∏–º Claude AI (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: enhancement)'
    )
    
    parser.add_argument(
        '--no-claude',
        action='store_true',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Claude AI'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≤–æ–¥–∞
    parser.add_argument(
        '--output', '-o',
        type=str,
        default='outputs',
        help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: outputs)'
    )
    
    parser.add_argument(
        '--quiet', '-q',
        action='store_true',
        help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å'
    )
    
    return parser

def validate_files(doc_paths: List[str], smeta_path: Optional[str] = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
    missing_files = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    for doc_path in doc_paths:
        if not Path(doc_path).exists():
            missing_files.append(doc_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ç—É
    if smeta_path and not Path(smeta_path).exists():
        missing_files.append(smeta_path)
    
    if missing_files:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã:")
        for file in missing_files:
            logger.error(f"  - {file}")
        return False
    
    return True

def print_analysis_summary(result: dict, language: str = 'cz'):
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞"""
    
    lang_labels = {
        'cz': {
            'found_grades': 'Nalezen√© t≈ô√≠dy betonu',
            'total_volume': 'Celkov√Ω objem',
            'volume_entries': 'Pozice s objemy',
            'documents': 'Zpracovan√© dokumenty',
            'method': 'Metoda anal√Ωzy',
            'reports_saved': 'Ulo≈æen√© reporty'
        },
        'en': {
            'found_grades': 'Found concrete grades',
            'total_volume': 'Total volume',
            'volume_entries': 'Volume entries',
            'documents': 'Processed documents',
            'method': 'Analysis method',
            'reports_saved': 'Saved reports'
        },
        'ru': {
            'found_grades': '–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞',
            'total_volume': '–û–±—â–∏–π –æ–±—ä–µ–º',
            'volume_entries': '–ü–æ–∑–∏—Ü–∏–∏ —Å –æ–±—ä–µ–º–∞–º–∏',
            'documents': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã',
            'method': '–ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞',
            'reports_saved': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã'
        }
    }
    
    labels = lang_labels.get(language, lang_labels['cz'])
    
    print("\n" + "="*60)
    print(f"üìä {labels['found_grades'].upper()}")
    print("="*60)
    
    # –ú–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞
    concrete_summary = result.get('concrete_summary', [])
    total_volume = 0
    
    for item in concrete_summary:
        grade = item.get('grade', 'N/A')
        volume = item.get('total_volume_m3', 0)
        location = item.get('location', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
        
        volume_str = f"{volume:.2f} m¬≥" if volume > 0 else "–æ–±—ä–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print(f"  {grade}: {volume_str} ({location})")
        
        if volume > 0:
            total_volume += volume
    
    print("-"*60)
    print(f"üìè {labels['total_volume']}: {total_volume:.2f} m¬≥")
    print(f"üìä {labels['volume_entries']}: {result.get('volume_entries_found', 0)}")
    print(f"üìÑ {labels['documents']}: {len(result.get('processed_documents', []))}")
    print(f"üîß {labels['method']}: {result.get('analysis_method', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
    saved_reports = result.get('saved_reports', {})
    if saved_reports:
        print(f"\nüíæ {labels['reports_saved']}:")
        for report_type, file_path in saved_reports.items():
            print(f"  - {report_type}: {file_path}")
    
    print("="*60)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = setup_arguments()
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.quiet:
        logging.getLogger().setLevel(logging.WARNING)
    elif args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    if not validate_files(args.docs, args.smeta):
        sys.exit(1)
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ç–æ–Ω–∞")
    logger.info(f"   –î–æ–∫—É–º–µ–Ω—Ç—ã: {len(args.docs)} —Ñ–∞–π–ª–æ–≤")
    logger.info(f"   –°–º–µ—Ç–∞: {'–µ—Å—Ç—å' if args.smeta else '–Ω–µ—Ç'}")
    logger.info(f"   –Ø–∑—ã–∫ –æ—Ç—á–µ—Ç–æ–≤: {args.language}")
    logger.info(f"   Claude AI: {'–≤—ã–∫–ª—é—á–µ–Ω' if args.no_claude else '–≤–∫–ª—é—á–µ–Ω'}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞
        from agents.concrete_agent import analyze_concrete_with_volumes
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        result = await analyze_concrete_with_volumes(
            doc_paths=args.docs,
            smeta_path=args.smeta,
            use_claude=not args.no_claude,
            claude_mode=args.claude_mode,
            language=args.language
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        if not result.get('success', True):
            logger.error(f"‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            sys.exit(1)
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        if not args.quiet:
            print_analysis_summary(result, args.language)
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        concrete_count = len(result.get('concrete_summary', []))
        volume_count = result.get('volume_entries_found', 0)
        
        if concrete_count == 0:
            logger.warning("‚ö†Ô∏è –ú–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        if volume_count == 0:
            logger.warning("‚ö†Ô∏è –û–±—ä–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Å–º–µ—Ç –∏–ª–∏ v√Ωkaz v√Ωmƒõr")
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ —Å–∏—Å—Ç–µ–º—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        sys.exit(1)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
