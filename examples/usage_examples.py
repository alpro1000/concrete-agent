#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Concrete Agent API
usage_examples.py

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π Concrete Agent.
"""

import asyncio
import requests
import json
from pathlib import Path
import time

# –ë–∞–∑–æ–≤—ã–π URL API (–∏–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
BASE_URL = "http://localhost:8000"

def check_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"‚ùå API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: uvicorn app.main:app --reload")
        return False

def example_concrete_analysis():
    """–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ç–æ–Ω–∞ —á–µ—Ä–µ–∑ API"""
    print("\nüîç –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ç–æ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    test_file = Path("examples/test_document.txt")
    if not test_file.exists():
        test_file.parent.mkdir(exist_ok=True)
        test_file.write_text("""
        –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ó–ê–î–ê–ù–ò–ï
        
        –ü—Ä–æ–µ–∫—Ç: –ñ–∏–ª–æ–π –¥–æ–º
        
        –ú–∞—Ä–∫–∏ –±–µ—Ç–æ–Ω–∞:
        - –§—É–Ω–¥–∞–º–µ–Ω—Ç: C25/30 XC2 - 150 –º¬≥
        - –°—Ç–µ–Ω—ã –ø–æ–¥–≤–∞–ª–∞: C30/37 XF1 - 200 –º¬≥
        - –ö–æ–ª–æ–Ω–Ω—ã: C35/45 XC3 - 75 –º¬≥
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–µ—Ç–æ–Ω—É:
        - –ö–ª–∞—Å—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –Ω–µ –º–µ–Ω–µ–µ C25/30
        - –ú–æ—Ä–æ–∑–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å F150
        - –í–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å W8
        """, encoding='utf-8')
        print(f"üìù –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    
    try:
        with open(test_file, 'rb') as f:
            files = {
                'docs': ('test_document.txt', f, 'text/plain')
            }
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑...")
            response = requests.post(
                f"{BASE_URL}/analyze/concrete",
                files=files,
                timeout=30
            )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞: {len(result.get('concrete_summary', []))}")
            
            # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if result.get('concrete_summary'):
                print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:")
                for i, item in enumerate(result['concrete_summary'], 1):
                    print(f"  {i}. –ú–∞—Ä–∫–∞: {item.get('grade', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
                    print(f"     –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: {', '.join(item.get('locations', ['–ù–µ —É–∫–∞–∑–∞–Ω–æ']))}")
                    if 'volume_m3' in item:
                        print(f"     –û–±—ä–µ–º: {item['volume_m3']} –º¬≥")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            
    except FileNotFoundError:
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def example_file_upload():
    """–ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    print("\nüì§ –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –±–µ—Ç–æ–Ω–æ–º
    test_files = []
    
    # –¢–µ—Å—Ç–æ–≤—ã–π PDF –∫–æ–Ω—Ç–µ–Ω—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–µ PDF)
    spec_file = Path("examples/specifications.txt")
    if not spec_file.exists():
        spec_file.write_text("""
        –°–ü–ï–¶–ò–§–ò–ö–ê–¶–ò–Ø –ú–ê–¢–ï–†–ò–ê–õ–û–í
        
        1. –ë–µ—Ç–æ–Ω —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã–π
           –ú–∞—Ä–∫–∞: B25 (C30/37)
           –û–±—ä–µ–º: 180 –º¬≥
           –ö–ª–∞—Å—Å –ø–æ –º–æ—Ä–æ–∑–æ—Å—Ç–æ–π–∫–æ—Å—Ç–∏: F150
        
        2. –ë–µ—Ç–æ–Ω –¥–ª—è –∫–æ–ª–æ–Ω–Ω
           –ú–∞—Ä–∫–∞: B30 (C35/45)  
           –û–±—ä–µ–º: 85 –º¬≥
           –ö–ª–∞—Å—Å –ø–æ –º–æ—Ä–æ–∑–æ—Å—Ç–æ–π–∫–æ—Å—Ç–∏: F200
        """, encoding='utf-8')
        test_files.append(spec_file)
    
    try:
        files_to_upload = []
        for file_path in test_files:
            files_to_upload.append(
                ('files', (file_path.name, open(file_path, 'rb'), 'text/plain'))
            )
        
        response = requests.post(
            f"{BASE_URL}/upload/files",
            files=files_to_upload
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for _, (_, file_obj, _) in files_to_upload:
            file_obj.close()
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result.get('uploaded', []))}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def example_status_check():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    try:
        response = requests.get(f"{BASE_URL}/status")
        if response.status_code == 200:
            status = response.json()
            print("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω:")
            print(f"  API —Å—Ç–∞—Ç—É—Å: {status.get('api_status', 'unknown')}")
            print(f"  Claude –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if status.get('claude_available') else '‚ùå'}")
            
            deps = status.get('dependencies', {})
            print("  –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
            for dep, available in deps.items():
                icon = "‚úÖ" if available else "‚ùå"
                print(f"    {icon} {dep}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def example_command_line_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
    print("\nüíª –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É:")
    
    examples = [
        {
            "title": "–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞",
            "command": "python analyze_concrete_complete.py --docs project.pdf"
        },
        {
            "title": "–ê–Ω–∞–ª–∏–∑ —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º",
            "command": "python analyze_concrete_complete.py --docs project.pdf --language ru"
        },
        {
            "title": "–ê–Ω–∞–ª–∏–∑ —Å–æ —Å–º–µ—Ç–æ–π",
            "command": "python analyze_concrete_complete.py --docs project.pdf --smeta budget.xlsx"
        },
        {
            "title": "–ê–Ω–∞–ª–∏–∑ –±–µ–∑ Claude AI",
            "command": "python analyze_concrete_complete.py --docs project.pdf --no-claude"
        },
        {
            "title": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥",
            "command": "python analyze_concrete_complete.py --docs project.pdf --verbose"
        }
    ]
    
    for example in examples:
        print(f"\n  üìù {example['title']}:")
        print(f"     {example['command']}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("üß± Concrete Agent - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    if not check_api_health():
        print("\nüí° –î–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
        print("   uvicorn app.main:app --reload --port 8000")
        print("\nüìñ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É:")
        example_command_line_usage()
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    example_status_check()
    example_file_upload()
    example_concrete_analysis()
    example_command_line_usage()
    
    print("\n" + "=" * 50)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìö –ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ: USER_MANUAL.md")
    print("üåê API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")

if __name__ == "__main__":
    main()