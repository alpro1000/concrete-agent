#!/usr/bin/env python3
# test_claude_integration.py
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Claude API
"""
import os
import sys
import asyncio
import logging
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_claude_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç Claude API"""
    try:
        from utils.claude_client import get_claude_client
        
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Claude...")
        
        claude_client = get_claude_client()
        if not claude_client:
            logger.error("‚ùå Claude –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        response = await asyncio.to_thread(
            claude_client.client.messages.create,
            model="claude-3-sonnet-20240229",
            max_tokens=50,
            messages=[{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ '–ü—Ä–∏–≤–µ—Ç –∏–∑ Claude!'"}]
        )
        
        result_text = response.content[0].text
        logger.info(f"‚úÖ Claude –æ—Ç–≤–µ—Ç–∏–ª: {result_text}")
        logger.info(f"üìä –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {response.usage.input_tokens + response.usage.output_tokens}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ Claude: {e}")
        return False

async def test_concrete_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ç–æ–Ω–∞"""
    try:
        from utils.claude_client import get_claude_client
        
        logger.info("üèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ç–æ–Ω–∞...")
        
        claude_client = get_claude_client()
        if not claude_client:
            return False
        
        test_text = """
        Technick√° zpr√°va:
        V projektu se pou≈æ√≠v√° beton C25/30 XC1 pro z√°klady.
        Pro vƒõnce se pou≈æije beton C30/37 XF1.
        Stƒõny budou z betonu B20.
        Schodi≈°tƒõ - beton C25/30.
        """
        
        test_smeta = [
            {"description": "Beton C25/30 pro z√°klady", "qty": 15.5, "unit": "m3", "code": "801.1"},
            {"description": "Beton C30/37 pro vƒõnce", "qty": 5.2, "unit": "m3", "code": "801.2"}
        ]
        
        result = await claude_client.analyze_concrete_with_claude(test_text, test_smeta)
        
        if result.get("success"):
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –±–µ—Ç–æ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            analysis = result.get("claude_analysis", {})
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞: {len(analysis.get('concrete_grades', []))}")
            logger.info(f"üéØ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result.get('tokens_used', 0)}")
            return True
        else:
            logger.error("‚ùå –ê–Ω–∞–ª–∏–∑ –±–µ—Ç–æ–Ω–∞ –Ω–µ—É—Å–ø–µ—à–µ–Ω")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–µ—Ç–æ–Ω–∞: {e}")
        return False

async def test_hybrid_analysis():
    """–¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        test_text = """
        Projekt stavby:
        Pou≈æ√≠v√° se beton C25/30 XC1 pro z√°kladov√© konstrukce.
        Vƒõnce z betonu C30/37 XF1.
        Stƒõny budou provedeny z betonu B20.
        """
        
        import tempfile
        import os
        
        with tempfile.TemporaryDirectory() as tmpdir:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            doc_path = os.path.join(tmpdir, "test_doc.txt")
            with open(doc_path, "w", encoding="utf-8") as f:
                f.write(test_text)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–º–µ—Ç—É
            smeta_path = os.path.join(tmpdir, "test_smeta.txt")
            with open(smeta_path, "w", encoding="utf-8") as f:
                f.write("Beton C25/30 pro z√°klady - 15.5 m3\nBeton C30/37 pro vƒõnce - 5.2 m3")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã
            from agents.concrete_agent_hybrid import analyze_concrete
            
            modes = ["fallback", "enhancement", "primary"]
            results = {}
            
            for mode in modes:
                try:
                    logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞: {mode}")
                    start_time = asyncio.get_event_loop().time()
                    
                    result = await analyze_concrete(
                        doc_paths=[doc_path],
                        smeta_path=smeta_path,
                        use_claude=True,
                        claude_mode=mode
                    )
                    
                    end_time = asyncio.get_event_loop().time()
                    execution_time = round(end_time - start_time, 2)
                    
                    concrete_count = len(result.get("concrete_summary", []))
                    analysis_method = result.get("analysis_method", "unknown")
                    
                    results[mode] = {
                        "time": execution_time,
                        "concrete_grades": concrete_count,
                        "method": analysis_method,
                        "success": True
                    }
                    
                    logger.info(f"‚úÖ {mode}: {execution_time}—Å, {concrete_count} –º–∞—Ä–æ–∫, –º–µ—Ç–æ–¥: {analysis_method}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ {mode}: {e}")
                    results[mode] = {"success": False, "error": str(e)}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful_modes = [m for m, r in results.items() if r.get("success")]
            if successful_modes:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —Ä–µ–∂–∏–º—ã: {', '.join(successful_modes)}")
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π
                fastest = min(successful_modes, key=lambda m: results[m].get("time", 999))
                logger.info(f"‚ö° –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {fastest} ({results[fastest]['time']}—Å)")
                
                return True
            else:
                logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω —Ä–µ–∂–∏–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def test_api_endpoints():
    """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    try:
        logger.info("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        import requests
        import json
        
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ
        base_url = "http://localhost:8000"
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ Claude
        try:
            response = requests.get(f"{base_url}/test/claude/status", timeout=10)
            if response.status_code == 200:
                status_data = response.json()
                logger.info(f"‚úÖ Claude —Å—Ç–∞—Ç—É—Å: {status_data.get('status')}")
            else:
                logger.warning(f"‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å {response.status_code})")
        except requests.exceptions.RequestException:
            logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False

async def test_cost_estimation():
    """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        logger.info("üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ Claude...")
        
        from config.claude_config import claude_config
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        scenarios = [
            {"name": "–ú–∞–ª—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", "input": 2000, "output": 500},
            {"name": "–°—Ä–µ–¥–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç", "input": 5000, "output": 1000},
            {"name": "–ë–æ–ª—å—à–æ–π –¥–æ–∫—É–º–µ–Ω—Ç", "input": 10000, "output": 2000}
        ]
        
        for scenario in scenarios:
            cost = claude_config.estimate_cost(
                scenario["input"], 
                scenario["output"], 
                "claude-3-sonnet-20240229"
            )
            logger.info(f"üíµ {scenario['name']}: ${cost:.4f}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        models = ["claude-3-haiku-20240307", "claude-3-sonnet-20240229", "claude-3-opus-20240229"]
        logger.info("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π (5000 input + 1000 output —Ç–æ–∫–µ–Ω–æ–≤):")
        
        for model in models:
            cost = claude_config.estimate_cost(5000, 1000, model)
            logger.info(f"   {model}: ${cost:.4f}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Claude –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    tests = [
        ("–ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", test_claude_basic),
        ("–ê–Ω–∞–ª–∏–∑ –±–µ—Ç–æ–Ω–∞", test_concrete_analysis), 
        ("–ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑", test_hybrid_analysis),
        ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", test_api_endpoints),
        ("–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", test_cost_estimation)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*50}")
        logger.info(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        logger.info(f"{'='*50}")
        
        try:
            success = await test_func()
            results[test_name] = success
            status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
            logger.info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {status}")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–∏
    logger.info(f"\n{'='*60}")
    logger.info("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info(f"{'='*60}")
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        logger.info(f"{status} {test_name}")
    
    logger.info(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Claude –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        logger.warning(f"‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return False

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ["ANTHROPIC_API_KEY"]
    optional_vars = ["USE_CLAUDE", "CLAUDE_MODE", "CLAUDE_MODEL"]
    
    missing_required = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_required.append(var)
        else:
            logger.info(f"‚úÖ {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    for var in optional_vars:
        value = os.getenv(var, "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info(f"‚ÑπÔ∏è {var}: {value}")
    
    if missing_required:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_required)}")
        logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_required:
            logger.error(f"   export {var}=–≤–∞—à–µ_–∑–Ω–∞—á–µ–Ω–∏–µ")
        return False
    
    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ Claude API Integration Test Suite")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        logger.error("üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = await run_all_tests()
    
    if success:
        print("\nüéä –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! Claude API –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–µ–ø–ª–æ–∏—Ç—å –Ω–∞ Render —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é.")
    else:
        print("\nüîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.")
    
    return success

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
