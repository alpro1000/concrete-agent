import pytest
import logging
import requests

logger = logging.getLogger(__name__)

# ====================================================
# üîç –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
# ====================================================
def check_imports():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞.
    """
    try:
        from utils.claude_client import get_claude_client
        # Import from the main concrete_agent.py file (not the package)
        import importlib.util
        import os
        spec = importlib.util.spec_from_file_location("concrete_agent_main", 
                os.path.join(os.path.dirname(os.path.dirname(__file__)), 'agents', 'concrete_agent.py'))
        concrete_agent_main = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(concrete_agent_main)
        analyze_concrete = concrete_agent_main.analyze_concrete
        from config.claude_config import claude_config
        return True
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

# ====================================================
# ‚úÖ –¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Claude
# ====================================================
@pytest.mark.skipif(not check_imports(), reason="–ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞")
async def test_hybrid_analysis():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –∞–≥–µ–Ω—Ç–∞ Concrete —á–µ—Ä–µ–∑ Claude API.
    """
    # Import from the main concrete_agent.py file (not the package)
    import importlib.util
    import os
    spec = importlib.util.spec_from_file_location("concrete_agent_main", 
            os.path.join(os.path.dirname(os.path.dirname(__file__)), 'agents', 'concrete_agent.py'))
    concrete_agent_main = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(concrete_agent_main)
    analyze_concrete = concrete_agent_main.analyze_concrete

    try:
        result = await analyze_concrete(["test_doc.pdf"], None, use_claude=False)
        assert result is not None
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {result}")

    except Exception as e:
        if "rate_limit" in str(e).lower():
            pytest.skip("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤")
        elif "insufficient" in str(e).lower():
            pytest.skip("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ API")
        else:
            raise

# ====================================================
# üåç –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
# ====================================================
def api_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–Ω—è—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä API –Ω–∞ localhost:8000"""
    try:
        r = requests.get("http://localhost:8000/docs")
        return r.status_code == 200
    except Exception:
        return False

@pytest.mark.skipif(not api_running(), reason="API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
def test_api_docs_available():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–Ω—è—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    """
    response = requests.get("http://localhost:8000/docs")
    assert response.status_code == 200
    logger.info("‚úÖ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ /docs")
