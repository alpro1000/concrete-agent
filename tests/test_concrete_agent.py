import pytest
import logging
import requests
import os

logger = logging.getLogger(__name__)

# ====================================================
# üîç –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
# ====================================================
def check_core_imports():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ CORE –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–µ –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤).
    """
    try:
        from app.core.llm_service import get_llm_service
        from app.core.orchestrator import OrchestratorService
        return True
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ core –º–æ–¥—É–ª–µ–π: {e}")
        return False

def check_agent_available(agent_name: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç.
    –ê–≥–µ–Ω—Ç—ã –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã - —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç–∞ –Ω–µ—Ç.
    """
    if agent_name == 'tzd_reader':
        try:
            from agents.tzd_reader.agent import tzd_reader
            return True
        except ImportError:
            return False
    return False

# ====================================================
# ‚úÖ –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ core –º–æ–¥—É–ª–µ–π
# ====================================================
@pytest.mark.skipif(not check_core_imports(), reason="Core –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
def test_core_modules_available():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ core –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤.
    """
    from app.core.llm_service import get_llm_service
    from app.core.orchestrator import OrchestratorService
    
    llm = get_llm_service()
    assert llm is not None
    logger.info("‚úÖ LLM —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    orchestrator = OrchestratorService(llm)
    assert orchestrator is not None
    logger.info("‚úÖ Orchestrator –¥–æ—Å—Ç—É–ø–µ–Ω")

# ====================================================
# ‚úÖ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ TZD –∞–≥–µ–Ω—Ç (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
# ====================================================
@pytest.mark.skipif(not check_agent_available('tzd_reader'), reason="TZD Reader –∞–≥–µ–Ω—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
async def test_tzd_agent_if_available():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É TZD –∞–≥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
    –¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
    """
    try:
        from agents.tzd_reader.agent import tzd_reader
        
        # Simple availability test
        assert tzd_reader is not None
        logger.info("‚úÖ TZD Reader –∞–≥–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω")
        
    except Exception as e:
        if "rate_limit" in str(e).lower():
            pytest.skip("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤")
        elif "insufficient" in str(e).lower():
            pytest.skip("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ API")
        else:
            raise

# ====================================================
# üåç –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
# ====================================================
def api_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–Ω—è—Ç –ª–∏ —Å–µ—Ä–≤–µ—Ä API –Ω–∞ localhost:8000"""
    try:
        r = requests.get("http://localhost:8000/docs", timeout=2)
        return r.status_code == 200
    except Exception:
        return False

@pytest.mark.skipif(not api_running(), reason="API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
def test_api_docs_available():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–Ω—è—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    """
    response = requests.get("http://localhost:8000/docs")
    assert response.status_code == 200
    logger.info("‚úÖ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ /docs")
