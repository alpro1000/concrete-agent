#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
test_integration.py

–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

import asyncio
import logging
import tempfile
import os
from pathlib import Path

from agents.integration_orchestrator import get_integration_orchestrator, IntegratedAnalysisRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def create_test_files():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    temp_dir = tempfile.mkdtemp()
    logger.info(f"–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ {temp_dir}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –º–∞—Ä–∫–æ–π –±–µ—Ç–æ–Ω–∞
    doc_path = os.path.join(temp_dir, "test_document.txt")
    with open(doc_path, "w", encoding="utf-8") as f:
        f.write("""
Projektov√° dokumentace
Pou≈æit√Ω beton: C25/30 XC2 XF1
Pou≈æit√° v√Ωztu≈æ: Fe500 - 2500 kg
Okna PVC - 15 ks
Tepeln√° izolace XPS 100mm - 85.5 m2
Ocelov√Ω nosn√≠k IPE200 - 450 kg
St≈ôe≈°n√≠ krytina - ta≈°ky keramick√© - 125 m2
Tƒõsnƒõn√≠ EPDM - 45 m

MOSTN√ç OPƒöRA ZE ≈ΩELEZOBETONU C30/37
Objem betonu: 125.5 m3
Cena: 3500 Kƒç za m3

Z√ÅKLADOV√Å DESKA C25/30
Plocha: 85.2 m2
Tlou≈°≈•ka: 300 mm
        """)
    
    # –ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å–º–µ—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤–∞—è)
    smeta_path = os.path.join(temp_dir, "test_smeta.txt")
    with open(smeta_path, "w", encoding="utf-8") as f:
        f.write("""
Polo≈æka 1: Beton C25/30 - 125.5 m3 - 3500 Kƒç/m3
Polo≈æka 2: V√Ωztu≈æ Fe500 - 2500 kg - 25 Kƒç/kg
Polo≈æka 3: Okna PVC - 15 ks - 3500 Kƒç/ks
Polo≈æka 4: Izolace XPS - 85.5 m2 - 250 Kƒç/m2
        """)
    
    return temp_dir, doc_path, smeta_path

async def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    temp_dir, doc_path, smeta_path = create_test_files()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        request = IntegratedAnalysisRequest(
            doc_paths=[doc_path],
            smeta_path=smeta_path,
            material_query="v√Ωztu≈æ",  # –ò—â–µ–º –∞—Ä–º–∞—Ç—É—Ä—É
            use_claude=False,  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Claude –¥–ª—è —Ç–µ—Å—Ç–∞
            claude_mode="enhancement",
            language="cz"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        orchestrator = get_integration_orchestrator()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        result = await orchestrator.analyze_materials_integrated(request)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        logger.info(f"–£—Å–ø–µ—Ö: {result.success}")
        
        if result.success:
            logger.info(f"üèóÔ∏è –ê–Ω–∞–ª–∏–∑ –±–µ—Ç–æ–Ω–∞:")
            logger.info(f"  - –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–æ–∫: {result.concrete_summary.get('total_grades', 0)}")
            
            logger.info(f"üìê –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤:")
            logger.info(f"  - –û–±—â–∏–π –æ–±—ä–µ–º: {result.volume_summary.get('total_volume_m3', 0)} –º¬≥")
            logger.info(f"  - –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result.volume_summary.get('total_cost', 0)} Kƒç")
            
            logger.info(f"üîß –ê–Ω–∞–ª–∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:")
            logger.info(f"  - –ó–∞–ø—Ä–æ—Å: '{request.material_query}'")
            logger.info(f"  - –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {result.material_summary.get('total_materials', 0)}")
            
            logger.info(f"üìã –°—Ç–∞—Ç—É—Å—ã –∞–Ω–∞–ª–∏–∑–∞:")
            for agent, status in result.analysis_status.items():
                logger.info(f"  - {agent}: {status}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {result.error_message}")
        
        return result.success
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        import shutil
        shutil.rmtree(temp_dir)
        logger.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

if __name__ == "__main__":
    success = asyncio.run(test_integration())
    if success:
        logger.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")