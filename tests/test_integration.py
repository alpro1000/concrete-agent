#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
test_integration.py

–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤)
"""

import asyncio
import logging
import tempfile
import os
import pytest
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def check_core_available():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å core –º–æ–¥—É–ª–µ–π"""
    try:
        from app.core.orchestrator import OrchestratorService
        from app.core.llm_service import get_llm_service
        return True
    except ImportError as e:
        logger.error(f"Core –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        return False

def create_test_files():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    temp_dir = tempfile.mkdtemp()
    logger.info(f"–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ {temp_dir}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –º–∞—Ä–∫–æ–π –±–µ—Ç–æ–Ω–∞
    doc_path = os.path.join(temp_dir, "test_document.txt")
    with open(doc_path, "w", encoding="utf-8") as f:
        f.write("""
Projektov√° dokumentace
Pou≈æit√Ω beton: C25/30 XC2 XF1
Pou≈æit√° v√Ωztu≈æ: Fe500 - 2500 kg
Okna PVC - 15 ks
Tepeln√° izolace XPS 100mm - 85.5 m2
Ocelov√Ω nosn√≠k IPE200 - 450 kg
St≈ôe≈°n√≠ krytina - ta≈°ky keramick√© - 125 m2
Tƒõsnƒõn√≠ EPDM - 45 m

MOSTN√ç OPƒöRA ZE ≈ΩELEZOBETONU C30/37
Objem betonu: 125.5 m3
Cena: 3500 Kƒç za m3

Z√ÅKLADOV√Å DESKA C25/30
Plocha: 85.2 m2
Tlou≈°≈•ka: 300 mm
        """)
    
    return temp_dir, doc_path

@pytest.mark.skipif(not check_core_available(), reason="Core –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
@pytest.mark.asyncio
async def test_orchestrator_file_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    temp_dir, doc_path = create_test_files()
    
    try:
        from app.core.orchestrator import OrchestratorService
        from app.core.llm_service import get_llm_service
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        llm = get_llm_service()
        orchestrator = OrchestratorService(llm)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        file_type = orchestrator.detect_file_type(doc_path)
        logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_type}")
        
        assert file_type in ['technical_document', 'technical_assignment', 'general_document']
        logger.info("‚úÖ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        import shutil
        shutil.rmtree(temp_dir)
        logger.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

@pytest.mark.skipif(not check_core_available(), reason="Core –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
@pytest.mark.asyncio
async def test_orchestrator_lazy_loading():
    """–¢–µ—Å—Ç –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤")
    
    try:
        from app.core.orchestrator import OrchestratorService
        from app.core.llm_service import get_llm_service
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        llm = get_llm_service()
        orchestrator = OrchestratorService(llm)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å TZD –∞–≥–µ–Ω—Ç (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π)
        tzd_agent = await orchestrator._get_agent('tzd')
        logger.info(f"TZD –∞–≥–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {tzd_agent is not None}")
        
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–≥–µ–Ω—Ç—ã
        unknown_agent = await orchestrator._get_agent('unknown_agent')
        logger.info(f"Unknown –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None: {unknown_agent is None}")
        
        assert unknown_agent is None, "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å None"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ (—Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∞–≥–µ–Ω—Ç–æ–≤)")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    import sys
    sys.exit(pytest.main([__file__, "-v"]))