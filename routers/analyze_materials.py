from fastapi import APIRouter, UploadFile, File, HTTPException, Form
from fastapi.responses import JSONResponse
from agents.integration_orchestrator import get_integration_orchestrator, IntegratedAnalysisRequest
from agents.materials_agent import analyze_materials  # Keep for backward compatibility
from config.settings import settings
import tempfile
import os
import shutil
import logging
from typing import Optional, List

router = APIRouter()
materials_router = router  # Alias for main.py compatibility
logger = logging.getLogger(__name__)

@router.post("/materials")
async def analyze_materials_integrated_endpoint(
    docs: List[UploadFile] = File(..., description="–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOCX, TXT)"),
    smeta: UploadFile = File(..., description="–°–º–µ—Ç–∞ –∏–ª–∏ –≤—ã–∫–∞–∑ –≤—ã–º–µ—Ä (XLSX, CSV, PDF). –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ —Å–º–µ—Ç—ã, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª."),
    material_query: Optional[str] = Form(None, description="–ó–∞–ø—Ä–æ—Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–∞—Ä–º–∞—Ç—É—Ä–∞, –æ–∫–Ω–∞, –¥–≤–µ—Ä–∏, –ø–ª–∏—Ç–∫–∞)"),
    use_claude: bool = Form(True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Claude AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"),
    claude_mode: str = Form("enhancement", description="–†–µ–∂–∏–º Claude: enhancement –∏–ª–∏ primary"),
    language: str = Form("cz", description="–Ø–∑—ã–∫ –æ—Ç—á–µ—Ç–æ–≤: cz, en, ru"),
    include_drawing_analysis: bool = Form(False, description="–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
):
    """
    üöÄ –ù–û–í–´–ô –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:
    1. ConcreteAgent - –∞–Ω–∞–ª–∏–∑ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞ –∏ –∏—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    2. VolumeAgent - –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä–æ–∫ –∏ —Å–º–µ—Ç—ã
    3. MaterialAgent - –ø–æ–∏—Å–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
    4. DrawingVolumeAgent - –∞–Ω–∞–ª–∏–∑ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–¥–∏–Ω—ã–π JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞.
    """
    temp_dir = tempfile.mkdtemp()
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        doc_paths = []
        for file in docs:
            if not any(file.filename.endswith(ext) for ext in settings.ALLOWED_EXTENSIONS):
                raise HTTPException(
                    status_code=400, 
                    detail=f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.filename}. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(settings.ALLOWED_EXTENSIONS)}"
                )
            path = os.path.join(temp_dir, file.filename)
            with open(path, "wb") as f:
                f.write(await file.read())
            doc_paths.append(path)
            logger.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {file.filename}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç–∞—è
        smeta_path = None
        if smeta and smeta.filename and smeta.size > 0:
            if not any(smeta.filename.endswith(ext) for ext in settings.ALLOWED_EXTENSIONS):
                raise HTTPException(
                    status_code=400, 
                    detail=f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ —Å–º–µ—Ç—ã: {smeta.filename}"
                )
            smeta_path = os.path.join(temp_dir, smeta.filename)
            with open(smeta_path, "wb") as f:
                f.write(await smeta.read())
            logger.info(f"üìë –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–º–µ—Ç–∞: {smeta.filename}")
        else:
            logger.info("üìë –°–º–µ—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        request = IntegratedAnalysisRequest(
            doc_paths=doc_paths,
            smeta_path=smeta_path,
            material_query=material_query,
            use_claude=use_claude,
            claude_mode=claude_mode,
            language=language,
            include_drawing_analysis=include_drawing_analysis
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        orchestrator = get_integration_orchestrator()
        result = await orchestrator.analyze_materials_integrated(request)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.success:
            logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–æ–∫ –±–µ—Ç–æ–Ω–∞: {result.concrete_summary.get('total_grades', 0)}")
            logger.info(f"üìê –û–±—ä–µ–º –∞–Ω–∞–ª–∏–∑–∞: {result.volume_summary.get('total_volume_m3', 0)} –º¬≥")
            logger.info(f"üîß –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {result.material_summary.get('total_materials', 0)}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {result.error_message}")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON response
        result_dict = {
            "success": result.success,
            "error_message": result.error_message,
            "concrete_analysis": result.concrete_summary,
            "volume_analysis": result.volume_summary,
            "material_analysis": result.material_summary,
            "drawing_analysis": result.drawing_summary,
            "sources": result.sources,
            "analysis_status": result.analysis_status,
            "request_parameters": {
                "material_query": material_query,
                "use_claude": use_claude,
                "claude_mode": claude_mode,
                "language": language,
                "documents_count": len(doc_paths),
                "smeta_provided": smeta_path is not None,
                "include_drawing_analysis": include_drawing_analysis
            }
        }

        return result_dict

    except HTTPException:
        # –ü–µ—Ä–µ–ø–æ–¥—ã–º–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        raise
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "success": False,
                "error_message": str(e),
                "concrete_analysis": {},
                "volume_analysis": {},
                "material_analysis": {},
                "analysis_status": {
                    "concrete_analysis": "error",
                    "volume_analysis": "error", 
                    "material_analysis": "error"
                }
            }
        )
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        shutil.rmtree(temp_dir)
        logger.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@router.post("/materials-legacy")
async def analyze_materials_legacy_endpoint(docs: list[UploadFile] = File(...)):
    """
    –°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /materials –¥–ª—è –Ω–æ–≤—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    """
    temp_dir = tempfile.mkdtemp()
    try:
        doc_paths = []
        for file in docs:
            if not any(file.filename.endswith(ext) for ext in settings.ALLOWED_EXTENSIONS):
                raise HTTPException(status_code=400, detail=f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file.filename}")
            path = os.path.join(temp_dir, file.filename)
            with open(path, "wb") as f:
                f.write(await file.read())
            doc_paths.append(path)
            logger.info(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {file.filename}")

        result = analyze_materials(doc_paths)
        return result
    finally:
        shutil.rmtree(temp_dir)
        logger.info("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
