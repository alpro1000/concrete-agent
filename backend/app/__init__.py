"""
Stav Agent / Concrete Agent
===========================

Modul√°rn√≠ inteligentn√≠ syst√©m pro anal√Ωzu stavebn√≠ch projekt≈Ø.
Architektura zalo≈æen√° na agenty (TZD, BOQ, Drawing, Resource, Foreman, KnowledgeBase, Chat, Export, UserManager)
s centr√°ln√≠m orchestr√°torem a p≈ô√≠stupem k LLM (Claude, GPT).

¬© 2025 Stav Systems. V≈°echna pr√°va vyhrazena.
"""

from __future__ import annotations
import logging
from pathlib import Path
from dotenv import load_dotenv

# === Inicializace prost≈ôed√≠ ===
# ------------------------------------
# Naƒçte promƒõnn√© z .env souboru, pokud bƒõ≈æ√≠me lok√°lnƒõ.
load_dotenv()

# === Nastaven√≠ logov√°n√≠ ===
# ------------------------------------
LOG_DIR = Path(__file__).resolve().parent.parent / "logs"
LOG_DIR.mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] [%(name)s]: %(message)s",
    handlers=[
        logging.FileHandler(LOG_DIR / "app.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)

logger = logging.getLogger("app")
logger.info("‚úÖ Modul 'app' inicializov√°n.")


# === Dynamick√© naƒçten√≠ modul≈Ø ===
# ------------------------------------
# (Nep≈ô√≠m√© importy, aby se p≈ôede≈°lo cyklick√Ωm z√°vislostem)
try:
    import app.core.config  # typ: ignore
    import app.core.database  # typ: ignore
    import app.core.logging_config  # typ: ignore
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è  Nƒõkter√© moduly nebylo mo≈æn√© naƒç√≠st: {e}")


# === Registrace namespace ===
# ------------------------------------
__all__ = [
    "core",
    "models",
    "schemas",
    "routers",
    "agents",
    "services",
    "prompts",
]

# === Informativn√≠ banner ===
logger.info(
    "üß† Stav Agent inicializov√°n.\n"
    "Struktura p≈ôipravena pro v√≠ceagentn√≠ orchestraci.\n"
    "Pou≈æit√≠ vƒõdeck√© metody: Hypot√©za ‚Üí Anal√Ωza ‚Üí Verifikace ‚Üí Z√°vƒõr ‚Üí Report."
)
