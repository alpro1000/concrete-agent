"""
main.py ‚Äî —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Stav Agent / Concrete Agent Backend

üì¶ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    - –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–≥–µ—Ä–∞
    - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (API)
    - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –∏ Knowledge Base
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ LLM-—Å–µ—Ä–≤–∏—Å–æ–≤
"""

import asyncio
import logging
import os
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager

# Core modules
from app.core.config import settings
from app.core.database import init_db
from app.core.logger import configure_logging
from app.core.orchestrator import Orchestrator
from app.core.llm_service import LLMService
from app.core.prompt_loader import PromptLoader
from app.services.file_storage import ensure_storage_dirs

# Routers
from app.routers import (
    unified_router,
    results_router,
    user_router,
    chat_router,
    health_router
)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ó–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    """
    logging.info("üöÄ Initializing Stav Agent backend environment...")
    await init_db()
    ensure_storage_dirs()
    Orchestrator.initialize()
    PromptLoader.preload_prompts()
    await LLMService.verify_connectivity()
    logging.info("‚úÖ Backend environment ready")
    yield
    logging.info("üß© Shutting down Stav Agent backend gracefully...")


# --- FastAPI application instance ---
app = FastAPI(
    title="Stav Agent / Concrete Agent API",
    version="1.0.0",
    description=(
        "Modular AI-driven construction analysis system "
        "for reading, analyzing and synthesizing building documentation."
    ),
    lifespan=lifespan
)


# --- Middleware ---
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # in production: restrict by domain
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# --- Routers registration ---
app.include_router(health_router.router, prefix="/api/v1/health", tags=["health"])
app.include_router(user_router.router, prefix="/api/v1/user", tags=["user"])
app.include_router(unified_router.router, prefix="/api/v1/analysis", tags=["analysis"])
app.include_router(results_router.router, prefix="/api/v1/results", tags=["results"])
app.include_router(chat_router.router, prefix="/api/v1/chat", tags=["chat"])


# --- Startup message ---
@app.on_event("startup")
async def startup_event():
    configure_logging()
    logging.info("üîß Stav Agent backend starting...")
    logging.info(f"LLM Provider: {settings.LLM_PROVIDER} ({settings.LLM_MODEL})")
    logging.info(f"Backup Provider: {settings.LLM_BACKUP_PROVIDER}")
    logging.info(f"Database URL: {settings.DB_URL}")
    logging.info("üìö Knowledge base and prompts initialized successfully.")


# --- Root endpoint ---
@app.get("/")
async def root():
    """
    –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (–ø—Ä–æ–≤–µ—Ä–∫–∞ API)
    """
    return {
        "service": "Stav Agent / Concrete Agent Backend",
        "status": "running",
        "llm_provider": settings.LLM_PROVIDER,
        "model": settings.LLM_MODEL,
        "version": "1.0.0"
    }


# --- Run manually (for local dev only) ---
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        reload=True
    )
